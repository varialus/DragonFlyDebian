
This stuff could be moved to glibc (or some other library).  See #629556 and #630843.

--- a/sbin/nfsiod/Makefile
+++ b/sbin/nfsiod/Makefile
@@ -2,7 +2,10 @@
 # $FreeBSD$
 
 PROG=	nfsiod
+SRCS=	nfsiod.c getvfsbyname.c
 WARNS?=	6
 MAN=	nfsiod.8
 
+.PATH: ${.CURDIR}/../../extra
+
 .include <bsd.prog.mk>
--- /dev/null
+++ b/extra/getvfsbyname.c
@@ -0,0 +1,70 @@
+/*
+ * Copyright (c) 1995
+ *	The Regents of the University of California.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 4. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <stddef.h>
+#include <sys/mount.h>
+#include <sys/sysctl.h>
+#include <errno.h>
+#include <stdlib.h>
+#include <string.h>
+
+/*
+ * Given a filesystem name, determine if it is resident in the kernel,
+ * and if it is resident, return its xvfsconf structure.
+ */
+int
+getvfsbyname(fsname, vfcp)
+	const char *fsname;
+	struct xvfsconf *vfcp;
+{
+	struct xvfsconf *xvfsp;
+	size_t buflen;
+	int cnt, i;
+
+	if (sysctlbyname("vfs.conflist", NULL, &buflen, NULL, 0) < 0)
+		return (-1);
+	xvfsp = malloc(buflen);
+	if (xvfsp == NULL)
+		return (-1);
+	if (sysctlbyname("vfs.conflist", xvfsp, &buflen, NULL, 0) < 0) {
+		free(xvfsp);
+		return (-1);
+	}
+	cnt = buflen / sizeof(struct xvfsconf);
+	for (i = 0; i < cnt; i++) {
+		if (strcmp(fsname, xvfsp[i].vfc_name) == 0) {
+			memcpy(vfcp, xvfsp + i, sizeof(struct xvfsconf));
+			free(xvfsp);
+			return (0);
+		}
+	}
+	free(xvfsp);
+	errno = ENOENT;
+	return (-1);
+}
--- a/usr.sbin/mountd/Makefile
+++ b/usr.sbin/mountd/Makefile
@@ -2,14 +2,14 @@
 # $FreeBSD$
 
 PROG=	mountd
-SRCS=	mountd.c getmntopts.c
+SRCS=	mountd.c getmntopts.c getvfsbyname.c nfssvc.c
 MAN=	exports.5 netgroup.5 mountd.8
 
 MOUNT=  ${.CURDIR}/../../sbin/mount
 CFLAGS+= -I${MOUNT} -I${.CURDIR}/../../sys
 WARNS?= 2
 
-.PATH: ${MOUNT}
+.PATH: ${MOUNT} ${.CURDIR}/../../extra
 
 DPADD=	${LIBUTIL}
 LDADD=	-ltirpc -lbsd
--- /dev/null
+++ b/extra/nfssvc.c
@@ -0,0 +1,7 @@
+#include <sys/syscall.h>
+
+int
+nfssvc (int a, void *b)
+{
+  return syscall (SYS_nfssvc, a, b);
+}
--- a/usr.sbin/nfsd/Makefile
+++ b/usr.sbin/nfsd/Makefile
@@ -2,10 +2,13 @@
 # $FreeBSD$
 
 PROG=	nfsd
+SRCS=	nfsd.c nfssvc.c
 MAN=	nfsd.8 nfsv4.4 stablerestart.5
 CFLAGS+= -I${.CURDIR}/../../sys
 LDADD=   -ltirpc -lbsd
 
+.PATH: ${.CURDIR}/../../extra
+
 WARNS?=	6
 
 .include <bsd.prog.mk>
--- a/usr.sbin/rpc.lockd/Makefile
+++ b/usr.sbin/rpc.lockd/Makefile
@@ -4,7 +4,7 @@
 PROG=	rpc.lockd
 MAN=	rpc.lockd.8
 MLINKS=	rpc.lockd.8 lockd.8
-SRCS=	kern.c nlm_prot_svc.c nlm_prot_xdr.c lockd.c lock_proc.c lockd_lock.c sm_inter_xdr.c
+SRCS=	kern.c nlm_prot_svc.c nlm_prot_xdr.c lockd.c lock_proc.c lockd_lock.c sm_inter_xdr.c nlm_syscall.c
 
 CFLAGS+= -I. -I${.CURDIR}/../../include/rpcsvc
 #WARNS?= 2
--- /dev/null
+++ b/usr.sbin/rpc.lockd/nlm_syscall.c
@@ -0,0 +1,11 @@
+#include <sys/syscall.h>
+
+#ifndef SYS_nlm_syscall
+#define SYS_nlm_syscall		154
+#endif
+
+int
+nlm_syscall (int a, int b, int c, char **d)
+{
+  return syscall (SYS_nlm_syscall, a, b, c, d);
+}
