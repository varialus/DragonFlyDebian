# This patch should be removed when a new tarball is created

diff -Nurd a/usr.sbin/acpi/acpiconf/acpiconf.8 b/usr.sbin/acpi/acpiconf/acpiconf.8
--- a/usr.sbin/acpi/acpiconf/acpiconf.8	1970-01-01 01:00:00.000000000 +0100
+++ b/usr.sbin/acpi/acpiconf/acpiconf.8	2005-02-09 19:07:17.000000000 +0100
@@ -0,0 +1,92 @@
+.\"-
+.\" Copyright (c) 2000 Dag-Erling Coïdan Smørgrav
+.\" All rights reserved.
+.\"
+.\" Redistribution and use in source and binary forms, with or without
+.\" modification, are permitted provided that the following conditions
+.\" are met:
+.\" 1. Redistributions of source code must retain the above copyright
+.\"    notice, this list of conditions and the following disclaimer
+.\"    in this position and unchanged.
+.\" 2. Redistributions in binary form must reproduce the above copyright
+.\"    notice, this list of conditions and the following disclaimer in the
+.\"    documentation and/or other materials provided with the distribution.
+.\" 3. The name of the author may not be used to endorse or promote products
+.\"    derived from this software without specific prior written permission.
+.\"
+.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+.\"
+.\" $FreeBSD$
+.\"
+.Dd August 16, 2004
+.Dt ACPICONF 8
+.Os
+.Sh NAME
+.Nm acpiconf
+.Nd control ACPI power management
+.Sh SYNOPSIS
+.Nm
+.Op Fl h
+.Op Fl i Ar batt
+.Op Fl s Ar type
+.Sh DESCRIPTION
+The
+.Nm
+utility allows the user control of the ACPI power management
+functions.
+The following command-line options are recognized:
+.Bl -tag -width ".Fl s Ar type"
+.It Fl h
+Displays a summary of available options.
+.It Fl i Ar batt
+Get design information about the specified battery.
+.It Fl s Ar type
+Enters the specified sleep mode.
+Recognized types are
+.Cm 1
+(only the CPU clock is stopped),
+.Cm 2
+(not implemented on most systems but similar to S1),
+.Cm 3
+(the CPU context is lost and memory context is preserved),
+.Cm 4
+(the CPU context is lost and memory context is stored to disk)
+and
+.Cm 5
+(soft off).
+Sleep states may also be given as S1, S2, etc.
+The supported states depend on BIOS implementation, including ACPI
+byte code (AML).
+If the
+.Pa /etc/rc.suspend
+and
+.Pa /etc/rc.resume
+scripts are executable, they will be run before and after entering
+the given sleep state.
+.El
+.Sh SEE ALSO
+.Xr acpi 4 ,
+.Xr acpidump 8 ,
+.Xr apm 8
+.Sh HISTORY
+The
+.Nm
+utility appeared in
+.Fx 5.0 .
+.Sh AUTHORS
+.An -nosplit
+The
+.Nm
+utility was written by
+.An Mitsuru Iwasaki Aq iwasaki@FreeBSD.org .
+This manual page was written by
+.An Dag-Erling Sm\(/orgrav Aq des@FreeBSD.org .
diff -Nurd a/usr.sbin/acpi/acpiconf/acpiconf.c b/usr.sbin/acpi/acpiconf/acpiconf.c
--- a/usr.sbin/acpi/acpiconf/acpiconf.c	1970-01-01 01:00:00.000000000 +0100
+++ b/usr.sbin/acpi/acpiconf/acpiconf.c	2009-06-05 20:50:45.000000000 +0200
@@ -0,0 +1,228 @@
+/*-
+ * Copyright (c) 1999 Mitsuru IWASAKI <iwasaki@FreeBSD.org>
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ *	$Id: acpiconf.c,v 1.5 2000/08/08 14:12:19 iwasaki Exp $
+ *	$FreeBSD$
+ */
+
+#include <sys/param.h>
+
+#include <err.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <sys/ioctl.h>
+#include <sysexits.h>
+#include <unistd.h>
+
+#include <dev/acpica/acpiio.h>
+
+#include <contrib/dev/acpica/include/acpi.h>
+
+#define ACPIDEV		"/dev/acpi"
+
+static int	acpifd;
+
+static void
+acpi_init(void)
+{
+	acpifd = open(ACPIDEV, O_RDWR);
+	if (acpifd == -1)
+		acpifd = open(ACPIDEV, O_RDONLY);
+	if (acpifd == -1)
+		err(EX_OSFILE, ACPIDEV);
+}
+
+/* Prepare to sleep and then wait for the signal that sleeping can occur. */
+static void
+acpi_sleep(int sleep_type)
+{
+	int ret;
+  
+	/* Notify OS that we want to sleep.  devd(8) gets this notify. */
+	ret = ioctl(acpifd, ACPIIO_REQSLPSTATE, &sleep_type);
+	if (ret != 0)
+		err(EX_IOERR, "request sleep type (%d) failed", sleep_type);
+}
+
+/* Ack or abort a pending suspend request. */
+static void
+acpi_sleep_ack(int err_val)
+{
+	int ret;
+
+	ret = ioctl(acpifd, ACPIIO_ACKSLPSTATE, &err_val);
+	if (ret != 0)
+		err(EX_IOERR, "ack sleep type failed");
+}
+
+/* should be a acpi define, but doesn't appear to be */
+#define UNKNOWN_CAP 0xffffffff
+#define UNKNOWN_VOLTAGE 0xffffffff
+
+static int
+acpi_battinfo(int num)
+{
+	union acpi_battery_ioctl_arg battio;
+	const char *pwr_units;
+	int hours, min;
+
+	if (num < 0 || num > 64)
+		err(EX_USAGE, "invalid battery %d", num);
+
+	/* Print battery design information. */
+	battio.unit = num;
+	if (ioctl(acpifd, ACPIIO_BATT_GET_BIF, &battio) == -1)
+		err(EX_IOERR, "get battery info (%d) failed", num);
+	if (battio.bif.units == 0)
+		pwr_units = "mW";
+	else
+		pwr_units = "mA";
+
+	if (battio.bif.dcap == UNKNOWN_CAP)
+		printf("Design capacity:\tunknown\n");
+	else
+		printf("Design capacity:\t%d %sh\n", battio.bif.dcap,
+		    pwr_units);
+	if (battio.bif.lfcap == UNKNOWN_CAP)
+		printf("Last full capacity:\tunknown\n");
+	else
+		printf("Last full capacity:\t%d %sh\n", battio.bif.lfcap,
+		    pwr_units);
+	printf("Technology:\t\t%s\n", battio.bif.btech == 0 ?
+	    "primary (non-rechargeable)" : "secondary (rechargeable)");
+	if (battio.bif.dvol == UNKNOWN_CAP)
+		printf("Design voltage:\t\tunknown\n");
+	else
+		printf("Design voltage:\t\t%d mV\n", battio.bif.dvol);
+	printf("Capacity (warn):\t%d %sh\n", battio.bif.wcap, pwr_units);
+	printf("Capacity (low):\t\t%d %sh\n", battio.bif.lcap, pwr_units);
+	printf("Low/warn granularity:\t%d %sh\n", battio.bif.gra1, pwr_units);
+	printf("Warn/full granularity:\t%d %sh\n", battio.bif.gra2, pwr_units);
+	printf("Model number:\t\t%s\n", battio.bif.model);
+	printf("Serial number:\t\t%s\n", battio.bif.serial);
+	printf("Type:\t\t\t%s\n", battio.bif.type);
+	printf("OEM info:\t\t%s\n", battio.bif.oeminfo);
+
+	/* Print current battery state information. */
+	battio.unit = num;
+	if (ioctl(acpifd, ACPIIO_BATT_GET_BATTINFO, &battio) == -1)
+		err(EX_IOERR, "get battery user info (%d) failed", num);
+	if (battio.battinfo.state != ACPI_BATT_STAT_NOT_PRESENT) {
+		printf("State:\t\t\t");
+		if (battio.battinfo.state == 0)
+			printf("high ");
+		if (battio.battinfo.state & ACPI_BATT_STAT_CRITICAL)
+			printf("critical ");
+		if (battio.battinfo.state & ACPI_BATT_STAT_DISCHARG)
+			printf("discharging ");
+		if (battio.battinfo.state & ACPI_BATT_STAT_CHARGING)
+			printf("charging ");
+		printf("\n");
+		if (battio.battinfo.cap == -1)
+			printf("Remaining capacity:\tunknown\n");
+		else
+			printf("Remaining capacity:\t%d%%\n",
+			    battio.battinfo.cap);
+		if (battio.battinfo.min == -1)
+			printf("Remaining time:\t\tunknown\n");
+		else {
+			hours = battio.battinfo.min / 60;
+			min = battio.battinfo.min % 60;
+			printf("Remaining time:\t\t%d:%02d\n", hours, min);
+		}
+		if (battio.battinfo.rate == -1)
+			printf("Present rate:\t\tunknown\n");
+		else
+			printf("Present rate:\t\t%d %s\n",
+			    battio.battinfo.rate, pwr_units);
+	} else
+		printf("State:\t\t\tnot present\n");
+
+	/* Print battery voltage information. */
+	battio.unit = num;
+	if (ioctl(acpifd, ACPIIO_BATT_GET_BST, &battio) == -1)
+		err(EX_IOERR, "get battery status (%d) failed", num);
+	if (battio.bst.state != ACPI_BATT_STAT_NOT_PRESENT) {
+		if (battio.bst.volt == UNKNOWN_VOLTAGE)
+			printf("Voltage:\t\tunknown\n");
+		else
+			printf("Voltage:\t\t%d mV\n", battio.bst.volt);
+	}
+
+	return (0);
+}
+
+static void
+usage(const char* prog)
+{
+	printf("usage: %s [-h] [-i batt] [-k ack] [-s 1-4]\n", prog);
+	exit(0);
+}
+
+int
+main(int argc, char *argv[])
+{
+	char	c, *prog;
+	int	sleep_type;
+
+	prog = argv[0];
+	if (argc < 2)
+		usage(prog);
+		/* NOTREACHED */
+
+	sleep_type = -1;
+	acpi_init();
+	while ((c = getopt(argc, argv, "hi:k:s:")) != -1) {
+		switch (c) {
+		case 'i':
+			acpi_battinfo(atoi(optarg));
+			break;
+		case 'k':
+			acpi_sleep_ack(atoi(optarg));
+			break;
+		case 's':
+			if (optarg[0] == 'S')
+				sleep_type = optarg[1] - '0';
+			else
+				sleep_type = optarg[0] - '0';
+			if (sleep_type < 1 || sleep_type > 4)
+				errx(EX_USAGE, "invalid sleep type (%d)",
+				     sleep_type);
+			break;
+		case 'h':
+		default:
+			usage(prog);
+			/* NOTREACHED */
+		}
+	}
+	argc -= optind;
+	argv += optind;
+
+	if (sleep_type != -1)
+		acpi_sleep(sleep_type);
+
+	close(acpifd);
+	exit (0);
+}
diff -Nurd a/usr.sbin/acpi/acpiconf/Makefile b/usr.sbin/acpi/acpiconf/Makefile
--- a/usr.sbin/acpi/acpiconf/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ b/usr.sbin/acpi/acpiconf/Makefile	2004-11-13 02:54:22.000000000 +0100
@@ -0,0 +1,8 @@
+# $Id: Makefile,v 1.2 2000/07/14 18:16:25 iwasaki Exp $
+# $FreeBSD$
+
+PROG=	acpiconf
+MAN=	acpiconf.8
+WARNS?=	6
+
+.include <bsd.prog.mk>
