---
 usr.bin/kdump/Makefile |    5 +-
 usr.bin/kdump/kdump.c  |   46 +++++++++++----------
 usr.bin/kdump/mksubr   |  103 +++++++++++++++++++++++++++++++++----------------
 usr.bin/kdump/stat16.h |   55 ++++++++++++++++++++++++++
 4 files changed, 154 insertions(+), 55 deletions(-)

--- a/usr.bin/kdump/kdump.c
+++ b/usr.bin/kdump/kdump.c
@@ -55,6 +55,7 @@
 #include <sys/ioctl.h>
 #include <sys/socket.h>
 #include <sys/stat.h>
+#include "stat16.h"
 #include <sys/sysent.h>
 #include <sys/un.h>
 #include <sys/queue.h>
@@ -69,6 +70,8 @@
 #include <netinet/in.h>
 #include <ctype.h>
 #include <dlfcn.h>
+#define RTLD_MODEMASK   0x3
+#define RTLD_TRACE      0x200   /* Trace loaded objects and exit. */
 #include <err.h>
 #include <grp.h>
 #include <inttypes.h>
@@ -97,7 +100,7 @@
 void ktrcsw(struct ktr_csw *);
 void ktruser(int, unsigned char *);
 void ktrsockaddr(struct sockaddr *);
-void ktrstat(struct stat *);
+void ktrstat(struct stat16 *);
 void ktrstruct(char *, size_t);
 void usage(void);
 void sockfamilyname(int);
@@ -155,6 +158,9 @@
 
 TAILQ_HEAD(trace_procs, proc_info) trace_procs;
 
+timevaladd(struct timeval *t1, const struct timeval *t2);
+timevalsub(struct timeval *t1, const struct timeval *t2);
+
 int
 main(int argc, char *argv[])
 {
@@ -788,7 +794,7 @@
 				ip++;
 				narg--;
 				c = ',';
-			} else if (ktr->ktr_code == SYS___semctl) {
+			} else if (ktr->ktr_code == SYS_semctl) {
 				print_number(ip,narg,c);
 				print_number(ip,narg,c);
 				(void)putchar(',');
@@ -1379,7 +1385,7 @@
 }
 
 void
-ktrstat(struct stat *statp)
+ktrstat(struct stat16 *statp)
 {
 	char mode[12], timestr[PATH_MAX + 4];
 	struct passwd *pwd;
--- a/usr.bin/kdump/Makefile
+++ b/usr.bin/kdump/Makefile
@@ -10,6 +10,7 @@
 PROG=		kdump
 SRCS=		kdump.c ioctl.c kdump_subr.c subr.c
 CFLAGS+=	-I${.CURDIR}/../ktrace -I${.CURDIR} -I${.CURDIR}/../..
+LDADD+=		-lbsd
 
 .if ${MACHINE_ARCH} == "amd64" || ${MACHINE_ARCH} == "i386"
 SRCS+=		linux_syscalls.c
@@ -20,10 +21,10 @@
 CLEANFILES=	ioctl.c kdump_subr.c linux_syscalls.c
 
 ioctl.c: mkioctls
-	sh ${.CURDIR}/mkioctls ${DESTDIR}/usr/include > ${.TARGET}
+	sh ${.CURDIR}/mkioctls /usr/include /usr/include/*-kfreebsd-gnu > ${.TARGET}
 
 kdump_subr.c: mksubr
-	sh ${.CURDIR}/mksubr ${DESTDIR}/usr/include > ${.TARGET}
+	sh ${.CURDIR}/mksubr /usr/include /usr/include/*-kfreebsd-gnu > ${.TARGET}
 
 linux_syscalls.c:
 	/bin/sh ${.CURDIR}/../../sys/kern/makesyscalls.sh \
--- a/usr.bin/kdump/mksubr
+++ b/usr.bin/kdump/mksubr
@@ -50,7 +50,7 @@
 	echo "usage: sh $0 include-dir"
 	exit 1
 fi
-include_dir=$1
+include_dirs="$*"
 
 #
 # Automatically generates a C function that will print out the
@@ -74,13 +74,16 @@
 	int	or = 0;
 	printf("%#x<", arg);
 _EOF_
+	for include_dir in $include_dirs ; do if test -e $include_dir/$file ; then \
 	egrep "^#[[:space:]]*define[[:space:]]+"${grep}"[[:space:]]*" \
-		$include_dir/$file | \
+		$include_dir/$file ; fi ; done | \
 	awk '{ for (i = 1; i <= NF; i++) \
 		if ($i ~ /define/) \
 			break; \
 		++i; \
-		printf "\tif(!((arg>0)^((%s)>0)))\n\t\tif_print_or(arg, %s, or);\n", $i, $i }'
+		n = $i ; \
+		sub("__", "", n); \
+		printf "\tif(!((arg>0)^((%s)>0)))\n\t\tif_print_or(arg, %s, or);\n", $i, n }'
 cat <<_EOF_
 	printf(">");
 	if (or == 0)
@@ -107,8 +110,9 @@
 {
 	switch (arg) {
 _EOF_
+	for include_dir in $include_dirs ; do if test -e $include_dir/$file ; then \
 	egrep "^#[[:space:]]*define[[:space:]]+"${grep}"[[:space:]]*" \
-		$include_dir/$file | \
+		$include_dir/$file ; fi ; done | \
 	awk '{ for (i = 1; i <= NF; i++) \
 		if ($i ~ /define/) \
 			break; \
@@ -139,8 +143,9 @@
 $name (int arg)
 {
 _EOF_
+	for include_dir in $include_dirs ; do if test -e $include_dir/$file ; then \
 	egrep "^#[[:space:]]*define[[:space:]]+"${grep}"[[:space:]]*" \
-		$include_dir/$file | \
+		$include_dir/$file ; fi ; done | \
 	awk '{ printf "\t"; \
 		if (NR > 1) \
 			printf "else " ; \
@@ -160,6 +165,7 @@
 #include <sys/fcntl.h>
 #include <sys/stat.h>
 #include <sys/unistd.h>
+#include <sys/rfork.h>
 #include <sys/mman.h>
 #include <sys/wait.h>
 #define _KERNEL
@@ -173,21 +179,30 @@
 #include <sys/reboot.h>
 #include <sched.h>
 #include <sys/linker.h>
-#define _KERNEL
-#include <sys/thr.h>
-#undef _KERNEL
 #include <sys/extattr.h>
-#include <sys/acl.h>
 #include <aio.h>
 #include <sys/sem.h>
 #include <sys/ipc.h>
 #include <sys/rtprio.h>
 #include <sys/shm.h>
-#include <nfsserver/nfs.h>
 #include <ufs/ufs/quota.h>
 
 #include "kdump_subr.h"
 
+#ifndef S_IFWHT
+#define S_IFWHT __S_IFWHT
+#endif
+
+#ifndef PT_LWPINFO
+#define PT_LWPINFO      13      /* Info about the LWP that stopped. */
+#endif
+#ifndef PT_GETNUMLWPS
+#define PT_GETNUMLWPS   14      /* get total number of threads */
+#endif
+#ifndef PT_GETLWPLIST
+#define PT_GETLWPLIST   15      /* get thread list */
+#endif
+
 /*
  * These are simple support macros. print_or utilizes a variable
  * defined in the calling function to track whether or not it should
@@ -331,43 +346,43 @@
 
 _EOF_
 
-auto_or_type "modename" "S_[A-Z]+[[:space:]]+[0-6]{7}" "sys/stat.h"
-auto_or_type "flagsname" "O_[A-Z]+[[:space:]]+0x[0-9A-Fa-f]+" "sys/fcntl.h"
-auto_or_type "accessmodename" "[A-Z]_OK[[:space:]]+0?x?[0-9A-Fa-f]+" "sys/unistd.h"
-auto_or_type "mmapprotname" "PROT_[A-Z]+[[:space:]]+0x[0-9A-Fa-f]+" "sys/mman.h"
-auto_or_type "mmapflagsname" "MAP_[A-Z]+[[:space:]]+0x[0-9A-Fa-f]+" "sys/mman.h"
-auto_or_type "wait4optname" "W[A-Z]+[[:space:]]+[0-9]+" "sys/wait.h"
+auto_or_type "modename" "__S_[A-Z]+[[:space:]]+[0-6]{7}" "bits/stat.h"
+auto_or_type "flagsname" "O_[A-Z]+[[:space:]]+0x[0-9A-Fa-f]+" "bits/fcntl.h"
+auto_or_type "accessmodename" "[A-Z]_OK[[:space:]]+0?x?[0-9A-Fa-f]+" "fcntl.h"
+auto_or_type "mmapprotname" "PROT_[A-Z]+[[:space:]]+0x[0-9A-Fa-f]+" "bits/mman.h"
+auto_or_type "mmapflagsname" "MAP_[A-Z]+[[:space:]]+0x[0-9A-Fa-f]+" "bits/mman.h"
+auto_or_type "wait4optname" "W[A-Z]+[[:space:]]+[0-9]+" "bits/waitflags.h"
 auto_or_type "getfsstatflagsname" "MNT_[A-Z]+[[:space:]]+[1-9][0-9]*" "sys/mount.h"
 auto_or_type "mountflagsname" "MNT_[A-Z]+[[:space:]]+0x[0-9]+" "sys/mount.h"
 auto_or_type "rebootoptname" "RB_[A-Z]+[[:space:]]+0x[0-9]+" "sys/reboot.h"
-auto_or_type "flockname" "LOCK_[A-Z]+[[:space:]]+0x[0-9]+" "sys/fcntl.h"
+auto_or_type "flockname" "LOCK_[A-Z]+[[:space:]]+0x[0-9]+" "bits/fcntl.h"
 auto_or_type "thrcreateflagsname" "THR_[A-Z]+[[:space:]]+0x[0-9]+" "sys/thr.h"
-auto_or_type "mlockallname" "MCL_[A-Z]+[[:space:]]+0x[0-9]+" "sys/mman.h"
-auto_or_type "shmatname" "SHM_[A-Z]+[[:space:]]+[0-9]{6}+" "sys/shm.h"
-auto_or_type "rforkname" "RF[A-Z]+[[:space:]]+\([0-9]+<<[0-9]+\)" "sys/unistd.h"
+auto_or_type "mlockallname" "MCL_[A-Z]+[[:space:]]+0x[0-9]+" "bits/mman.h"
+auto_or_type "shmatname" "SHM_[A-Z]+[[:space:]]+[0-9]{6}+" "bits/shm.h"
+auto_or_type "rforkname" "RF[A-Z]+[[:space:]]+\([0-9]+<<[0-9]+\)" "sys/rfork.h"
 auto_or_type "nfssvcname" "NFSSVC_[A-Z]+[[:space:]]+0x[0-9]+" "nfsserver/nfs.h"
 
-auto_switch_type "whencename" "SEEK_[A-Z]+[[:space:]]+[0-9]+" "sys/unistd.h"
+auto_switch_type "whencename" "SEEK_[A-Z]+[[:space:]]+[0-9]+" "stdio.h"
 auto_switch_type "rlimitname" "RLIMIT_[A-Z]+[[:space:]]+[0-9]+" "sys/resource.h"
 auto_switch_type "shutdownhowname" "SHUT_[A-Z]+[[:space:]]+[0-9]+" "sys/socket.h"
-auto_switch_type "prioname" "PRIO_[A-Z]+[[:space:]]+[0-9]" "sys/resource.h"
-auto_switch_type "madvisebehavname" "_?MADV_[A-Z]+[[:space:]]+[0-9]+" "sys/mman.h"
-auto_switch_type "msyncflagsname" "MS_[A-Z]+[[:space:]]+0x[0-9]+" "sys/mman.h"
+auto_switch_type "prioname" "PRIO_[A-Z]+[[:space:]]+[0-9]" "bits/resource.h"
+auto_switch_type "madvisebehavname" "_?MADV_[A-Z]+[[:space:]]+[0-9]+" "bits/mman.h"
+auto_switch_type "msyncflagsname" "MS_[A-Z]+[[:space:]]+0x[0-9]+" "bits/mman.h"
 auto_switch_type "schedpolicyname" "SCHED_[A-Z]+[[:space:]]+[0-9]+" "sched.h"
 auto_switch_type "kldunloadfflagsname" "LINKER_UNLOAD_[A-Z]+[[:space:]]+[0-9]+" "sys/linker.h"
 auto_switch_type "extattrctlname" "EXTATTR_NAMESPACE_[A-Z]+[[:space:]]+0x[0-9]+" "sys/extattr.h"
 auto_switch_type "kldsymcmdname" "KLDSYM_[A-Z]+[[:space:]]+[0-9]+" "sys/linker.h"
 auto_switch_type "sendfileflagsname" "SF_[A-Z]+[[:space:]]+[0-9]+" "sys/socket.h"
 auto_switch_type "acltypename" "ACL_TYPE_[A-Z4_]+[[:space:]]+0x[0-9]+" "sys/acl.h"
-auto_switch_type "sigprocmaskhowname" "SIG_[A-Z]+[[:space:]]+[0-9]+" "sys/signal.h"
-auto_switch_type "lio_listioname" "LIO_(NO)?WAIT[[:space:]]+[0-9]+" "aio.h"
-auto_switch_type "minheritname" "INHERIT_[A-Z]+[[:space:]]+[0-9]+" "sys/mman.h"
+auto_switch_type "sigprocmaskhowname" "SIG_[A-Z]+[[:space:]]+[0-9]+" "bits/sigaction.h"
+auto_switch_type "lio_listioname" "LIO_(NO)?WAIT[[:space:]]+" "aio.h"
+auto_switch_type "minheritname" "INHERIT_[A-Z]+[[:space:]]+[0-9]+" "bits/mman.h"
 auto_switch_type "quotactlname" "Q_[A-Z]+[[:space:]]+0x[0-9]+" "ufs/ufs/quota.h"
-auto_if_type "sockdomainname" "PF_[[:alnum:]]+[[:space:]]+" "sys/socket.h"
-auto_if_type "sockfamilyname" "AF_[[:alnum:]]+[[:space:]]+" "sys/socket.h"
+auto_if_type "sockdomainname" "PF_[[:alnum:]]+[[:space:]]+" "bits/socket.h"
+auto_if_type "sockfamilyname" "AF_[[:alnum:]]+[[:space:]]+" "bits/socket.h"
 auto_if_type "sockipprotoname" "IPPROTO_[[:alnum:]]+[[:space:]]+" "netinet/in.h"
-auto_switch_type "sockoptname" "SO_[A-Z]+[[:space:]]+0x[0-9]+" "sys/socket.h"
-auto_switch_type "socktypename" "SOCK_[A-Z]+[[:space:]]+[1-9]+[0-9]*" "sys/socket.h"
+auto_switch_type "sockoptname" "SO_[A-Z]+[[:space:]]+0x[0-9]+" "bits/socket.h"
+auto_switch_type "socktypename" "SOCK_[A-Z]+[[:space:]]+[1-9]+[0-9]*" "bits/socket.h"
 auto_switch_type "ptraceopname" "PT_[[:alnum:]_]+[[:space:]]+[0-9]+" "sys/ptrace.h"
 
 cat <<_EOF_
@@ -381,8 +396,9 @@
 {
 	switch (cmd) {
 _EOF_
+	for include_dir in $include_dirs ; do if test -e $include_dir/$file ; then \
 egrep "^#[[:space:]]*define[[:space:]]+F_[A-Z]+[[:space:]]+[0-9]+[[:space:]]*" \
-	$include_dir/sys/fcntl.h | \
+	$include_dir/sys/fcntl.h ; fi ; done | \
 	awk 'BEGIN { o=0 } { for (i = 1; i <= NF; i++) \
 		if ($i ~ /define/) \
 			break; \
@@ -430,8 +446,9 @@
 {
 	switch (func) {
 _EOF_
-egrep "^#[[:space:]]*define[[:space:]]+RTP_[A-Z]+[[:space:]]+0x[0-9]+[[:space:]]*" \
-	$include_dir/sys/rtprio.h | grep -v RTP_PRIO | \
+	for include_dir in $include_dirs ; do if test -e $include_dir/$file ; then \
+egrep "^#[[:space:]]*define[[:space:]]+RTP_[A-Z]+[[:space:]]+[0-9]+[[:space:]]*" \
+	$include_dir/sys/rtprio.h ; fi ; done | grep -v RTP_PRIO | \
 	awk '{ for (i = 1; i <= NF; i++) \
 		if ($i ~ /define/) \
 			break; \
@@ -462,7 +479,8 @@
 
 	printf("%#x<", flags);
 _EOF_
-egrep "^#[[:space:]]*define[[:space:]]+MSG_[A-Z]+[[:space:]]+0x[0-9]+[[:space:]]*" $include_dir/sys/socket.h | \
+	for include_dir in $include_dirs ; do if test -e $include_dir/$file ; then \
+egrep "^#[[:space:]]*define[[:space:]]+MSG_[A-Z]*" $include_dir/bits/socket.h ; fi ; done | \
 	awk '{ for (i = 1; i <= NF; i++) \
 		if ($i ~ /define/) \
 			break; \
--- /dev/null
+++ b/usr.bin/kdump/stat16.h
@@ -0,0 +1,55 @@
+/* Copyright (C) 2002, 2006 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+/* This structure corresponds to the standard FreeBSD 'struct stat'
+   (i.e. _STAT_VER_stat), and is used by the stat() system call family. */
+
+struct stat16
+  {
+    __dev_t st_dev;		/* Device containing the file.  */
+    __ino_t st_ino;		/* File serial number.  */
+
+    __uint16_t st_mode;		/* File mode.  */
+    __uint16_t st_nlink;	/* Link count.  */
+
+    __uid_t st_uid;		/* User ID of the file's owner.  */
+    __gid_t st_gid;		/* Group ID of the file's group.  */
+
+    __dev_t st_rdev;		/* Device number, if device.  */
+
+    struct  timespec st_atim;  /* time of last access */
+    struct  timespec st_mtim;  /* time of last data modification */
+    struct  timespec st_ctim;  /* time of last file status change */
+
+    __off_t st_size;		/* Size of file, in bytes.  */
+
+    __blkcnt_t st_blocks;	/* Number of 512-byte blocks allocated.  */
+
+    __blksize_t st_blksize;	/* Optimal block size for I/O.  */
+
+    __uint32_t st_flags;	/* User defined flags.  */
+
+    __uint32_t st_gen;		/* Generation number.  */
+
+    __uint32_t __dummy1;
+
+    struct timespec st_birthtim; /* time of file creation */
+
+#define _BIRTH_PADSIZE     (2*(8 - sizeof (long)))
+    char __birth_padding[_BIRTH_PADSIZE];
+  };
--- a/usr.bin/kdump/mkioctls
+++ b/usr.bin/kdump/mkioctls
@@ -15,21 +15,23 @@
 	echo "usage: sh $0 [-s] include-dir"
 	exit 1
 fi
+include_dirs="$*"
 
 LC_ALL=C; export LC_ALL
 
 # Build a list of headers that have ioctls in them.
 # XXX should we use an ANSI cpp?
 ioctl_includes=`
-	cd $1
-	find -H -s * -name '*.h' |
+	for include_dir in $include_dirs ; do \
+	cd $include_dir
+	find -H -s * -name '*.h' ; done |
 		xargs egrep -l \
 '^#[ 	]*define[ 	]+[A-Za-z_][A-Za-z0-9_]*[ 	]+_IO[^a-z0-9_]' |
 		awk '{printf("#include <%s>\\\\n", $1)}'
 `
 
 awk -v x="$ioctl_includes" 'BEGIN {print x}' |
-	gcc -E -I$1 -dM -DCOMPAT_43TTY - |
+	gcc -E -dM -DCOMPAT_43TTY - |
 	awk -v ioctl_includes="$ioctl_includes" -v use_switch="$use_switch" '
 BEGIN {
 	print "/* XXX obnoxious prerequisites. */"
