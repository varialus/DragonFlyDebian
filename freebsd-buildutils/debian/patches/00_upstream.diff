---
 src/usr.bin/cksum/cksum.c     |    1 +
 src/usr.bin/cksum/extern.h    |    1 +
 src/usr.bin/make/main.c       |    2 ++
 src/usr.sbin/config/main.c    |    7 +++++++
 src/usr.sbin/mtree/compare.c  |   16 ++++++++++------
 src/usr.sbin/mtree/create.c   |   18 +++++++++++++++---
 src/usr.sbin/mtree/extern.h   |    3 +++
 src/usr.sbin/mtree/misc.c     |    2 ++
 src/usr.sbin/mtree/mtree.h    |   14 +++++++++++++-
 src/usr.sbin/mtree/spec.c     |   10 +++++++---
 src/usr.sbin/mtree/specspec.c |    4 +++-
 src/usr.sbin/mtree/verify.c   |    2 ++
 12 files changed, 66 insertions(+), 14 deletions(-)

--- a/src/usr.bin/cksum/cksum.c
+++ b/src/usr.bin/cksum/cksum.c
@@ -57,6 +57,7 @@ __FBSDID("$FreeBSD$");
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
+#include <stdint.h>	/* uintXX_t (glibc) */
 
 #include "extern.h"
 
--- a/src/usr.bin/cksum/extern.h
+++ b/src/usr.bin/cksum/extern.h
@@ -35,6 +35,7 @@
  */
 
 #include <sys/cdefs.h>
+#include <stdint.h>		/* uintXX_t (glibc) */
 
 __BEGIN_DECLS
 int	crc(int, uint32_t *, off_t *);
--- a/src/usr.bin/make/main.c
+++ b/src/usr.bin/make/main.c
@@ -914,6 +914,7 @@ main(int argc, char **argv)
 	}
 #endif
 
+#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
 	/*
 	 * Prior to 7.0, FreeBSD/pc98 kernel used to set the
 	 * utsname.machine to "i386", and MACHINE was defined as
@@ -933,6 +934,7 @@ main(int argc, char **argv)
 				machine = "pc98";
 		}
 	}
+#endif
 
 	/*
 	 * Get the name of this type of MACHINE from utsname
--- a/src/usr.sbin/config/main.c
+++ b/src/usr.sbin/config/main.c
@@ -56,6 +56,9 @@ static const char rcsid[] =
 #include <sysexits.h>
 #include <unistd.h>
 #include <dirent.h>
+#ifndef _DIRENT_HAVE_D_NAMLEN
+#include <string.h> /* strlen */
+#endif
 #include "y.tab.h"
 #include "config.h"
 #include "configvers.h"
@@ -618,7 +621,11 @@ cleanheaders(char *p)
 	if ((dirp = opendir(p)) == NULL)
 		err(EX_OSERR, "opendir %s", p);
 	while ((dp = readdir(dirp)) != NULL) {
+#ifdef _DIRENT_HAVE_D_NAMLEN
 		i = dp->d_namlen - 2;
+#else
+		i = strlen (dp->d_name) - 2;
+#endif
 		/* Skip non-headers */
 		if (dp->d_name[i] != '.' || dp->d_name[i + 1] != 'h')
 			continue;
--- a/src/usr.sbin/mtree/compare.c
+++ b/src/usr.sbin/mtree/compare.c
@@ -176,21 +176,22 @@ typeerr:		LABEL;
 		    (intmax_t)s->st_size, (intmax_t)p->fts_statp->st_size);
 		tab = "\t";
 	}
+#ifdef ST_MTIM
 	/*
 	 * XXX
 	 * Catches nano-second differences, but doesn't display them.
 	 */
 	if ((s->flags & F_TIME) &&
-	     ((s->st_mtimespec.tv_sec != p->fts_statp->st_mtimespec.tv_sec) ||
-	     (s->st_mtimespec.tv_nsec != p->fts_statp->st_mtimespec.tv_nsec))) {
+	     ((s->ST_MTIM.tv_sec != p->fts_statp->ST_MTIM.tv_sec) ||
+	     (s->ST_MTIM.tv_nsec != p->fts_statp->ST_MTIM.tv_nsec))) {
 		LABEL;
 		(void)printf("%smodification time expected %.24s ",
-		    tab, ctime(&s->st_mtimespec.tv_sec));
+		    tab, ctime(&s->ST_MTIM.tv_sec));
 		(void)printf("found %.24s",
-		    ctime(&p->fts_statp->st_mtimespec.tv_sec));
+		    ctime(&p->fts_statp->ST_MTIM.tv_sec));
 		if (uflag) {
-			tv[0].tv_sec = s->st_mtimespec.tv_sec;
-			tv[0].tv_usec = s->st_mtimespec.tv_nsec / 1000;
+			tv[0].tv_sec = s->ST_MTIM.tv_sec;
+			tv[0].tv_usec = s->ST_MTIM.tv_nsec / 1000;
 			tv[1] = tv[0];
 			if (utimes(p->fts_accpath, tv))
 				(void)printf(" not modified: %s\n",
@@ -201,6 +202,7 @@ typeerr:		LABEL;
 			(void)printf("\n");
 		tab = "\t";
 	}
+#endif		/* ST_MTIM */
 	if (s->flags & F_CKSUM) {
 		if ((fd = open(p->fts_accpath, O_RDONLY, 0)) < 0) {
 			LABEL;
@@ -223,6 +225,7 @@ typeerr:		LABEL;
 			}
 		}
 	}
+#if defined(__FreeBSD__)
 	if ((s->flags & F_FLAGS) && s->st_flags != p->fts_statp->st_flags) {
 		LABEL;
 		fflags = flags_to_string(s->st_flags);
@@ -243,6 +246,7 @@ typeerr:		LABEL;
 			(void)printf("\n");
 		tab = "\t";
 	}
+#endif
 #ifdef MD5
 	if (s->flags & F_MD5) {
 		char *new_digest, buf[33];
--- a/src/usr.sbin/mtree/create.c
+++ b/src/usr.sbin/mtree/create.c
@@ -73,7 +73,11 @@ static mode_t mode;
 static u_long flags = 0xffffffff;
 
 static int	dsort(const FTSENT * const *, const FTSENT * const *);
-static void	output(int, int *, const char *, ...) __printflike(3, 4);
+static void	output(int, int *, const char *, ...)
+#ifdef __FreeBSD__
+__printflike(3, 4)
+#endif
+;
 static int	statd(FTS *, FTSENT *, uid_t *, gid_t *, mode_t *, u_long *);
 static void	statf(int, FTSENT *);
 
@@ -211,10 +215,12 @@ statf(int indent, FTSENT *p)
 	if (keys & F_SIZE)
 		output(indent, &offset, "size=%jd",
 		    (intmax_t)p->fts_statp->st_size);
+#ifdef ST_MTIM
 	if (keys & F_TIME)
 		output(indent, &offset, "time=%ld.%09ld",
-		    (long)p->fts_statp->st_mtimespec.tv_sec,
-		    p->fts_statp->st_mtimespec.tv_nsec);
+		    (long)p->fts_statp->ST_MTIM.tv_sec,
+		    p->fts_statp->ST_MTIM.tv_nsec);
+#endif
 	if (keys & F_CKSUM && S_ISREG(p->fts_statp->st_mode)) {
 		if ((fd = open(p->fts_accpath, O_RDONLY, 0)) < 0 ||
 		    crc(fd, &val, &len))
@@ -265,11 +271,13 @@ statf(int indent, FTSENT *p)
 	if (keys & F_SLINK &&
 	    (p->fts_info == FTS_SL || p->fts_info == FTS_SLNONE))
 		output(indent, &offset, "link=%s", rlink(p->fts_accpath));
+#if defined(__FreeBSD__)
 	if (keys & F_FLAGS && p->fts_statp->st_flags != flags) {
 		fflags = flags_to_string(p->fts_statp->st_flags);
 		output(indent, &offset, "flags=%s", fflags);
 		free(fflags);
 	}
+#endif
 	(void)putchar('\n');
 }
 
@@ -328,6 +336,7 @@ statd(FTS *t, FTSENT *parent, uid_t *pui
 				maxuid = u[suid];
 			}
 
+#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
 			/*
 			 * XXX
 			 * note that the below will break when file flags
@@ -341,6 +350,7 @@ statd(FTS *t, FTSENT *parent, uid_t *pui
 				saveflags = sflags;
 				maxflags = f[FLAGS2IDX(sflags)];
 			}
+#endif			/* __FreeBSD__ */
 		}
 	}
 	/*
@@ -384,11 +394,13 @@ statd(FTS *t, FTSENT *parent, uid_t *pui
 			(void)printf(" mode=%#o", savemode);
 		if (keys & F_NLINK)
 			(void)printf(" nlink=1");
+#if defined(__FreeBSD__)
 		if (keys & F_FLAGS) {
 			fflags = flags_to_string(saveflags);
 			(void)printf(" flags=%s", fflags);
 			free(fflags);
 		}
+#endif
 		(void)printf("\n");
 		*puid = saveuid;
 		*pgid = savegid;
--- a/src/usr.sbin/mtree/extern.h
+++ b/src/usr.sbin/mtree/extern.h
@@ -29,6 +29,9 @@
  *	@(#)extern.h	8.1 (Berkeley) 6/6/93
  * $FreeBSD$
  */
+
+#include <stdint.h>
+
 extern uint32_t crc_total;
 
 #ifdef _FTS_H_
--- a/src/usr.sbin/mtree/misc.c
+++ b/src/usr.sbin/mtree/misc.c
@@ -107,6 +107,7 @@ keycompare(const void *a, const void *b)
 	return (strcmp(((const KEY *)a)->name, ((const KEY *)b)->name));
 }
 
+#if defined(__FreeBSD__)
 char *
 flags_to_string(u_long fflags)
 {
@@ -122,3 +123,4 @@ flags_to_string(u_long fflags)
 
 	return string;
 }
+#endif /* __FreeBSD__ */
--- a/src/usr.sbin/mtree/mtree.h
+++ b/src/usr.sbin/mtree/mtree.h
@@ -42,7 +42,16 @@ typedef struct _node {
 	struct _node	*parent, *child;	/* up, down */
 	struct _node	*prev, *next;		/* left, right */
 	off_t	st_size;			/* size */
-	struct timespec	st_mtimespec;		/* last modification time */
+#ifdef __GLIBC__
+# ifdef _STATBUF_ST_NSEC
+#  define ST_MTIM st_mtim
+# endif
+#else
+# define ST_MTIM st_mtimespec
+#endif
+#ifdef ST_MTIM
+	struct timespec	ST_MTIM;		/* last modification time */
+#endif
 	u_long	cksum;				/* check sum */
 	char	*md5digest;			/* MD5 digest */
 	char	*sha1digest;			/* SHA-1 digest */
@@ -51,6 +60,9 @@ typedef struct _node {
 	char	*slink;				/* symbolic link reference */
 	uid_t	st_uid;				/* uid */
 	gid_t	st_gid;				/* gid */
+#ifndef S_ISTXT
+#define S_ISTXT S_ISVTX
+#endif
 #define	MBITS	(S_ISUID|S_ISGID|S_ISTXT|S_IRWXU|S_IRWXG|S_IRWXO)
 	mode_t	st_mode;			/* mode */
 	u_long	st_flags;			/* flags */
--- a/src/usr.sbin/mtree/spec.c
+++ b/src/usr.sbin/mtree/spec.c
@@ -204,12 +204,14 @@ set(char *t, NODE *ip)
 			if(!ip->rmd160digest)
 				errx(1, "strdup");
 			break;
+#if defined(__FreeBSD__)
 		case F_FLAGS:
 			if (strcmp("none", val) == 0)
 				ip->st_flags = 0;
 			else if (strtofflags(&val, &ip->st_flags, NULL) != 0)
 				errx(1, "line %d: invalid flag %s",lineno, val);
  			break;
+#endif
 		case F_GID:
 			ip->st_gid = strtoul(val, &ep, 10);
 			if (*ep)
@@ -252,20 +254,22 @@ set(char *t, NODE *ip)
 			if (strunvis(ip->slink, val) == -1)
 				errx(1, "symlink %s is ill-encoded", val);
 			break;
+#ifdef ST_MTIM
 		case F_TIME:
-			ip->st_mtimespec.tv_sec = strtoul(val, &ep, 10);
+			ip->ST_MTIM.tv_sec = strtoul(val, &ep, 10);
 			if (*ep == '.') {
 				/* Note: we require exactly nine
 				 * digits after the decimal point. */
 				val = ep + 1;
-				ip->st_mtimespec.tv_nsec
+				ip->ST_MTIM.tv_nsec
 				    = strtoul(val, &ep, 10);
 			} else
-				ip->st_mtimespec.tv_nsec = 0;
+				ip->ST_MTIM.tv_nsec = 0;
 			if (*ep)
 				errx(1, "line %d: invalid time %s",
 				    lineno, val);
 			break;
+#endif
 		case F_TYPE:
 			switch(*val) {
 			case 'b':
--- a/src/usr.sbin/mtree/specspec.c
+++ b/src/usr.sbin/mtree/specspec.c
@@ -150,8 +150,10 @@ compare_nodes(NODE *n1, NODE *n2, char c
 		differs |= F_SIZE;
 	if (FS(n1, n2, F_SLINK, slink))
 		differs |= F_SLINK;
-	if (FM(n1, n2, F_TIME, st_mtimespec))
+#ifdef ST_MTIM
+	if (FM(n1, n2, F_TIME, ST_MTIM))
 		differs |= F_TIME;
+#endif
 	if (FF(n1, n2, F_UID, st_uid))
 		differs |= F_UID;
 	if (FF(n1, n2, F_UNAME, st_uid))
--- a/src/usr.sbin/mtree/verify.c
+++ b/src/usr.sbin/mtree/verify.c
@@ -251,9 +251,11 @@ miss(NODE *p, char *tail)
 		if (chmod(path, p->st_mode))
 			(void)printf("%s: permissions not set: %s\n",
 			    path, strerror(errno));
+#if defined(__FreeBSD__)
 		if ((p->flags & F_FLAGS) && p->st_flags &&
 		    chflags(path, p->st_flags))
 			(void)printf("%s: file flags not set: %s\n",
 			    path, strerror(errno));
+#endif
 	}
 }
