---
 cddl/compat/opensolaris/include/solaris.h                      |    3 +++
 cddl/compat/opensolaris/misc/fsshare.c                         |    5 +++--
 cddl/compat/opensolaris/misc/mnttab.c                          |    2 +-
 cddl/contrib/opensolaris/lib/libzfs/common/libzfs_dataset.c    |    4 ++--
 cddl/contrib/opensolaris/lib/libzpool/common/kernel.c          |    2 +-
 cddl/contrib/opensolaris/lib/libzpool/common/sys/zfs_context.h |    6 +++---
 sys/cddl/compat/opensolaris/sys/dirent.h                       |    3 +++
 sys/cddl/contrib/opensolaris/uts/common/fs/zfs/zfs_vnops.c     |    2 +-
 8 files changed, 17 insertions(+), 10 deletions(-)

--- a/cddl/compat/opensolaris/misc/fsshare.c
+++ b/cddl/compat/opensolaris/misc/fsshare.c
@@ -28,6 +28,7 @@
 __FBSDID("$FreeBSD$");
 
 #include <sys/param.h>
+#include <sys/file.h>
 
 #include <assert.h>
 #include <errno.h>
@@ -69,7 +70,7 @@
  * mountpoint specified in the 'skip' argument.
  */
 static char *
-getline(FILE *fd, const char *skip)
+xgetline(FILE *fd, const char *skip)
 {
 	static char line[MAXLINESIZE];
 	size_t len, skiplen;
@@ -200,7 +201,7 @@
 
 	/* Place big, fat warning at the begining of the file. */
 	fprintf(newfd, "%s", FILE_HEADER);
-	while (oldfd != NULL && (line = getline(oldfd, mountpoint)) != NULL)
+	while (oldfd != NULL && (line = xgetline(oldfd, mountpoint)) != NULL)
 		fprintf(newfd, "%s\n", line);
 	if (oldfd != NULL && ferror(oldfd) != 0) {
 		error = ferror(oldfd);
--- a/cddl/compat/opensolaris/misc/mnttab.c
+++ b/cddl/compat/opensolaris/misc/mnttab.c
@@ -66,7 +66,7 @@
 }
 
 char *
-hasmntopt(struct mnttab *mnt, char *opt)
+solaris_hasmntopt(struct mnttab *mnt, char *opt)
 {
 	char tmpopts[MNT_LINE_MAX];
 	char *f, *opts = tmpopts;
--- a/cddl/contrib/opensolaris/lib/libzfs/common/libzfs_dataset.c
+++ b/cddl/contrib/opensolaris/lib/libzfs/common/libzfs_dataset.c
@@ -1735,11 +1735,11 @@
 		if (received)
 			break;
 
-		if (hasmntopt(&mnt, mntopt_on) && !*val) {
+		if (solaris_hasmntopt(&mnt, mntopt_on) && !*val) {
 			*val = B_TRUE;
 			if (src)
 				*src = ZPROP_SRC_TEMPORARY;
-		} else if (hasmntopt(&mnt, mntopt_off) && *val) {
+		} else if (solaris_hasmntopt(&mnt, mntopt_off) && *val) {
 			*val = B_FALSE;
 			if (src)
 				*src = ZPROP_SRC_TEMPORARY;
--- a/cddl/contrib/opensolaris/lib/libzpool/common/kernel.c
+++ b/cddl/contrib/opensolaris/lib/libzpool/common/kernel.c
@@ -463,7 +463,7 @@
 /*ARGSUSED*/
 int
 vn_rdwr(int uio, vnode_t *vp, void *addr, ssize_t len, offset_t offset,
-	int x1, int x2, rlim64_t x3, void *x4, ssize_t *residp)
+	int x1, int x2, solaris_rlim64_t x3, void *x4, ssize_t *residp)
 {
 	ssize_t iolen, split;
 
--- a/cddl/contrib/opensolaris/lib/libzpool/common/sys/zfs_context.h
+++ b/cddl/contrib/opensolaris/lib/libzpool/common/sys/zfs_context.h
@@ -107,8 +107,8 @@
 
 #define	ZFS_LOG(...)	do {  } while (0)
 
-typedef u_longlong_t      rlim64_t;
-#define	RLIM64_INFINITY	((rlim64_t)-3)
+typedef u_longlong_t      solaris_rlim64_t;
+#define	RLIM64_INFINITY	((solaris_rlim64_t)-3)
 
 #ifdef ZFS_DEBUG
 extern void dprintf_setup(int *argc, char **argv);
@@ -496,7 +496,7 @@
 extern int vn_openat(char *path, int x1, int oflags, int mode, vnode_t **vpp,
     int x2, int x3, vnode_t *vp, int fd);
 extern int vn_rdwr(int uio, vnode_t *vp, void *addr, ssize_t len,
-    offset_t offset, int x1, int x2, rlim64_t x3, void *x4, ssize_t *residp);
+    offset_t offset, int x1, int x2, solaris_rlim64_t x3, void *x4, ssize_t *residp);
 extern void vn_close(vnode_t *vp, int openflag, cred_t *cr, kthread_t *td);
 
 #define	vn_remove(path, x1, x2)		remove(path)
--- a/sys/cddl/compat/opensolaris/sys/dirent.h
+++ b/sys/cddl/compat/opensolaris/sys/dirent.h
@@ -36,7 +36,10 @@
 typedef	struct dirent	dirent64_t;
 typedef ino_t		ino64_t;
 
+/* GNU libc has its own dirent64 declaration */
+#ifndef __GLIBC__
 #define	dirent64	dirent
+#endif
 
 #define	d_ino	d_fileno
 
--- a/sys/cddl/contrib/opensolaris/uts/common/fs/zfs/zfs_vnops.c
+++ b/sys/cddl/contrib/opensolaris/uts/common/fs/zfs/zfs_vnops.c
@@ -717,7 +717,7 @@
 zfs_write(vnode_t *vp, uio_t *uio, int ioflag, cred_t *cr, caller_context_t *ct)
 {
 	znode_t		*zp = VTOZ(vp);
-	rlim64_t	limit = MAXOFFSET_T;
+	solaris_rlim64_t	limit = MAXOFFSET_T;
 	ssize_t		start_resid = uio->uio_resid;
 	ssize_t		tx_bytes;
 	uint64_t	end_size;
