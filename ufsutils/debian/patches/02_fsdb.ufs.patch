#DPATCHLEVEL=1
Index: uf-a/fsdb.ufs/fsdb.8
===================================================================
--- uf-a.orig/fsdb.ufs/fsdb.8	2006-09-22 13:20:10.000000000 +0200
+++ uf-a/fsdb.ufs/fsdb.8	2007-01-18 10:41:04.000000000 +0100
@@ -263,7 +263,7 @@
 .Nm
 does not implement.
 .Sh WARNING
-Use this tool with extreme caution--you can damage an FFS file system
+Use this tool with extreme caution\-\-you can damage an FFS file system
 beyond what
 .Xr fsck 8
 can repair.
Index: uf-a/fsdb.ufs/fsdb.c
===================================================================
--- uf-a.orig/fsdb.ufs/fsdb.c	2006-09-22 13:20:10.000000000 +0200
+++ uf-a/fsdb.ufs/fsdb.c	2007-01-18 11:12:31.000000000 +0100
@@ -35,13 +35,13 @@
 
 #include <sys/param.h>
 #include <sys/time.h>
+#include <time.h>
 #include <ctype.h>
 #include <err.h>
 #include <grp.h>
 #include <histedit.h>
 #include <pwd.h>
 #include <string.h>
-#include <timeconv.h>
 
 #include <ufs/ufs/dinode.h>
 #include <ufs/ufs/dir.h>
@@ -60,6 +60,18 @@
 static int find_indirblks32(uint32_t blk, int ind_level, uint32_t *blknum);
 static int find_indirblks64(uint64_t blk, int ind_level, uint64_t *blknum);
 
+static inline int32_t
+_time_to_time32(time_t t)
+{
+    return((int32_t)t);
+}
+
+static inline int64_t
+_time_to_time64(time_t t)
+{
+    return((int64_t)t);
+}    
+
 static void 
 usage(void)
 {
@@ -211,7 +223,7 @@
 prompt(EditLine *el)
 {
     static char pstring[64];
-    snprintf(pstring, sizeof(pstring), "fsdb (inum: %d)> ", curinum);
+    snprintf(pstring, sizeof(pstring), "fsdb (inum: %ld)> ", curinum);
     return pstring;
 }
 
@@ -298,7 +310,7 @@
 
 #define GETINUM(ac,inum)    inum = strtoul(argv[ac], &cp, 0); \
     if (inum < ROOTINO || inum > maxino || cp == argv[ac] || *cp != '\0' ) { \
-	printf("inode %d out of range; range is [%d,%d]\n", \
+	printf("inode %ld out of range; range is [%ld,%ld]\n", \
 	       inum, ROOTINO, maxino); \
 	return 1; \
     }
@@ -750,7 +762,7 @@
 	return 1;
     rval = makeentry(curinum, inum, argv[2]);
     if (rval)
-	printf("Ino %d entered as `%s'\n", inum, argv[2]);
+	printf("Ino %ld entered as `%s'\n", inum, argv[2]);
     else
 	printf("could not enter name? weird.\n");
     curinode = ginode(curinum);
Index: uf-a/fsdb.ufs/fsdbutil.c
===================================================================
--- uf-a.orig/fsdb.ufs/fsdbutil.c	2006-09-22 13:20:10.000000000 +0200
+++ uf-a/fsdb.ufs/fsdbutil.c	2007-01-18 11:12:19.000000000 +0100
@@ -41,7 +41,6 @@
 #include <stdint.h>
 #include <string.h>
 #include <time.h>
-#include <timeconv.h>
 
 #include <ufs/ufs/dinode.h>
 #include <ufs/ffs/fs.h>
@@ -51,6 +50,12 @@
 #include "fsdb.h"
 #include "fsck.h"
 
+static inline time_t
+_time64_to_time(int64_t t64)
+{
+    return((time_t)t64);
+}
+    
 static int charsperline(void);
 static int printindir(ufs2_daddr_t blk, int level, char *bufp);
 static void printblocks(ino_t inum, union dinode *dp);
@@ -163,23 +168,23 @@
 	   dp->dp2.di_birthnsec);
     }
     if (sblock.fs_magic == FS_UFS1_MAGIC)
-	t = _time32_to_time(dp->dp1.di_mtime);
+	t = (time_t)dp->dp1.di_mtime;
     else
-	t = _time64_to_time(dp->dp2.di_mtime);
+	t = (time_t)dp->dp2.di_mtime;
     p = ctime(&t);
     printf("\n\tMTIME=%15.15s %4.4s [%d nsec]", &p[4], &p[20],
 	   DIP(dp, di_mtimensec));
     if (sblock.fs_magic == FS_UFS1_MAGIC)
-	t = _time32_to_time(dp->dp1.di_ctime);
+	t = (time_t)dp->dp1.di_ctime;
     else
-	t = _time64_to_time(dp->dp2.di_ctime);
+	t = (time_t)dp->dp2.di_ctime;
     p = ctime(&t);
     printf("\n\tCTIME=%15.15s %4.4s [%d nsec]", &p[4], &p[20],
 	   DIP(dp, di_ctimensec));
     if (sblock.fs_magic == FS_UFS1_MAGIC)
-	t = _time32_to_time(dp->dp1.di_atime);
+	t = (time_t)dp->dp1.di_atime;
     else
-	t = _time64_to_time(dp->dp2.di_atime);
+	t = (time_t)dp->dp2.di_atime;
     p = ctime(&t);
     printf("\n\tATIME=%15.15s %4.4s [%d nsec]\n", &p[4], &p[20],
 	   DIP(dp, di_atimensec));
@@ -291,7 +296,7 @@
     long ndb, offset;
     ufs2_daddr_t blkno;
 
-    printf("Blocks for inode %d:\n", inum);
+    printf("Blocks for inode %ld:\n", inum);
     printf("Direct blocks:\n");
     ndb = howmany(DIP(dp, di_size), sblock.fs_bsize);
     for (i = 0; i < NDADDR; i++) {
@@ -341,7 +346,7 @@
 	return 0;
     }
     if ((DIP(curinode, di_mode) & IFMT) != IFDIR) {
-	warnx("inode %d not a directory", curinum);
+	warnx("inode %ld not a directory", curinum);
 	return 0;
     }
     return 1;
@@ -366,10 +371,10 @@
 	    printstat("current inode", curinum, curinode);
 	break;
     case 0:
-	printf("current inode %d: unallocated inode\n", curinum);
+	printf("current inode %ld: unallocated inode\n", curinum);
 	break;
     default:
-	printf("current inode %d: screwy itype 0%o (mode 0%o)?\n",
+	printf("current inode %ld: screwy itype 0%o (mode 0%o)?\n",
 	       curinum, DIP(curinode, di_mode) & IFMT, DIP(curinode, di_mode));
 	break;
     }
Index: uf-a/fsdb.ufs/Makefile
===================================================================
--- uf-a.orig/fsdb.ufs/Makefile	2004-10-09 17:56:34.000000000 +0200
+++ uf-a/fsdb.ufs/Makefile	2007-01-18 10:46:15.000000000 +0100
@@ -2,15 +2,13 @@
 #	@(#)Makefile	8.1 (Berkeley) 6/5/93
 # $FreeBSD: src/sbin/fsdb/Makefile,v 1.19 2004/10/09 15:56:34 le Exp $
 
-PROG=	fsdb
-MAN=	fsdb.8
-SRCS=	fsdb.c fsdbutil.c \
-	dir.c ea.c fsutil.c inode.c pass1.c pass1b.c pass2.c pass3.c pass4.c \
-	pass5.c setup.c utilities.c ffs_subr.c ffs_tables.c
-CFLAGS+= -I${.CURDIR}/../fsck_ffs
-WARNS?= 2
-LDADD=	-ledit -ltermcap
-DPADD=	${LIBEDIT} ${LIBTERMCAP}
-.PATH:	${.CURDIR}/../fsck_ffs ${.CURDIR}/../../sys/ufs/ffs
+PROG = fsdb.ufs
+MAN = fsdb.8:fsdb.ufs.8
+SRCS = fsdb.c fsdbutil.c
+WARNS = 0
+LDADD += -ledit -ltermcap -L../libufs -lufs -L../fsck.ufs -lfsck.ufs
+DPADD += ${LIBEDIT} ${LIBTERMCAP}
+INCLUDES = -I../fsck.ufs
 
-.include <bsd.prog.mk>
+include ../Makefile.common
+ 
\ No newline at end of file
