#DPATCHLEVEL=1
Index: ufsutils/include/port/port.h
===================================================================
--- /dev/null
+++ ufsutils/include/port/port.h
@@ -0,0 +1,30 @@
+#ifndef LIBPORT_H
+#define LIBPORT_H
+
+#define setproctitle(fmt, args...)
+
+#define __dead2
+#define __printflike(x,y)
+#define __FBSDID(x)
+
+#ifdef __FreeBSD_kernel__
+
+#  include <sys/param.h>
+#  include <sys/disk.h>
+#  include <sys/ioctl.h>
+
+#  define SF_SNAPSHOT   0x00200000
+
+/* all features are available */
+
+#  define HAVE_BSD_DISKLABEL 1
+#  define HAVE_BSD_ERRNO 1
+#  define HAVE_BSD_MOUNT 1
+#  define HAVE_BSD_SIGNALS 1
+#  define HAVE_BSD_STATFS 1
+#  define HAVE_BSD_SYSCTL 1
+#  define HAVE_UFS_SNAPSHOT 1
+
+#endif
+
+#endif
Index: ufsutils/include/port/random.h
===================================================================
--- /dev/null
+++ ufsutils/include/port/random.h
@@ -0,0 +1,11 @@
+#ifndef LIBPORT_RANDOM_H
+#define LIBPORT_RANDOM_H
+
+#include <sys/types.h>
+
+void arc4random_stir();
+void arc4random_addrandom(u_char *dat, int datlen);
+u_int32_t arc4random();
+
+#endif
+
Index: ufsutils/include/port/string.h
===================================================================
--- /dev/null
+++ ufsutils/include/port/string.h
@@ -0,0 +1,10 @@
+#ifndef LIBPORT_STRING_H
+#define LIBPORT_STRING_H
+
+#include <string.h>
+
+size_t strlcat(char *dst, const char *src, size_t siz);
+size_t strlcpy(char *dst, const char *src, size_t siz);
+
+#endif
+
Index: ufsutils/libport/arc4random.c
===================================================================
--- ufsutils.orig/libport/arc4random.c
+++ ufsutils/libport/arc4random.c
@@ -26,16 +26,11 @@
 #include <sys/cdefs.h>
 __FBSDID("$FreeBSD: src/lib/libc/gen/arc4random.c,v 1.12 2007/05/25 10:40:33 delphij Exp $");
 
-#include "namespace.h"
 #include <sys/types.h>
 #include <sys/time.h>
 #include <stdlib.h>
 #include <fcntl.h>
 #include <unistd.h>
-#include <pthread.h>
-
-#include "libc_private.h"
-#include "un-namespace.h"
 
 struct arc4_stream {
 	u_int8_t i;
@@ -43,20 +38,9 @@
 	u_int8_t s[256];
 };
 
-static pthread_mutex_t	arc4random_mtx = PTHREAD_MUTEX_INITIALIZER;
-
 #define	RANDOMDEV	"/dev/urandom"
-#define	THREAD_LOCK()						\
-	do {							\
-		if (__isthreaded)				\
-			_pthread_mutex_lock(&arc4random_mtx);	\
-	} while (0)
-
-#define	THREAD_UNLOCK()						\
-	do {							\
-		if (__isthreaded)				\
-			_pthread_mutex_unlock(&arc4random_mtx);	\
-	} while (0)
+#define	THREAD_LOCK()
+#define	THREAD_UNLOCK()
 
 static struct arc4_stream rs;
 static int rs_initialized;
@@ -105,10 +89,10 @@
 
 	gettimeofday(&rdat.tv, NULL);
 	rdat.pid = getpid();
-	fd = _open(RANDOMDEV, O_RDONLY, 0);
+	fd = open(RANDOMDEV, O_RDONLY, 0);
 	if (fd >= 0) {
-		(void) _read(fd, rdat.rnd, sizeof(rdat.rnd));
-		_close(fd);
+		(void) read(fd, rdat.rnd, sizeof(rdat.rnd));
+		close(fd);
 	} 
 	/* fd < 0?  Ah, what the heck. We'll just take whatever was on the
 	 * stack... */
Index: ufsutils/libport/blockdev.c
===================================================================
--- /dev/null
+++ ufsutils/libport/blockdev.c
@@ -0,0 +1,92 @@
+/*
+ * Copyright (C) 2004 Guillem Jover <guillem@debian.org>
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
+ * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
+ * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
+ * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+ * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+ * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <sys/types.h>
+#include <sys/ioctl.h>
+#if defined(__NetBSD__) || defined(__OpenBSD__) || defined(__FreeBSD_kernel__)
+#include <sys/param.h>
+#if defined(__FreeBSD_kernel__) && __FreeBSD_kernel_version >= 500000
+#include <sys/disk.h>
+#endif
+#include <sys/disklabel.h>
+#ifndef DIOCGMEDIASIZE
+#define DIOCGMEDIASIZE _IOR('d', 129, off_t)
+#endif
+#elif defined(__linux__)
+#ifndef BLKGETSIZE
+#define BLKGETSIZE _IO(0x12,96)
+#endif
+#endif
+#include <sys/stat.h>
+#include <unistd.h>
+#include <port/blockdev.h>
+
+static const int sector_size = 512;
+
+int64_t
+get_block_device_size(int fd)
+{
+	int64_t size = 0;
+	struct stat64 st;
+
+#if defined(__FreeBSD_kernel__) || defined(__OpenBSD__) || defined(__NetBSD__)
+	{
+		struct disklabel disklabel;
+		off_t device_size;
+
+		if (!ioctl(fd, DIOCGMEDIASIZE, &device_size))
+			return device_size;
+
+		if (!ioctl(fd, DIOCGDINFO, &disklabel)) {
+			size = ((int64_t)disklabel.d_secperunit) * sector_size;
+			return size;
+		}
+	}
+#elif defined(__linux__)
+	{
+		long int device_sectors;
+
+		if (!ioctl(fd, BLKGETSIZE, &device_sectors)) {
+			size = ((int64_t)device_sectors) * sector_size;
+			return size;
+		}
+	}
+#else
+	/* XXX: Implement a generic seek binary test for targets currently
+	 *      not supported.
+	 */
+#error "Do not know how to get block device size"
+#endif
+
+	/* Regular files or devices under the Hurd.  */
+	if (fstat64(fd, &st) == 0) {
+		return st.st_size;
+	}
+
+	return size;
+}
Index: ufsutils/include/port/blockdev.h
===================================================================
--- /dev/null
+++ ufsutils/include/port/blockdev.h
@@ -0,0 +1,9 @@
+#ifndef LIBPORT_BLOCKDEV_H
+#define LIBPORT_BLOCKDEV_H
+
+#include <sys/types.h>
+
+int64_t get_block_device_size(int fd);
+
+#endif
+
Index: ufsutils/libport/Makefile
===================================================================
--- /dev/null
+++ ufsutils/libport/Makefile
@@ -0,0 +1,13 @@
+LIB = port
+LIB_type = static
+LIBSRCS = arc4random.c strlcpy.c strlcat.c blockdev.c
+
+ALL_CFLAGS = -D_LIBPORT
+ifdef LIBPORT_DEBUG
+ALL_CFLAGS += -D_LIBPORT_DEBUGGING
+endif
+
+INCLUDES =
+
+include ../Makefile.common
+
