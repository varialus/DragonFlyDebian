#DPATCHLEVEL=1
diff -Naur ufsutils.orig/include/port/port.h ufsutils.new/include/port/port.h
--- ufsutils.orig/include/port/port.h	1970-01-01 01:00:00.000000000 +0100
+++ ufsutils.new/include/port/port.h	2004-05-16 21:34:09.000000000 +0200
@@ -0,0 +1,11 @@
+#ifndef LIBPORT_H
+#define LIBPORT_H
+
+#define setproctitle(fmt, args...)
+
+#define __dead2
+#define __printflike(x,y)
+#define __FBSDID(x)
+
+#endif
+
diff -Naur ufsutils.orig/include/port/random.h ufsutils.new/include/port/random.h
--- ufsutils.orig/include/port/random.h	1970-01-01 01:00:00.000000000 +0100
+++ ufsutils.new/include/port/random.h	2004-05-16 21:41:03.000000000 +0200
@@ -0,0 +1,11 @@
+#ifndef LIBPORT_RANDOM_H
+#define LIBPORT_RANDOM_H
+
+#include <sys/types.h>
+
+void arc4random_stir();
+void arc4random_addrandom(u_char *dat, int datlen);
+u_int32_t arc4random();
+
+#endif
+
diff -Naur ufsutils.orig/include/port/string.h ufsutils.new/include/port/string.h
--- ufsutils.orig/include/port/string.h	1970-01-01 01:00:00.000000000 +0100
+++ ufsutils.new/include/port/string.h	2004-05-16 21:29:54.000000000 +0200
@@ -0,0 +1,10 @@
+#ifndef LIBPORT_STRING_H
+#define LIBPORT_STRING_H
+
+#include <string.h>
+
+size_t strlcat(char *dst, const char *src, size_t siz);
+size_t strlcpy(char *dst, const char *src, size_t siz);
+
+#endif
+
diff -Naur ufsutils.orig/include/sys/disklabel.h ufsutils.new/include/sys/disklabel.h
--- ufsutils.orig/include/sys/disklabel.h	2004-04-30 05:41:43.000000000 +0200
+++ ufsutils.new/include/sys/disklabel.h	2004-05-21 05:12:28.000000000 +0200
@@ -33,10 +33,11 @@
 #ifndef _SYS_DISKLABEL_H_
 #define	_SYS_DISKLABEL_H_
 
+#include <stddef.h>
 #ifndef _KERNEL
 #include <sys/types.h>
 #endif
-#include <sys/ioccom.h>
+//#include <sys/ioccom.h>
 
 /*
  * Disk description table, see disktab(5)
diff -Naur ufsutils.orig/include/sys/mount.h ufsutils.new/include/sys/mount.h
--- ufsutils.orig/include/sys/mount.h	2004-06-19 06:07:57.000000000 +0200
+++ ufsutils.new/include/sys/mount.h	2004-06-28 23:40:16.000000000 +0200
@@ -34,14 +34,10 @@
 #define _SYS_MOUNT_H_
 
 #include <sys/ucred.h>
-#include <sys/queue.h>
-#ifdef _KERNEL
-#include <sys/lockmgr.h>
-#include <sys/_lock.h>
-#include <sys/_mutex.h>
-#endif
+#include <stdint.h>
+#include <sys/types.h>
+#include <sys/socket.h>
 
-typedef struct fsid { int32_t val[2]; } fsid_t;	/* filesystem id type */
 
 /*
  * File identifier.
@@ -60,116 +56,6 @@
  */
 #define	MFSNAMELEN	16		/* length of type name including null */
 #define	MNAMELEN	88		/* size of on/from name bufs */
-#define	STATFS_VERSION	0x20030518	/* current version number */
-struct statfs {
-	uint32_t f_version;		/* structure version number */
-	uint32_t f_type;		/* type of filesystem */
-	uint64_t f_flags;		/* copy of mount exported flags */
-	uint64_t f_bsize;		/* filesystem fragment size */
-	uint64_t f_iosize;		/* optimal transfer block size */
-	uint64_t f_blocks;		/* total data blocks in filesystem */
-	uint64_t f_bfree;		/* free blocks in filesystem */
-	int64_t	 f_bavail;		/* free blocks avail to non-superuser */
-	uint64_t f_files;		/* total file nodes in filesystem */
-	int64_t	 f_ffree;		/* free nodes avail to non-superuser */
-	uint64_t f_syncwrites;		/* count of sync writes since mount */
-	uint64_t f_asyncwrites;		/* count of async writes since mount */
-	uint64_t f_syncreads;		/* count of sync reads since mount */
-	uint64_t f_asyncreads;		/* count of async reads since mount */
-	uint64_t f_spare[10];		/* unused spare */
-	uint32_t f_namemax;		/* maximum filename length */
-	uid_t	  f_owner;		/* user that mounted the filesystem */
-	fsid_t	  f_fsid;		/* filesystem id */
-	char	  f_charspare[80];	    /* spare string space */
-	char	  f_fstypename[MFSNAMELEN]; /* filesystem type name */
-	char	  f_mntfromname[MNAMELEN];  /* mounted filesystem */
-	char	  f_mntonname[MNAMELEN];    /* directory on which mounted */
-};
-
-#ifdef _KERNEL
-#define	OMFSNAMELEN	16	/* length of fs type name, including null */
-#define	OMNAMELEN	(88 - 2 * sizeof(long))	/* size of on/from name bufs */
-
-/* XXX getfsstat.2 is out of date with write and read counter changes here. */
-/* XXX statfs.2 is out of date with read counter changes here. */
-struct ostatfs {
-	long	f_spare2;		/* placeholder */
-	long	f_bsize;		/* fundamental filesystem block size */
-	long	f_iosize;		/* optimal transfer block size */
-	long	f_blocks;		/* total data blocks in filesystem */
-	long	f_bfree;		/* free blocks in fs */
-	long	f_bavail;		/* free blocks avail to non-superuser */
-	long	f_files;		/* total file nodes in filesystem */
-	long	f_ffree;		/* free file nodes in fs */
-	fsid_t	f_fsid;			/* filesystem id */
-	uid_t	f_owner;		/* user that mounted the filesystem */
-	int	f_type;			/* type of filesystem */
-	int	f_flags;		/* copy of mount exported flags */
-	long	f_syncwrites;		/* count of sync writes since mount */
-	long	f_asyncwrites;		/* count of async writes since mount */
-	char	f_fstypename[OMFSNAMELEN]; /* fs type name */
-	char	f_mntonname[OMNAMELEN];	/* directory on which mounted */
-	long	f_syncreads;		/* count of sync reads since mount */
-	long	f_asyncreads;		/* count of async reads since mount */
-	short	f_spares1;		/* unused spare */
-	char	f_mntfromname[OMNAMELEN];/* mounted filesystem */
-	short	f_spares2;		/* unused spare */
-	/*
-	 * XXX on machines where longs are aligned to 8-byte boundaries, there
-	 * is an unnamed int32_t here.  This spare was after the apparent end
-	 * of the struct until we bit off the read counters from f_mntonname.
-	 */
-	long	f_spare[2];		/* unused spare */
-};
-
-#define	MMAXOPTIONLEN	65536		/* maximum length of a mount option */
-
-TAILQ_HEAD(vnodelst, vnode);
-TAILQ_HEAD(vfsoptlist, vfsopt);
-struct vfsopt {
-	TAILQ_ENTRY(vfsopt) link;
-	char	*name;
-	void	*value;
-	int	len;
-};
-
-/*
- * Structure per mounted filesystem.  Each mounted filesystem has an
- * array of operations and an instance record.  The filesystems are
- * put on a doubly linked list.
- *
- */
-struct mount {
-	TAILQ_ENTRY(mount) mnt_list;		/* mount list */
-	struct vfsops	*mnt_op;		/* operations on fs */
-	struct vfsconf	*mnt_vfc;		/* configuration info */
-	struct vnode	*mnt_vnodecovered;	/* vnode we mounted on */
-	struct vnode	*mnt_syncer;		/* syncer vnode */
-	struct vnodelst	mnt_nvnodelist;		/* list of vnodes this mount */
-	struct lock	mnt_lock;		/* mount structure lock */
-	struct mtx	mnt_mtx;		/* mount structure interlock */
-	int		mnt_writeopcount;	/* write syscalls in progress */
-	int		mnt_flag;		/* flags shared with user */
-	struct vfsoptlist *mnt_opt;		/* current mount options */
-	struct vfsoptlist *mnt_optnew;		/* new options passed to fs */
-	int		mnt_kern_flag;		/* kernel only flags */
-	int		mnt_maxsymlinklen;	/* max size of short symlink */
-	struct statfs	mnt_stat;		/* cache of filesystem stats */
-	struct ucred	*mnt_cred;		/* credentials of mounter */
-	qaddr_t		mnt_data;		/* private data */
-	time_t		mnt_time;		/* last time written*/
-	int		mnt_iosize_max;		/* max size for clusters, etc */
-	struct netexport *mnt_export;		/* export list */
-	struct label	*mnt_mntlabel;		/* MAC label for the mount */
-	struct label	*mnt_fslabel;		/* MAC label for the fs */
-	int		mnt_nvnodelistsize;	/* # of vnodes on this mount */
-};
-
-
-#define	MNT_ILOCK(mp)	mtx_lock(&(mp)->mnt_mtx)
-#define	MNT_IUNLOCK(mp)	mtx_unlock(&(mp)->mnt_mtx)
-
-#endif /* _KERNEL */
 
 /*
  * User specifiable flags.
@@ -374,190 +260,4 @@
 #define	VFCF_LOOPBACK	0x00100000	/* aliases some other mounted FS */
 #define	VFCF_UNICODE	0x00200000	/* stores file names as Unicode*/
 
-struct iovec;
-struct uio;
-
-#ifdef _KERNEL
-
-#ifdef MALLOC_DECLARE
-MALLOC_DECLARE(M_MOUNT);
-#endif
-extern int maxvfsconf;		/* highest defined filesystem type */
-extern int nfs_mount_type;	/* vfc_typenum for nfs, or -1 */
-extern struct vfsconf *vfsconf;	/* head of list of filesystem types */
-
-/*
- * Operations supported on mounted filesystem.
- */
-struct mount_args;
-struct nameidata;
-
-typedef int vfs_mount_t(struct mount *mp, char *path, caddr_t data,
-			struct nameidata *ndp, struct thread *td);
-typedef int vfs_start_t(struct mount *mp, int flags, struct thread *td);
-typedef int vfs_unmount_t(struct mount *mp, int mntflags, struct thread *td);
-typedef int vfs_root_t(struct mount *mp, struct vnode **vpp);
-typedef	int vfs_quotactl_t(struct mount *mp, int cmds, uid_t uid,
-		    caddr_t arg, struct thread *td);
-typedef	int vfs_statfs_t(struct mount *mp, struct statfs *sbp,
-		    struct thread *td);
-typedef	int vfs_sync_t(struct mount *mp, int waitfor, struct ucred *cred,
-		    struct thread *td);
-typedef	int vfs_vget_t(struct mount *mp, ino_t ino, int flags,
-		    struct vnode **vpp);
-typedef	int vfs_fhtovp_t(struct mount *mp, struct fid *fhp, struct vnode **vpp);
-typedef	int vfs_checkexp_t(struct mount *mp, struct sockaddr *nam,
-		    int *extflagsp, struct ucred **credanonp);
-typedef	int vfs_vptofh_t(struct vnode *vp, struct fid *fhp);
-typedef	int vfs_init_t(struct vfsconf *);
-typedef	int vfs_uninit_t(struct vfsconf *);
-typedef	int vfs_extattrctl_t(struct mount *mp, int cmd,
-		    struct vnode *filename_vp, int attrnamespace,
-		    const char *attrname, struct thread *td);
-typedef	int vfs_nmount_t(struct mount *mp, struct nameidata *ndp,
-		    struct thread *td);
-
-struct vfsops {
-	vfs_mount_t		*vfs_mount;
-	vfs_start_t		*vfs_start;
-	vfs_unmount_t		*vfs_unmount;
-	vfs_root_t		*vfs_root;
-	vfs_quotactl_t		*vfs_quotactl;
-	vfs_statfs_t		*vfs_statfs;
-	vfs_sync_t		*vfs_sync;
-	vfs_vget_t		*vfs_vget;
-	vfs_fhtovp_t		*vfs_fhtovp;
-	vfs_checkexp_t		*vfs_checkexp;
-	vfs_vptofh_t		*vfs_vptofh;
-	vfs_init_t		*vfs_init;
-	vfs_uninit_t		*vfs_uninit;
-	vfs_extattrctl_t	*vfs_extattrctl;
-	/* Additions below are not binary compatible with 5.0 and below. */
-	vfs_nmount_t		*vfs_nmount;
-};
-
-#define VFS_NMOUNT(MP, NDP, P)    (*(MP)->mnt_op->vfs_nmount)(MP, NDP, P)
-#define VFS_MOUNT(MP, PATH, DATA, NDP, P) \
-	(*(MP)->mnt_op->vfs_mount)(MP, PATH, DATA, NDP, P)
-#define VFS_START(MP, FLAGS, P)	  (*(MP)->mnt_op->vfs_start)(MP, FLAGS, P)
-#define VFS_UNMOUNT(MP, FORCE, P) (*(MP)->mnt_op->vfs_unmount)(MP, FORCE, P)
-#define VFS_ROOT(MP, VPP)	  (*(MP)->mnt_op->vfs_root)(MP, VPP)
-#define VFS_QUOTACTL(MP,C,U,A,P)  (*(MP)->mnt_op->vfs_quotactl)(MP, C, U, A, P)
-#define VFS_STATFS(MP, SBP, P)	  (*(MP)->mnt_op->vfs_statfs)(MP, SBP, P)
-#define VFS_SYNC(MP, WAIT, C, P)  (*(MP)->mnt_op->vfs_sync)(MP, WAIT, C, P)
-#define VFS_VGET(MP, INO, FLAGS, VPP) \
-	(*(MP)->mnt_op->vfs_vget)(MP, INO, FLAGS, VPP)
-#define VFS_FHTOVP(MP, FIDP, VPP) \
-	(*(MP)->mnt_op->vfs_fhtovp)(MP, FIDP, VPP)
-#define	VFS_VPTOFH(VP, FIDP)	  (*(VP)->v_mount->mnt_op->vfs_vptofh)(VP, FIDP)
-#define VFS_CHECKEXP(MP, NAM, EXFLG, CRED) \
-	(*(MP)->mnt_op->vfs_checkexp)(MP, NAM, EXFLG, CRED)
-#define VFS_EXTATTRCTL(MP, C, FN, NS, N, P) \
-	(*(MP)->mnt_op->vfs_extattrctl)(MP, C, FN, NS, N, P)
-
-#include <sys/module.h>
-
-#define VFS_SET(vfsops, fsname, flags) \
-	static struct vfsconf fsname ## _vfsconf = {		\
-		&vfsops,					\
-		#fsname,					\
-		-1,						\
-		0,						\
-		flags						\
-	};							\
-	static moduledata_t fsname ## _mod = {			\
-		#fsname,					\
-		vfs_modevent,					\
-		& fsname ## _vfsconf				\
-	};							\
-	DECLARE_MODULE(fsname, fsname ## _mod, SI_SUB_VFS, SI_ORDER_MIDDLE)
-
-extern	char *mountrootfsname;
-
-/*
- * exported vnode operations
- */
-int	dounmount(struct mount *, int, struct thread *);
-int	kernel_mount(struct iovec *, u_int, int);
-int	kernel_vmount(int flags, ...);
-int	vfs_getopt(struct vfsoptlist *, const char *, void **, int *);
-int	vfs_copyopt(struct vfsoptlist *, const char *, void *, int);
-int	vfs_mount(struct thread *, const char *, char *, int, void *);
-int	vfs_nmount(struct thread *, int, struct uio *);
-int	vfs_setpublicfs			    /* set publicly exported fs */
-	    (struct mount *, struct netexport *, struct export_args *);
-int	vfs_lock(struct mount *);         /* lock a vfs */
-void	vfs_msync(struct mount *, int);
-void	vfs_unlock(struct mount *);       /* unlock a vfs */
-int	vfs_busy(struct mount *, int, struct mtx *, struct thread *);
-int	vfs_export			 /* process mount export info */
-	    (struct mount *, struct export_args *);
-struct	netcred *vfs_export_lookup	    /* lookup host in fs export list */
-	    (struct mount *, struct sockaddr *);
-int	vfs_allocate_syncvnode(struct mount *);
-void	vfs_getnewfsid(struct mount *);
-struct cdev *vfs_getrootfsid(struct mount *);
-struct	mount *vfs_getvfs(fsid_t *);      /* return vfs given fsid */
-int	vfs_modevent(module_t, int, void *);
-int	vfs_mountedon(struct vnode *);    /* is a vfs mounted on vp */
-void	vfs_mountroot(void);			/* mount our root filesystem */
-int	vfs_rootmountalloc(char *, char *, struct mount **);
-void	vfs_mount_destroy(struct mount *, struct thread *);
-void	vfs_unbusy(struct mount *, struct thread *);
-void	vfs_unmountall(void);
-int	vfs_register(struct vfsconf *);
-int	vfs_unregister(struct vfsconf *);
-extern	TAILQ_HEAD(mntlist, mount) mountlist;	/* mounted filesystem list */
-extern	struct mtx mountlist_mtx;
-extern	struct nfs_public nfs_pub;
-
-/*
- * Declarations for these vfs default operations are located in
- * kern/vfs_default.c, they should be used instead of making "dummy"
- * functions or casting entries in the VFS op table to "enopnotsupp()".
- */
-vfs_start_t		vfs_stdstart;
-vfs_root_t		vfs_stdroot;
-vfs_quotactl_t		vfs_stdquotactl;
-vfs_statfs_t		vfs_stdstatfs;
-vfs_sync_t		vfs_stdsync;
-vfs_sync_t		vfs_stdnosync;
-vfs_vget_t		vfs_stdvget;
-vfs_fhtovp_t		vfs_stdfhtovp;
-vfs_checkexp_t		vfs_stdcheckexp;
-vfs_vptofh_t		vfs_stdvptofh;
-vfs_init_t		vfs_stdinit;
-vfs_uninit_t		vfs_stduninit;
-vfs_extattrctl_t	vfs_stdextattrctl;
-
-/* XXX - these should be indirect functions!!! */
-int	softdep_fsync(struct vnode *);
-int	softdep_process_worklist(struct mount *);
-
-#else /* !_KERNEL */
-
-#include <sys/cdefs.h>
-
-struct stat;
-
-__BEGIN_DECLS
-int	fhopen(const struct fhandle *, int);
-int	fhstat(const struct fhandle *, struct stat *);
-int	fhstatfs(const struct fhandle *, struct statfs *);
-int	fstatfs(int, struct statfs *);
-int	getfh(const char *, fhandle_t *);
-int	getfsstat(struct statfs *, long, int);
-int	getmntinfo(struct statfs **, int);
-int	lgetfh(const char *, fhandle_t *);
-int	mount(const char *, const char *, int, void *);
-int	nmount(struct iovec *, unsigned int, int);
-int	statfs(const char *, struct statfs *);
-int	unmount(const char *, int);
-
-/* C library stuff */
-int	getvfsbyname(const char *, struct xvfsconf *);
-__END_DECLS
-
-#endif /* _KERNEL */
-
 #endif /* !_SYS_MOUNT_H_ */
diff -Naur ufsutils.orig/include/sys/param.h ufsutils.new/include/sys/param.h
--- ufsutils.orig/include/sys/param.h	2004-06-26 04:21:20.000000000 +0200
+++ ufsutils.new/include/sys/param.h	2004-06-28 23:39:30.000000000 +0200
@@ -38,29 +38,6 @@
 #ifndef _SYS_PARAM_H_
 #define _SYS_PARAM_H_
 
-#include <sys/_null.h>
-
-#define	BSD	199506		/* System version (year & month). */
-#define BSD4_3	1
-#define BSD4_4	1
-
-/* 
- * __FreeBSD_version numbers are documented in the Porter's Handbook.
- * If you bump the version for any reason, you should update the documentation
- * there.
- * Currently this lives here:
- *
- *	doc/en_US.ISO8859-1/books/porters-handbook/book.sgml
- *
- * scheme is:  <major><two digit minor><0 if release branch, otherwise 1>xx
- */
-#undef __FreeBSD_version
-#define __FreeBSD_version 502119	/* Master, propagated to newvers */
-
-#ifndef LOCORE
-#include <sys/types.h>
-#endif
-
 /*
  * Machine-independent constants (some used in following include files).
  * Redefined constants are from POSIX 1003.1 limits file.
@@ -68,7 +45,7 @@
  * MAXCOMLEN should be >= sizeof(ac_comm) (see <acct.h>)
  * MAXLOGNAME should be == UT_NAMESIZE+1 (see <utmp.h>)
  */
-#include <sys/syslimits.h>
+#include <limits.h>
 
 #define	MAXCOMLEN	19		/* max command name remembered */
 #define	MAXINTERP	32		/* max interpreter file name length */
@@ -81,79 +58,14 @@
 #define MAXHOSTNAMELEN	256		/* max hostname size */
 #define SPECNAMELEN	63		/* max length of devicename */
 
-/* More types and definitions used throughout the kernel. */
-#ifdef _KERNEL
-#if (defined(BURN_BRIDGES) || __FreeBSD_version >= 600000) \
-	&& defined(OBSOLETE_IN_6)
-#error "This file contains obsolete code to be removed in 6.0-current"
-#endif
-#include <sys/cdefs.h>
-#include <sys/errno.h>
-#include <sys/time.h>
-#include <sys/priority.h>
-
-#define	FALSE	0
-#define	TRUE	1
-#endif
-
-#ifndef _KERNEL
-/* Signals. */
-#include <sys/signal.h>
-#endif
-
-/* Machine type dependent parameters. */
-#include <machine/param.h>
-#ifndef _KERNEL
-#include <sys/limits.h>
-#endif
-
-#ifndef _NO_NAMESPACE_POLLUTION
-
 #ifndef DEV_BSHIFT
 #define	DEV_BSHIFT	9		/* log2(DEV_BSIZE) */
 #endif
 #define	DEV_BSIZE	(1<<DEV_BSHIFT)
 
-#ifndef BLKDEV_IOSIZE
-#define BLKDEV_IOSIZE  PAGE_SIZE	/* default block device I/O size */
-#endif
-#ifndef DFLTPHYS
-#define DFLTPHYS	(64 * 1024)	/* default max raw I/O transfer size */
-#endif
 #ifndef MAXPHYS
 #define MAXPHYS		(128 * 1024)	/* max raw I/O transfer size */
 #endif
-#ifndef MAXDUMPPGS
-#define MAXDUMPPGS	(DFLTPHYS/PAGE_SIZE)
-#endif
-
-/*
- * Constants related to network buffer management.
- * MCLBYTES must be no larger than PAGE_SIZE.
- */
-#ifndef	MSIZE
-#define MSIZE		256		/* size of an mbuf */
-#endif	/* MSIZE */
-
-#ifndef	MCLSHIFT
-#define MCLSHIFT	11		/* convert bytes to mbuf clusters */
-#endif	/* MCLSHIFT */
-
-#define MCLBYTES	(1 << MCLSHIFT)	/* size of an mbuf cluster */
-
-/*
- * Some macros for units conversion
- */
-
-/* clicks to bytes */
-#ifndef ctob
-#define ctob(x)	((x)<<PAGE_SHIFT)
-#endif
-
-/* bytes to clicks */
-#ifndef btoc
-#define btoc(x)	(((vm_offset_t)(x)+PAGE_MASK)>>PAGE_SHIFT)
-#endif
 
 /*
  * btodb() is messy and perhaps slow because `bytes' may be an off_t.  We
@@ -168,32 +80,11 @@
 	 : (daddr_t)((unsigned long)(bytes) >> DEV_BSHIFT))
 #endif
 
-#ifndef dbtob
-#define dbtob(db)			/* calculates (db * DEV_BSIZE) */ \
-	((off_t)(db) << DEV_BSHIFT)
-#endif
-
-#endif /* _NO_NAMESPACE_POLLUTION */
-
-#define	PRIMASK	0x0ff
-#define	PCATCH	0x100		/* OR'd with pri for tsleep to check signals */
-#define	PDROP	0x200	/* OR'd with pri to stop re-entry of interlock mutex */
-
-#define	NZERO	0		/* default "nice" */
-
 #define	NBBY	8		/* number of bits in a byte */
 #define	NBPW	sizeof(int)	/* number of bytes per word (integer) */
 
-#define	CMASK	022		/* default file mask: S_IWGRP|S_IWOTH */
-
 #define	NODEV	(dev_t)(-1)	/* non-existent device */
 
-#define	CBLOCK	128		/* Clist block size, must be a power of 2. */
-#define CBQSIZE	(CBLOCK/NBBY)	/* Quote bytes/cblock - can do better. */
-				/* Data chars/clist. */
-#define	CBSIZE	(CBLOCK - sizeof(struct cblock *) - CBQSIZE)
-#define	CROUND	(CBLOCK - 1)	/* Clist rounding. */
-
 /*
  * File system parameters and macros.
  *
@@ -252,71 +143,4 @@
 #define	MIN(a,b) (((a)<(b))?(a):(b))
 #define	MAX(a,b) (((a)>(b))?(a):(b))
 
-#ifdef _KERNEL
-/*
- * Basic byte order function prototypes for non-inline functions.
- */
-#ifndef _BYTEORDER_PROTOTYPED
-#define	_BYTEORDER_PROTOTYPED
-__BEGIN_DECLS
-__uint32_t	 htonl(__uint32_t);
-__uint16_t	 htons(__uint16_t);
-__uint32_t	 ntohl(__uint32_t);
-__uint16_t	 ntohs(__uint16_t);
-__END_DECLS
-#endif
-
-#ifndef lint
-#ifndef _BYTEORDER_FUNC_DEFINED
-#define	_BYTEORDER_FUNC_DEFINED
-#define	htonl(x)	__htonl(x)
-#define	htons(x)	__htons(x)
-#define	ntohl(x)	__ntohl(x)
-#define	ntohs(x)	__ntohs(x)
-#endif /* !_BYTEORDER_FUNC_DEFINED */
-#endif /* lint */
-#endif /* _KERNEL */
-
-/*
- * Constants for setting the parameters of the kernel memory allocator.
- *
- * 2 ** MINBUCKET is the smallest unit of memory that will be
- * allocated. It must be at least large enough to hold a pointer.
- *
- * Units of memory less or equal to MAXALLOCSAVE will permanently
- * allocate physical memory; requests for these size pieces of
- * memory are quite fast. Allocations greater than MAXALLOCSAVE must
- * always allocate and free physical memory; requests for these
- * size allocations should be done infrequently as they will be slow.
- *
- * Constraints: PAGE_SIZE <= MAXALLOCSAVE <= 2 ** (MINBUCKET + 14), and
- * MAXALLOCSIZE must be a power of two.
- */
-#if defined(__alpha__) || defined(__ia64__) || defined(__sparc64__)
-#define MINBUCKET	5		/* 5 => min allocation of 32 bytes */
-#else
-#define MINBUCKET	4		/* 4 => min allocation of 16 bytes */
-#endif
-#define MAXALLOCSAVE	(2 * PAGE_SIZE)
-
-/*
- * Scale factor for scaled integers used to count %cpu time and load avgs.
- *
- * The number of CPU `tick's that map to a unique `%age' can be expressed
- * by the formula (1 / (2 ^ (FSHIFT - 11))).  The maximum load average that
- * can be calculated (assuming 32 bits) can be closely approximated using
- * the formula (2 ^ (2 * (16 - FSHIFT))) for (FSHIFT < 15).
- *
- * For the scheduler to maintain a 1:1 mapping of CPU `tick' to `%age',
- * FSHIFT must be at least 11; this gives us a maximum load avg of ~1024.
- */
-#define	FSHIFT	11		/* bits to right of fixed binary point */
-#define FSCALE	(1<<FSHIFT)
-
-#define dbtoc(db)			/* calculates devblks to pages */ \
-	((db + (ctodb(1) - 1)) >> (PAGE_SHIFT - DEV_BSHIFT))
- 
-#define ctodb(db)			/* calculates pages to devblks */ \
-	((db) << (PAGE_SHIFT - DEV_BSHIFT))
-
 #endif	/* _SYS_PARAM_H_ */
diff -Naur ufsutils.orig/include/sys/ucred.h ufsutils.new/include/sys/ucred.h
--- ufsutils.orig/include/sys/ucred.h	2004-04-30 05:41:53.000000000 +0200
+++ ufsutils.new/include/sys/ucred.h	2004-05-20 22:56:03.000000000 +0200
@@ -33,6 +33,8 @@
 #ifndef _SYS_UCRED_H_
 #define	_SYS_UCRED_H_
 
+#include <sys/types.h>
+
 /*
  * Credentials.
  *
diff -Naur ufsutils.orig/libport/arc4random.c ufsutils.new/libport/arc4random.c
--- ufsutils.orig/libport/arc4random.c	2004-04-30 05:28:37.000000000 +0200
+++ ufsutils.new/libport/arc4random.c	2004-05-20 22:49:03.000000000 +0200
@@ -26,16 +26,11 @@
 #include <sys/cdefs.h>
 __FBSDID("$FreeBSD: src/lib/libc/gen/arc4random.c,v 1.10 2004/03/24 14:44:57 green Exp $");
 
-#include "namespace.h"
 #include <sys/types.h>
 #include <sys/time.h>
 #include <stdlib.h>
 #include <fcntl.h>
 #include <unistd.h>
-#include <pthread.h>
-
-#include "libc_private.h"
-#include "un-namespace.h"
 
 struct arc4_stream {
 	u_int8_t i;
@@ -43,20 +38,9 @@
 	u_int8_t s[256];
 };
 
-static pthread_mutex_t	arc4random_mtx = PTHREAD_MUTEX_INITIALIZER;
-
 #define	RANDOMDEV	"/dev/urandom"
-#define	THREAD_LOCK()						\
-	do {							\
-		if (__isthreaded)				\
-			_pthread_mutex_lock(&arc4random_mtx);	\
-	} while (0)
-
-#define	THREAD_UNLOCK()						\
-	do {							\
-		if (__isthreaded)				\
-			_pthread_mutex_unlock(&arc4random_mtx);	\
-	} while (0)
+#define	THREAD_LOCK()
+#define	THREAD_UNLOCK()
 
 static struct arc4_stream rs;
 static int rs_initialized;
@@ -109,10 +93,10 @@
 
 	gettimeofday(&rdat.tv, NULL);
 	rdat.pid = getpid();
-	fd = _open(RANDOMDEV, O_RDONLY, 0);
+	fd = open(RANDOMDEV, O_RDONLY, 0);
 	if (fd >= 0) {
-		(void) _read(fd, rdat.rnd, sizeof(rdat.rnd));
-		_close(fd);
+		(void) read(fd, rdat.rnd, sizeof(rdat.rnd));
+		close(fd);
 	} 
 	/* fd < 0?  Ah, what the heck. We'll just take whatever was on the
 	 * stack... */
diff -Naur ufsutils.orig/libport/blockdev.c ufsutils.new/libport/blockdev.c
--- ufsutils.orig/libport/blockdev.c	1970-01-01 01:00:00.000000000 +0100
+++ ufsutils.new/libport/blockdev.c	2004-06-30 15:58:31.000000000 +0200
@@ -0,0 +1,91 @@
+/*
+ * Copyright (C) 2004 Guillem Jover <guillem@debian.org>
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
+ * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
+ * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
+ * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+ * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+ * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <sys/types.h>
+#include <sys/ioctl.h>
+#if defined(__NetBSD__) || defined(__OpenBSD__) || defined(__FreeBSD_kernel__)
+#if defined(__FreeBSD_kernel__) && __FreeBSD_kernel_version >= 500000
+#include <sys/disk.h>
+#endif
+#include <sys/disklabel.h>
+#ifndef DIOCGMEDIASIZE
+#define DIOCGMEDIASIZE _IOR('d', 129, off_t)
+#endif
+#elif defined(__linux__)
+#ifndef BLKGETSIZE
+#define BLKGETSIZE _IO(0x12,96)
+#endif
+#endif
+#include <sys/stat.h>
+#include <unistd.h>
+#include <port/blockdev.h>
+
+static const int sector_size = 512;
+
+off_t
+get_block_device_size(int fd)
+{
+	off_t device_size = 0;
+	struct stat st;
+
+#if defined(__FreeBSD_kernel__) || defined(__OpenBSD__) || defined(__NetBSD__)
+	{
+		struct disklabel disklabel;
+
+		if (!ioctl(fd, DIOCGMEDIASIZE, &device_size))
+			return device_size;
+
+		if (!ioctl(fd, DIOCGDINFO, &disklabel)) {
+			device_size = (off_t)disklabel.d_secperunit * sector_size;
+			return device_size;
+		}
+	}
+#elif defined(__linux__)
+	{
+		long int device_sectors;
+
+		if (!ioctl(fd, BLKGETSIZE, &device_sectors)) {
+			device_size = (off_t)device_sectors * sector_size;
+			return device_size;
+		}
+	}
+#else
+	/* XXX: Implement a generic seek binary test for targets currently
+	 *      not supported.
+	 */
+#error "Do not know how to get block device size"
+#endif
+
+	/* Regular files or devices under the Hurd.  */
+	if (fstat(fd, &st) == 0) {
+		return st.st_size;
+	}
+
+	return device_size;
+}
+
diff -Naur ufsutils.orig/include/port/blockdev.h ufsutils.new/include/port/blockdev.h
--- ufsutils.orig/include/port/blockdev.h	1970-01-01 01:00:00.000000000 +0100
+++ ufsutils.new/include/port/blockdev.h	2004-06-29 22:17:29.000000000 +0200
@@ -0,0 +1,9 @@
+#ifndef LIBPORT_BLOCKDEV_H
+#define LIBPORT_BLOCKDEV_H
+
+#include <sys/types.h>
+
+off_t get_block_device_size(int fd);
+
+#endif
+
diff -Naur ufsutils.orig/libport/Makefile ufsutils.new/libport/Makefile
--- ufsutils.orig/libport/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ ufsutils.new/libport/Makefile	2004-06-29 22:54:03.000000000 +0200
@@ -0,0 +1,13 @@
+LIB = port
+LIB_type = static
+LIBSRCS = arc4random.c strlcpy.c strlcat.c blockdev.c
+
+ALL_CFLAGS = -D_LIBPORT
+ifdef LIBPORT_DEBUG
+ALL_CFLAGS += -D_LIBPORT_DEBUGGING
+endif
+
+INCLUDES =
+
+include ../Makefile.common
+
