diff -ur src.old/sys/netinet/ip.h src/sys/netinet/ip.h
--- src.old/sys/netinet/ip.h	1999-12-22 20:13:20.000000000 +0100
+++ src/sys/netinet/ip.h	2004-08-13 18:02:09.000000000 +0200
@@ -37,6 +37,10 @@
 #ifndef _NETINET_IP_H_
 #define _NETINET_IP_H_
 
+#include <sys/types.h>		/* u_int */
+#include <netinet/in.h>		/* in_addr */
+#include <netinet/in_systm.h>	/* n_long */
+
 /*
  * Definitions for internet protocol version 4.
  * Per RFC 791, September 1981.
diff -ur src.old/sys/netinet/ip_icmp.h src/sys/netinet/ip_icmp.h
--- src.old/sys/netinet/ip_icmp.h	1999-12-29 05:41:01.000000000 +0100
+++ src/sys/netinet/ip_icmp.h	2004-08-13 18:04:42.000000000 +0200
@@ -37,6 +37,11 @@
 #ifndef _NETINET_IP_ICMP_H_
 #define _NETINET_IP_ICMP_H_
 
+#include <sys/types.h>		/* u_int32_t, u_char */
+#include <netinet/in.h>		/* in_addr */
+#include <netinet/in_systm.h>	/* n_short */
+#include <netinet/ip.h>		/* idi_ip */
+
 /*
  * Interface Control Message Protocol Definitions.
  * Per RFC 792, September 1981.
diff -ur src.old/sys/netinet/ip_var.h src/sys/netinet/ip_var.h
--- src.old/sys/netinet/ip_var.h	2001-12-07 10:23:14.000000000 +0100
+++ src/sys/netinet/ip_var.h	2004-08-13 18:05:28.000000000 +0200
@@ -38,6 +38,8 @@
 #define	_NETINET_IP_VAR_H_
 
 #include <sys/queue.h>
+#include <sys/types.h>		/* u_char, u_short */
+#include <netinet/in.h>		/* in_addr */
 
 /*
  * Overlay for ip header used by other protocols (tcp, udp).
diff -ur src.old/sys/net/if_var.h src/sys/net/if_var.h
--- src.old/sys/net/if_var.h	2002-02-21 00:34:09.000000000 +0100
+++ src/sys/net/if_var.h	2004-08-13 18:58:11.000000000 +0200
@@ -37,6 +37,9 @@
 #ifndef	_NET_IF_VAR_H_
 #define	_NET_IF_VAR_H_
 
+#include <sys/types.h>
+#include <net/if.h>
+
 /*
  * Structures defining a network interface, providing a packet
  * transport mechanism (ala level 0 of the PUP protocols).
diff -ur src.old/sys/netinet/in_var.h src/sys/netinet/in_var.h
--- src.old/sys/netinet/in_var.h	2001-12-14 21:09:34.000000000 +0100
+++ src/sys/netinet/in_var.h	2004-08-13 19:06:39.000000000 +0200
@@ -38,7 +38,9 @@
 #define _NETINET_IN_VAR_H_
 
 #include <sys/queue.h>
+#include <net/if_var.h>		/* ifaddr */
 #include <sys/fnv_hash.h>
+#include <netinet/in.h>		/* in_addr */
 
 /*
  * Interface address, Internet version.  One of these structures
diff -ur src.old/sys/netinet6/in6.h src/sys/netinet6/in6.h
--- src.old/sys/netinet6/in6.h	2002-04-28 07:40:26.000000000 +0200
+++ src/sys/netinet6/in6.h	2004-08-13 18:42:25.000000000 +0200
@@ -72,6 +72,8 @@
 #ifndef _NETINET6_IN6_H_
 #define _NETINET6_IN6_H_
 
+#include <sys/types.h>
+
 /*
  * Identification of the network protocol stack
  * for *BSD-current/release: http://www.kame.net/dev/cvsweb.cgi/kame/COVERAGE
diff -ur src.old/sys/netinet6/in6_var.h src/sys/netinet6/in6_var.h
--- src.old/sys/netinet6/in6_var.h	2004-08-13 18:08:17.000000000 +0200
+++ src/sys/netinet6/in6_var.h	2004-08-13 18:46:49.000000000 +0200
@@ -68,6 +68,9 @@
 #ifndef _NETINET6_IN6_VAR_H_
 #define _NETINET6_IN6_VAR_H_
 
+#include <sys/types.h>		/* __kernel_time_t */
+#include <netinet/in_var.h>	/* ifaddr */
+
 /*
  * Interface address, Internet version.  One of these structures
  * is allocated for each interface with an Internet address.
diff -ur src.old/sys/sys/fnv_hash.h src/sys/sys/fnv_hash.h
--- src.old/sys/sys/fnv_hash.h	2001-03-21 11:50:59.000000000 +0100
+++ src/sys/sys/fnv_hash.h	2004-08-13 19:08:43.000000000 +0200
@@ -8,6 +8,8 @@
  * $FreeBSD: src/sys/sys/fnv_hash.h,v 1.2.2.1 2001/03/21 10:50:59 peter Exp $
  */
 
+#include <sys/types.h>
+
 typedef u_int32_t Fnv32_t;
 typedef u_int64_t Fnv64_t;
 
@@ -58,7 +60,7 @@
 fnv_64_str(const char *str, Fnv64_t hval)
 {
 	const u_int8_t *s = (const u_int8_t *)str;
-	u_register_t c;		 /* 32 bit on i386, 64 bit on alpha,ia64 */
+	long int c;		 /* 32 bit on i386, 64 bit on alpha,ia64 */
 
 	while ((c = *s++) != 0) {
 		hval *= FNV_64_PRIME;
--- src.old/sys/netinet6/in6.h	2004-08-13 19:18:55.000000000 +0200
+++ src/sys/netinet6/in6.h	2004-08-13 19:36:27.000000000 +0200
@@ -65,7 +65,7 @@
  *	@(#)in.h	8.3 (Berkeley) 1/3/94
  */
 
-#ifndef __KAME_NETINET_IN_H_INCLUDED_
+#ifndef _NETINET_IN_H
 #error "do not include netinet6/in6.h directly, include netinet/in.h.  see RFC2553"
 #endif
 
@@ -116,17 +116,6 @@
 #define	IPV6PORT_RESERVEDMIN	600
 #define	IPV6PORT_RESERVEDMAX	(IPV6PORT_RESERVED-1)
 
-/*
- * IPv6 address
- */
-struct in6_addr {
-	union {
-		u_int8_t   __u6_addr8[16];
-		u_int16_t  __u6_addr16[8];
-		u_int32_t  __u6_addr32[4];
-	} __u6_addr;			/* 128-bit IP6 address */
-};
-
 #define s6_addr   __u6_addr.__u6_addr8
 #ifdef _KERNEL	/* XXX nonstandard */
 #define s6_addr8  __u6_addr.__u6_addr8
@@ -142,14 +131,6 @@
 #ifndef _XOPEN_SOURCE
 #define SIN6_LEN
 #endif
-struct sockaddr_in6 {
-	u_int8_t	sin6_len;	/* length of this struct(sa_family_t)*/
-	u_int8_t	sin6_family;	/* AF_INET6 (sa_family_t) */
-	u_int16_t	sin6_port;	/* Transport layer port # (in_port_t)*/
-	u_int32_t	sin6_flowinfo;	/* IP6 flow information */
-	struct in6_addr	sin6_addr;	/* IP6 address */
-	u_int32_t	sin6_scope_id;	/* scope zone index */
-};
 
 /*
  * Local definition for masks
@@ -447,22 +428,6 @@
 #define IPV6_DEFAULT_MULTICAST_LOOP 1	/* normally hear sends if a member */
 
 /*
- * Argument structure for IPV6_JOIN_GROUP and IPV6_LEAVE_GROUP.
- */
-struct ipv6_mreq {
-	struct in6_addr	ipv6mr_multiaddr;
-	unsigned int	ipv6mr_interface;
-};
-
-/*
- * IPV6_PKTINFO: Packet information(RFC2292 sec 5)
- */
-struct in6_pktinfo {
-	struct in6_addr	ipi6_addr;	/* src/dst IPv6 address */
-	unsigned int	ipi6_ifindex;	/* send/recv interface index */
-};
-
-/*
  * Argument for IPV6_PORTRANGE:
  * - which range to search when port is unspecified at bind() or connect()
  */
--- src/sys/netinet6/in6.h~	2004-08-13 19:36:58.000000000 +0200
+++ src/sys/netinet6/in6.h	2004-08-13 19:53:02.000000000 +0200
@@ -216,9 +216,6 @@
 #ifdef _KERNEL
 #define IN6_ARE_ADDR_EQUAL(a, b)			\
     (bcmp(&(a)->s6_addr[0], &(b)->s6_addr[0], sizeof(struct in6_addr)) == 0)
-#else
-#define IN6_ARE_ADDR_EQUAL(a, b)			\
-    (memcmp(&(a)->s6_addr[0], &(b)->s6_addr[0], sizeof(struct in6_addr)) == 0)
 #endif
 
 #ifdef _KERNEL			/* non standard */
diff -ur src.old/sys/netinet6/in6.h src/sys/netinet6/in6.h
--- src.old/sys/netinet6/in6.h	2004-08-16 01:52:54.000000000 +0200
+++ src/sys/netinet6/in6.h	2004-08-16 02:00:34.000000000 +0200
@@ -116,7 +116,6 @@
 #define	IPV6PORT_RESERVEDMIN	600
 #define	IPV6PORT_RESERVEDMAX	(IPV6PORT_RESERVED-1)
 
-#define s6_addr   __u6_addr.__u6_addr8
 #ifdef _KERNEL	/* XXX nonstandard */
 #define s6_addr8  __u6_addr.__u6_addr8
 #define s6_addr16 __u6_addr.__u6_addr16
diff -ur src.old/sys/net/if.h src/sys/net/if.h
--- src.old/sys/net/if.h	2004-08-16 02:02:58.000000000 +0200
+++ src/sys/net/if.h	2004-08-16 02:58:23.000000000 +0200
@@ -92,29 +92,29 @@
  */
 struct if_data {
 	/* generic interface information */
-	u_char	ifi_type;		/* ethernet, tokenring, etc */
-	u_char	ifi_physical;		/* e.g., AUI, Thinnet, 10base-T, etc */
-	u_char	ifi_addrlen;		/* media address length */
-	u_char	ifi_hdrlen;		/* media header length */
-	u_char	ifi_recvquota;		/* polling quota for receive intrs */
-	u_char	ifi_xmitquota;		/* polling quota for xmit intrs */
-	u_long	ifi_mtu;		/* maximum transmission unit */
-	u_long	ifi_metric;		/* routing metric (external only) */
-	u_long	ifi_baudrate;		/* linespeed */
+	unsigned char	ifi_type;		/* ethernet, tokenring, etc */
+	unsigned char	ifi_physical;		/* e.g., AUI, Thinnet, 10base-T, etc */
+	unsigned char	ifi_addrlen;		/* media address length */
+	unsigned char	ifi_hdrlen;		/* media header length */
+	unsigned char	ifi_recvquota;		/* polling quota for receive intrs */
+	unsigned char	ifi_xmitquota;		/* polling quota for xmit intrs */
+	unsigned long	ifi_mtu;		/* maximum transmission unit */
+	unsigned long	ifi_metric;		/* routing metric (external only) */
+	unsigned long	ifi_baudrate;		/* linespeed */
 	/* volatile statistics */
-	u_long	ifi_ipackets;		/* packets received on interface */
-	u_long	ifi_ierrors;		/* input errors on interface */
-	u_long	ifi_opackets;		/* packets sent on interface */
-	u_long	ifi_oerrors;		/* output errors on interface */
-	u_long	ifi_collisions;		/* collisions on csma interfaces */
-	u_long	ifi_ibytes;		/* total number of octets received */
-	u_long	ifi_obytes;		/* total number of octets sent */
-	u_long	ifi_imcasts;		/* packets received via multicast */
-	u_long	ifi_omcasts;		/* packets sent via multicast */
-	u_long	ifi_iqdrops;		/* dropped on input, this interface */
-	u_long	ifi_noproto;		/* destined for unsupported protocol */
-	u_long	ifi_hwassist;		/* HW offload capabilities */
-	u_long	ifi_unused;		/* XXX was ifi_xmittiming */
+	unsigned long	ifi_ipackets;		/* packets received on interface */
+	unsigned long	ifi_ierrors;		/* input errors on interface */
+	unsigned long	ifi_opackets;		/* packets sent on interface */
+	unsigned long	ifi_oerrors;		/* output errors on interface */
+	unsigned long	ifi_collisions;		/* collisions on csma interfaces */
+	unsigned long	ifi_ibytes;		/* total number of octets received */
+	unsigned long	ifi_obytes;		/* total number of octets sent */
+	unsigned long	ifi_imcasts;		/* packets received via multicast */
+	unsigned long	ifi_omcasts;		/* packets sent via multicast */
+	unsigned long	ifi_iqdrops;		/* dropped on input, this interface */
+	unsigned long	ifi_noproto;		/* destined for unsupported protocol */
+	unsigned long	ifi_hwassist;		/* HW offload capabilities */
+	unsigned long	ifi_unused;		/* XXX was ifi_xmittiming */
 	struct	__kernel_timeval ifi_lastchange;	/* time of last administrative change */
 };
 
@@ -165,12 +165,12 @@
  * from getkerninfo and the routing socket
  */
 struct if_msghdr {
-	u_short	ifm_msglen;	/* to skip over non-understood messages */
-	u_char	ifm_version;	/* future binary compatability */
-	u_char	ifm_type;	/* message type */
+	unsigned short	ifm_msglen;	/* to skip over non-understood messages */
+	unsigned char	ifm_version;	/* future binary compatability */
+	unsigned char	ifm_type;	/* message type */
 	int	ifm_addrs;	/* like rtm_addrs */
 	int	ifm_flags;	/* value of if_flags */
-	u_short	ifm_index;	/* index for associated ifp */
+	unsigned short	ifm_index;	/* index for associated ifp */
 	struct	if_data ifm_data;/* statistics and other data about if */
 };
 
@@ -179,12 +179,12 @@
  * from getkerninfo and the routing socket
  */
 struct ifa_msghdr {
-	u_short	ifam_msglen;	/* to skip over non-understood messages */
-	u_char	ifam_version;	/* future binary compatability */
-	u_char	ifam_type;	/* message type */
+	unsigned short	ifam_msglen;	/* to skip over non-understood messages */
+	unsigned char	ifam_version;	/* future binary compatability */
+	unsigned char	ifam_type;	/* message type */
 	int	ifam_addrs;	/* like rtm_addrs */
 	int	ifam_flags;	/* value of ifa_flags */
-	u_short	ifam_index;	/* index for associated ifp */
+	unsigned short	ifam_index;	/* index for associated ifp */
 	int	ifam_metric;	/* value of ifa_metric */
 };
 
@@ -193,24 +193,24 @@
  * from the routing socket
  */
 struct ifma_msghdr {
-	u_short	ifmam_msglen;	/* to skip over non-understood messages */
-	u_char	ifmam_version;	/* future binary compatability */
-	u_char	ifmam_type;	/* message type */
+	unsigned short	ifmam_msglen;	/* to skip over non-understood messages */
+	unsigned char	ifmam_version;	/* future binary compatability */
+	unsigned char	ifmam_type;	/* message type */
 	int	ifmam_addrs;	/* like rtm_addrs */
 	int	ifmam_flags;	/* value of ifa_flags */
-	u_short	ifmam_index;	/* index for associated ifp */
+	unsigned short	ifmam_index;	/* index for associated ifp */
 };
 
 /*
  * Message format announcing the arrival or departure of a network interface.
  */
 struct if_announcemsghdr {
-	u_short	ifan_msglen;	/* to skip over non-understood messages */
-	u_char	ifan_version;	/* future binary compatibility */
-	u_char	ifan_type;	/* message type */
-	u_short	ifan_index;	/* index for associated ifp */
+	unsigned short	ifan_msglen;	/* to skip over non-understood messages */
+	unsigned char	ifan_version;	/* future binary compatibility */
+	unsigned char	ifan_type;	/* message type */
+	unsigned short	ifan_index;	/* index for associated ifp */
 	char	ifan_name[IFNAMSIZ]; /* if name, e.g. "en0" */
-	u_short	ifan_what;	/* what type of announcement */
+	unsigned short	ifan_what;	/* what type of announcement */
 };
 
 #define	IFAN_ARRIVAL	0	/* interface arrival */
@@ -234,7 +234,7 @@
 		int	ifru_mtu;
 		int	ifru_phys;
 		int	ifru_media;
-		caddr_t	ifru_data;
+		char	*ifru_data;
 		int	ifru_cap[2];
 	} ifr_ifru;
 #define	ifr_addr	ifr_ifru.ifru_addr	/* address */
@@ -296,7 +296,7 @@
 struct	ifconf {
 	int	ifc_len;		/* size of associated buffer */
 	union {
-		caddr_t	ifcu_buf;
+		char	*ifcu_buf;
 		struct	ifreq *ifcu_req;
 	} ifc_ifcu;
 #define	ifc_buf	ifc_ifcu.ifcu_buf	/* buffer address */
@@ -309,9 +309,9 @@
  */
 struct if_laddrreq {
 	char	iflr_name[IFNAMSIZ];
-	u_int	flags;
+	unsigned int	flags;
 #define	IFLR_PREFIX	0x8000  /* in: prefix given  out: kernel fills id */
-	u_int	prefixlen;         /* in/out */
+	unsigned int	prefixlen;         /* in/out */
 	struct	sockaddr_storage addr;   /* in/out */
 	struct	sockaddr_storage dstaddr; /* out */
 };
@@ -325,13 +325,13 @@
 
 #ifndef _KERNEL
 struct if_nameindex {
-	u_int	if_index;	/* 1, 2, ... */
+	unsigned int	if_index;	/* 1, 2, ... */
 	char	*if_name;	/* null terminated name: "le0", ... */
 };
 
 __BEGIN_DECLS
-u_int	 if_nametoindex __P((const char *));
-char	*if_indextoname __P((u_int, char *));
+unsigned int	 if_nametoindex __P((const char *));
+char	*if_indextoname __P((unsigned int, char *));
 struct	 if_nameindex *if_nameindex __P((void));
 void	 if_freenameindex __P((struct if_nameindex *));
 __END_DECLS
diff -ur src.old/sys/net/if_dl.h src/sys/net/if_dl.h
--- src.old/sys/net/if_dl.h	2004-08-16 03:04:51.000000000 +0200
+++ src/sys/net/if_dl.h	2004-08-16 03:13:08.000000000 +0200
@@ -63,17 +63,17 @@
  * Structure of a Link-Level sockaddr:
  */
 struct sockaddr_dl {
-	u_char	sdl_len;	/* Total length of sockaddr */
-	u_char	sdl_family;	/* AF_LINK */
-	u_short	sdl_index;	/* if != 0, system given index for interface */
-	u_char	sdl_type;	/* interface type */
-	u_char	sdl_nlen;	/* interface name length, no trailing 0 reqd. */
-	u_char	sdl_alen;	/* link level address length */
-	u_char	sdl_slen;	/* link layer selector length */
+	unsigned char	sdl_len;	/* Total length of sockaddr */
+	unsigned char	sdl_family;	/* AF_LINK */
+	unsigned short	sdl_index;	/* if != 0, system given index for interface */
+	unsigned char	sdl_type;	/* interface type */
+	unsigned char	sdl_nlen;	/* interface name length, no trailing 0 reqd. */
+	unsigned char	sdl_alen;	/* link level address length */
+	unsigned char	sdl_slen;	/* link layer selector length */
 	char	sdl_data[12];	/* minimum work area, can be larger;
 				   contains both if name and ll address */
-	u_short	sdl_rcf;	/* source routing control */
-	u_short	sdl_route[16];	/* source routing information */
+	unsigned short	sdl_rcf;	/* source routing control */
+	unsigned short	sdl_route[16];	/* source routing information */
 };
 
 #define LLADDR(s) ((caddr_t)((s)->sdl_data + (s)->sdl_nlen))
