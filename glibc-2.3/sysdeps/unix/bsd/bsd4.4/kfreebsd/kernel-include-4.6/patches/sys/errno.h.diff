*** orig/sys/errno.h	Tue Jan 22 11:46:56 2002
--- import/sys/errno.h	Fri Sep  6 01:31:46 2002
***************
*** 1,3 ****
--- 1,21 ----
+ /* Copyright (C) 2002 Free Software Foundation, Inc.
+    This file is part of the GNU C Library.
+ 
+    The GNU C Library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Lesser General Public
+    License as published by the Free Software Foundation; either
+    version 2.1 of the License, or (at your option) any later version.
+ 
+    The GNU C Library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Lesser General Public License for more details.
+ 
+    You should have received a copy of the GNU Lesser General Public
+    License along with the GNU C Library; if not, write to the Free
+    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+    02111-1307 USA.  */
+ 
  /*
   * Copyright (c) 1982, 1986, 1989, 1993
   *	The Regents of the University of California.  All rights reserved.
***************
*** 39,54 ****
   * $FreeBSD: src/sys/sys/errno.h,v 1.14.2.2 2002/01/22 10:46:56 keramida Exp $
   */
  
! #ifndef _SYS_ERRNO_H_
! #define _SYS_ERRNO_H_
! 
! #ifndef _KERNEL
! #include <sys/cdefs.h>
! __BEGIN_DECLS
! int *	__error __P((void));
! __END_DECLS
! #define	errno		(* __error())
! #endif
  
  #define	EPERM		1		/* Operation not permitted */
  #define	ENOENT		2		/* No such file or directory */
--- 57,64 ----
   * $FreeBSD: src/sys/sys/errno.h,v 1.14.2.2 2002/01/22 10:46:56 keramida Exp $
   */
  
! #ifndef _ERRNO_H_
! #define _ERRNO_H_
  
  #define	EPERM		1		/* Operation not permitted */
  #define	ENOENT		2		/* No such file or directory */
***************
*** 65,71 ****
  #define	ENOMEM		12		/* Cannot allocate memory */
  #define	EACCES		13		/* Permission denied */
  #define	EFAULT		14		/* Bad address */
! #ifndef _POSIX_SOURCE
  #define	ENOTBLK		15		/* Block device required */
  #endif
  #define	EBUSY		16		/* Device busy */
--- 75,81 ----
  #define	ENOMEM		12		/* Cannot allocate memory */
  #define	EACCES		13		/* Permission denied */
  #define	EFAULT		14		/* Bad address */
! #ifdef	__USE_BSD
  #define	ENOTBLK		15		/* Block device required */
  #endif
  #define	EBUSY		16		/* Device busy */
***************
*** 78,84 ****
  #define	ENFILE		23		/* Too many open files in system */
  #define	EMFILE		24		/* Too many open files */
  #define	ENOTTY		25		/* Inappropriate ioctl for device */
! #ifndef _POSIX_SOURCE
  #define	ETXTBSY		26		/* Text file busy */
  #endif
  #define	EFBIG		27		/* File too large */
--- 88,94 ----
  #define	ENFILE		23		/* Too many open files in system */
  #define	EMFILE		24		/* Too many open files */
  #define	ENOTTY		25		/* Inappropriate ioctl for device */
! #ifdef	__USE_BSD
  #define	ETXTBSY		26		/* Text file busy */
  #endif
  #define	EFBIG		27		/* File too large */
***************
*** 88,100 ****
  #define	EMLINK		31		/* Too many links */
  #define	EPIPE		32		/* Broken pipe */
  
  /* math software */
  #define	EDOM		33		/* Numerical argument out of domain */
  #define	ERANGE		34		/* Result too large */
  
  /* non-blocking and interrupt i/o */
  #define	EAGAIN		35		/* Resource temporarily unavailable */
! #ifndef _POSIX_SOURCE
  #define	EWOULDBLOCK	EAGAIN		/* Operation would block */
  #define	EINPROGRESS	36		/* Operation now in progress */
  #define	EALREADY	37		/* Operation already in progress */
--- 98,119 ----
  #define	EMLINK		31		/* Too many links */
  #define	EPIPE		32		/* Broken pipe */
  
+ #endif /* <errno.h> included.  */
+ 
  /* math software */
+ 
+ #if !defined(__Emath_defined) &&  (defined(_ERRNO_H) || defined(__need_Emath))
  #define	EDOM		33		/* Numerical argument out of domain */
+ #endif /* Emath not defined and <errno.h> included or need Emath.  */
+ #if !defined(__Emath_defined) &&  (defined(_ERRNO_H) || defined(__need_Emath))
  #define	ERANGE		34		/* Result too large */
+ #endif /* Emath not defined and <errno.h> included or need Emath.  */
+ 
+ #ifdef _ERRNO_H
  
  /* non-blocking and interrupt i/o */
  #define	EAGAIN		35		/* Resource temporarily unavailable */
! #ifdef	__USE_BSD
  #define	EWOULDBLOCK	EAGAIN		/* Operation would block */
  #define	EINPROGRESS	36		/* Operation now in progress */
  #define	EALREADY	37		/* Operation already in progress */
***************
*** 129,146 ****
  #define	ECONNREFUSED	61		/* Connection refused */
  
  #define	ELOOP		62		/* Too many levels of symbolic links */
! #endif /* _POSIX_SOURCE */
  #define	ENAMETOOLONG	63		/* File name too long */
  
  /* should be rearranged */
! #ifndef _POSIX_SOURCE
  #define	EHOSTDOWN	64		/* Host is down */
  #define	EHOSTUNREACH	65		/* No route to host */
! #endif /* _POSIX_SOURCE */
  #define	ENOTEMPTY	66		/* Directory not empty */
  
  /* quotas & mush */
! #ifndef _POSIX_SOURCE
  #define	EPROCLIM	67		/* Too many processes */
  #define	EUSERS		68		/* Too many users */
  #define	EDQUOT		69		/* Disc quota exceeded */
--- 148,165 ----
  #define	ECONNREFUSED	61		/* Connection refused */
  
  #define	ELOOP		62		/* Too many levels of symbolic links */
! #endif /* __USE_BSD */
  #define	ENAMETOOLONG	63		/* File name too long */
  
  /* should be rearranged */
! #ifdef	__USE_BSD
  #define	EHOSTDOWN	64		/* Host is down */
  #define	EHOSTUNREACH	65		/* No route to host */
! #endif /* __USE_BSD */
  #define	ENOTEMPTY	66		/* Directory not empty */
  
  /* quotas & mush */
! #ifdef	__USE_BSD
  #define	EPROCLIM	67		/* Too many processes */
  #define	EUSERS		68		/* Too many users */
  #define	EDQUOT		69		/* Disc quota exceeded */
***************
*** 153,181 ****
  #define	EPROGUNAVAIL	74		/* RPC prog. not avail */
  #define	EPROGMISMATCH	75		/* Program version wrong */
  #define	EPROCUNAVAIL	76		/* Bad procedure for program */
! #endif /* _POSIX_SOURCE */
  
  #define	ENOLCK		77		/* No locks available */
  #define	ENOSYS		78		/* Function not implemented */
  
- #ifndef _POSIX_SOURCE
  #define	EFTYPE		79		/* Inappropriate file type or format */
  #define	EAUTH		80		/* Authentication error */
  #define	ENEEDAUTH	81		/* Need authenticator */
  #define	EIDRM		82		/* Identifier removed */
  #define	ENOMSG		83		/* No message of desired type */
  #define	EOVERFLOW	84		/* Value too large to be stored in data type */
  #define	ECANCELED	85		/* Operation canceled */
  #define	EILSEQ		86		/* Illegal byte sequence */
  #define	ELAST		86		/* Must be equal largest errno */
  
- #endif /* _POSIX_SOURCE */
  
! #ifdef _KERNEL
! /* pseudo-errors returned inside kernel to modify return to process */
! #define	ERESTART	(-1)		/* restart syscall */
! #define	EJUSTRETURN	(-2)		/* don't modify regs, just return */
! #define	ENOIOCTL	(-3)		/* ioctl not handled by this layer */
! #endif
  
! #endif
--- 172,222 ----
  #define	EPROGUNAVAIL	74		/* RPC prog. not avail */
  #define	EPROGMISMATCH	75		/* Program version wrong */
  #define	EPROCUNAVAIL	76		/* Bad procedure for program */
! #endif /* __USE_BSD */
  
  #define	ENOLCK		77		/* No locks available */
  #define	ENOSYS		78		/* Function not implemented */
  
  #define	EFTYPE		79		/* Inappropriate file type or format */
+ 
+ #ifdef	__USE_BSD
  #define	EAUTH		80		/* Authentication error */
  #define	ENEEDAUTH	81		/* Need authenticator */
  #define	EIDRM		82		/* Identifier removed */
  #define	ENOMSG		83		/* No message of desired type */
  #define	EOVERFLOW	84		/* Value too large to be stored in data type */
  #define	ECANCELED	85		/* Operation canceled */
+ #endif /* __USE_BSD */
+ 
+ #endif /* <errno.h> included.  */
+ 
+ #if !defined(__Emath_defined) &&  (defined(_ERRNO_H) || defined(__need_Emath))
  #define	EILSEQ		86		/* Illegal byte sequence */
+ #endif /* Emath not defined and <errno.h> included or need Emath.  */
+ 
+ #ifdef _ERRNO_H
+ 
+ #ifdef	__USE_BSD
  #define	ELAST		86		/* Must be equal largest errno */
+ #endif /* __USE_BSD */
  
  
! #ifndef __ASSEMBLER__
! /* We now need a declaration of the `errno' variable.  */
! extern int errno;
  
! /* Function to get address of global `errno' variable.  */
! extern int *__errno_location (void) __THROW __attribute__ ((__const__));
! 
! # if defined _LIBC
! /* We wouldn't need a special macro anymore but it is history.  */
! #  define __set_errno(val) (*__errno_location ()) = (val)
! # endif /* _LIBC */
! 
! # if !defined _LIBC || defined _LIBC_REENTRANT
! /* When using threads, errno is a per-thread value.  */
! #  define errno (*__errno_location ())
! # endif
! #endif /* !__ASSEMBLER__ */
! 
! #endif /* <errno.h> included.  */
