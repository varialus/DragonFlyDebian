*** orig/alpha/machine/param.h	Fri Sep 21 21:08:03 2001
--- import/alpha/machine/param.h	Fri Sep  6 01:33:51 2002
***************
*** 1,3 ****
--- 1,21 ----
+ /* Copyright (C) 2002 Free Software Foundation, Inc.
+    This file is part of the GNU C Library.
+ 
+    The GNU C Library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Lesser General Public
+    License as published by the Free Software Foundation; either
+    version 2.1 of the License, or (at your option) any later version.
+ 
+    The GNU C Library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Lesser General Public License for more details.
+ 
+    You should have received a copy of the GNU Lesser General Public
+    License along with the GNU C Library; if not, write to the Free
+    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+    02111-1307 USA.  */
+ 
  /* $FreeBSD: src/sys/alpha/include/param.h,v 1.17.2.4 2001/09/21 19:08:03 dillon Exp $ */
  /* From: NetBSD: param.h,v 1.20 1997/09/19 13:52:53 leo Exp */
  
***************
*** 43,48 ****
--- 61,69 ----
   *	@(#)param.h	8.1 (Berkeley) 6/10/93
   */
  
+ #ifndef _MACHINE_PARAM_H_
+ #define _MACHINE_PARAM_H_
+ 
  /*
   * Machine dependent constants for the Alpha.
   */
***************
*** 122,136 ****
  #define MAXPHYS		(128 * 1024)	/* max raw I/O transfer size */
  #define MAXDUMPPGS	(DFLTPHYS/PAGE_SIZE)
  
! #define	CLSIZE		1
! #define	CLSIZELOG2	0
  
  /* NOTE: SSIZE, SINCR and UPAGES must be multiples of CLSIZE */
! #define	SSIZE		1		/* initial stack size/NBPG */
! #define	SINCR		1		/* increment of stack/NBPG */
  
! #define	UPAGES		2		/* pages of u-area */
! #define	USPACE		(UPAGES * PAGE_SIZE) /* total size of u-area */
  
  /*
   * Ceiling on amount of swblock kva space.
--- 143,157 ----
  #define MAXPHYS		(128 * 1024)	/* max raw I/O transfer size */
  #define MAXDUMPPGS	(DFLTPHYS/PAGE_SIZE)
  
! #define CLSIZE		1
! #define CLSIZELOG2	0
  
  /* NOTE: SSIZE, SINCR and UPAGES must be multiples of CLSIZE */
! #define SSIZE		1		/* initial stack size/NBPG */
! #define SINCR		1		/* increment of stack/NBPG */
  
! #define UPAGES		2		/* pages of u-area */
! #define USPACE		(UPAGES * PAGE_SIZE) /* total size of u-area */
  
  /*
   * Ceiling on amount of swblock kva space.
***************
*** 154,199 ****
   * clusters (MAPPED_MBUFS), MCLBYTES must also be an integral multiple
   * of the hardware page size.
   */
! #define	MSIZE		256		/* size of an mbuf */
  #ifndef MCLSHIFT
  # define	MCLSHIFT	11	/* convert bytes to m_buf clusters */
  					/* 2K cluster can hold Ether frame */
  #endif	/* MCLSHIFT */
! #define	MCLBYTES	(1 << MCLSHIFT)	/* size of a m_buf cluster */
! #define	MCLOFSET	(MCLBYTES - 1)
  
  /*
   * Size of kernel malloc arena in CLBYTES-sized logical pages
   */ 
  #ifndef NKMEMCLUSTERS
! #define	NKMEMCLUSTERS	(4096*1024/CLBYTES)	/* XXX? */
  #endif
  
  /* pages ("clicks") to disk blocks */
! #define	ctod(x)		((x) << (PAGE_SHIFT - DEV_BSHIFT))
! #define	dtoc(x)		((x) >> (PAGE_SHIFT - DEV_BSHIFT))
  
  /* pages to bytes */
! #define	ctob(x)		((x) << PAGE_SHIFT)
! #define	btoc(x)		(((x) + PAGE_MASK) >> PAGE_SHIFT)
  
  /* bytes to disk blocks */
! #define	btodb(x)	((x) >> DEV_BSHIFT)
! #define	dbtob(x)	((x) << DEV_BSHIFT)
  
  /*
   * Mach derived conversion macros
   */
! #define	round_page(x)	((((unsigned long)(x)) + PAGE_MASK) & ~(PAGE_MASK))
! #define	trunc_page(x)	((unsigned long)(x) & ~(PAGE_MASK))
  
  #define atop(x)			((unsigned long)(x) >> PAGE_SHIFT)
  #define ptoa(x)			((unsigned long)(x) << PAGE_SHIFT)
  
! #define	alpha_btop(x)		((unsigned long)(x) >> PAGE_SHIFT)
! #define	alpha_ptob(x)		((unsigned long)(x) << PAGE_SHIFT)
  
  #define pgtok(x)                ((x) * (PAGE_SIZE / 1024)) 
  
  #endif /* !_MACHINE_PARAM_H_ */
  #endif /* !_NO_NAMESPACE_POLLUTION */
--- 175,222 ----
   * clusters (MAPPED_MBUFS), MCLBYTES must also be an integral multiple
   * of the hardware page size.
   */
! #define MSIZE		256		/* size of an mbuf */
  #ifndef MCLSHIFT
  # define	MCLSHIFT	11	/* convert bytes to m_buf clusters */
  					/* 2K cluster can hold Ether frame */
  #endif	/* MCLSHIFT */
! #define MCLBYTES	(1 << MCLSHIFT)	/* size of a m_buf cluster */
! #define MCLOFSET	(MCLBYTES - 1)
  
  /*
   * Size of kernel malloc arena in CLBYTES-sized logical pages
   */ 
  #ifndef NKMEMCLUSTERS
! #define NKMEMCLUSTERS	(4096*1024/CLBYTES)	/* XXX? */
  #endif
  
  /* pages ("clicks") to disk blocks */
! #define ctod(x)		((x) << (PAGE_SHIFT - DEV_BSHIFT))
! #define dtoc(x)		((x) >> (PAGE_SHIFT - DEV_BSHIFT))
  
  /* pages to bytes */
! #define ctob(x)		((x) << PAGE_SHIFT)
! #define btoc(x)		(((x) + PAGE_MASK) >> PAGE_SHIFT)
  
  /* bytes to disk blocks */
! #define btodb(x)	((x) >> DEV_BSHIFT)
! #define dbtob(x)	((x) << DEV_BSHIFT)
  
  /*
   * Mach derived conversion macros
   */
! #define round_page(x)	((((unsigned long)(x)) + PAGE_MASK) & ~(PAGE_MASK))
! #define trunc_page(x)	((unsigned long)(x) & ~(PAGE_MASK))
  
  #define atop(x)			((unsigned long)(x) >> PAGE_SHIFT)
  #define ptoa(x)			((unsigned long)(x) << PAGE_SHIFT)
  
! #define alpha_btop(x)		((unsigned long)(x) >> PAGE_SHIFT)
! #define alpha_ptob(x)		((unsigned long)(x) << PAGE_SHIFT)
  
  #define pgtok(x)                ((x) * (PAGE_SIZE / 1024)) 
  
  #endif /* !_MACHINE_PARAM_H_ */
+ 
+ #endif /* !_MACHINE_PARAM_H_ */
  #endif /* !_NO_NAMESPACE_POLLUTION */
