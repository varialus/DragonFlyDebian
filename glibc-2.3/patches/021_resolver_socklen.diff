Copyright (C) 2005 Free Software Foundation, Inc.
This patch is part of the GNU C Library.
Contributed by Aurelien Jarno <aurelien@aurel32.net>

--- glibc-2.3/resolv/res_send.c.orig	2002-05-31 09:44:56.000000000 +0200
+++ glibc-2.3/resolv/res_send.c	2005-03-20 12:06:02.000000000 +0100
@@ -726,8 +726,15 @@
 			return (-1);
 		}
 		__set_errno (0);
+#ifdef _LIBC
+		if (connect(statp->_vcsock, (struct sockaddr *)nsap,
+			    (nsap->sin6_family == PF_INET6) ? 
+			    sizeof(struct sockaddr_in6) : 
+			    sizeof(struct sockaddr_in)) < 0) {
+#else
 		if (connect(statp->_vcsock, (struct sockaddr *)nsap,
 			    sizeof *nsap) < 0) {
+#endif
 			*terrno = errno;
 			Aerror(statp, stderr, "connect/vc", errno, *nsap);
 			res_nclose(statp);
@@ -913,8 +920,16 @@
 		 * error message is received.  We can thus detect
 		 * the absence of a nameserver without timing out.
 		 */
+
+#ifdef _LIBC
+		if (connect(EXT(statp).nssocks[ns], (struct sockaddr *)nsap,
+			    (socket_pf == PF_INET6) ?
+			    sizeof(struct sockaddr_in6) : 
+			    sizeof(struct sockaddr_in)) < 0) {
+#else
 		if (connect(EXT(statp).nssocks[ns], (struct sockaddr *)nsap,
 			    sizeof *nsap) < 0) {
+#endif
 			Aerror(statp, stderr, "connect(dg)", errno, *nsap);
 			res_nclose(statp);
 			return (0);
@@ -935,9 +950,13 @@
 	/* If IPv6 socket and nsap is IPv4, make it IPv4-mapped */
 	if ((socket_pf == PF_INET6) && (nsap->sin6_family == AF_INET))
 		convaddr4to6(nsap);
-#endif
+	if (sendto(s, (char*)buf, buflen, 0,
+		   (struct sockaddr *)nsap, (socket_pf == PF_INET6) ? 
+		   sizeof(struct sockaddr_in6) : sizeof(struct sockaddr_in)) != buflen)
+#else
 	if (sendto(s, (char*)buf, buflen, 0,
 		   (struct sockaddr *)nsap, sizeof *nsap) != buflen)
+#endif
 	{
 		Aerror(statp, stderr, "sendto", errno, *nsap);
 		res_nclose(statp);
