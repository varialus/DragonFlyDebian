#! /usr/bin/make -f
# -*- makefile -*-
# debian/rules file for GNU libc.
# Copyright 1998, 1999 by Joel Klecker <espy@debian.org>
# Copyright 2000 Ben Collins <bcollins@debian.org>
# This "program" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

SHELL=/bin/sh -e

DEB_HOST_GNU_CPU      := $(shell dpkg-architecture -qDEB_HOST_GNU_CPU)
DEB_HOST_GNU_TYPE     := $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
DEB_HOST_GNU_SYSTEM   := $(shell dpkg-architecture -qDEB_HOST_GNU_SYSTEM)
DEB_BUILD_GNU_CPU     := $(shell dpkg-architecture -qDEB_BUILD_GNU_CPU)
DEB_BUILD_GNU_TYPE    := $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)
DEB_BUILD_GNU_SYSTEM  := $(shell dpkg-architecture -qDEB_BUILD_GNU_SYSTEM)

DEB_HOST_GNU_CPU_ALT  :=
DEB_HOST_GNU_TYPE_ALT :=

DEBVERSION:=$(shell LC_ALL=C dpkg-parsechangelog | sed -ne 's/^Version: *\([^2]*\)/\1/p')

mkdir := debian/sysdeps

make_directory = mkdir --parents --mode=0755
INSTALL = install
INSTALL_DATA = $(INSTALL) --mode=0644
INSTALL_PROGRAM = $(INSTALL) --mode=0755
INSTALL_SCRIPT = $(INSTALL) --mode=0755
ifneq ($(DEB_HOST_GNU_TYPE),$(DEB_BUILD_GNU_TYPE))
STRIP = $(DEB_HOST_GNU_TYPE)-strip
else
STRIP = strip
endif

top_srcdir	= $(shell pwd)/
hostdir		= $(top_srcdir)$(DEB_HOST_GNU_TYPE)
stampdir	= $(hostdir)
srcdir		= $(top_srcdir)glibc-$(VERSION)
objdir		= $(hostdir)/obj
tmpdir		= $(hostdir)
install_root	= $(hostdir)/install_root
package_rules	= $(top_srcdir)/debian/packages.d

stamp_unpack := unpacked-source
stamp_patch := patched-source
stamp_configure := $(stampdir)/configured-source
stamp_build := $(stampdir)/compiled-source
stamp_install := $(stampdir)/installed-binaries

ifneq ($(NO_LOG),yes)
log_build   := $(top_srcdir)log-build-$(DEB_HOST_GNU_TYPE)
log_test    := $(top_srcdir)log-test-$(DEB_HOST_GNU_TYPE)
else
log_build   := /dev/tty
log_test    := /dev/tty
endif

include $(mkdir)/sysdeps.mk
include debian/rules.d/source.mk

clean: debian/control setperms
	rm -rf glibc-$(VERSION)
	rm -f debian/libc/DEBIAN/shlibs
	rm -f debian/control.in/libc6 debian/control.in/libc6.1
	rm -f debian/control.in/libc0.3 debian/control.in/libc1
	rm -f debian/control.in/libc0.1
	rm -f debian/files debian/substvars log-*
	rm -f unpacked-source patched-source patched-sourceT -r patched
	rm -f `find debian -name 'libc*' -type l`
	rm -f `find debian -name '*~' -o -name '#*#'`
	rm -f debian/patches/kfreebsd-gnu.dpatch
	-test -d $(DEB_HOST_GNU_TYPE) && rm -rf $(DEB_HOST_GNU_TYPE)

define debian-clean
	rm -f `find debian/$@ -name '*~' -o -name '#*#'`
endef

build: $(stamp_build) $(addsuffix -build,$(opt_packages))
$(stamp_build): $(stamp_configure)
ifeq ($(NO_LOG),)
	@if [ -s $(log_build) ]; then savelog $(log_build); fi
endif
	@echo 'Building GNU C Library for a $(DEB_BUILD_GNU_TYPE) host.'
	date >$(log_build)
	$(MAKE) -C $(objdir) PARALLELMFLAGS="$(PARALLELMFLAGS)" 2>&1 | tee -a $(log_build)
	date >>$(log_build)
	@echo 'Running GNU C Library test suite.'
	$(MAKE) -f debian/rules check
	touch $@

check:
ifeq ($(NO_TEST),)
ifeq ($(NO_LOG),)
	@if [ -s $(log_test) ]; then savelog $(log_test); fi
endif
	$(warning Please check results before uploading in case of test failures.)
	date >$(log_test)
	-$(MAKE) -k SHELL=/bin/bash -C $(objdir) check 2>&1 | tee -a $(log_test)
	date >>$(log_test)
endif

install: $(stamp_install)
$(stamp_install): $(stamp_build)
	$(checkroot)
	$(make_directory) $(install_root)
	$(MAKE) -C $(objdir) install_root=$(install_root) install
	for i in \
		net/if.h \
		netinet/ip.h \
		netinet/in_systm.h \
		sys/socketvar.h \
		sys/param.h \
	; do \
		rm $(install_root)/usr/include/$$i ; \
	done
	touch $@

configure: $(stamp_configure)
$(stamp_configure): $(stamp_unpack) $(stamp_patch)
	$(make_directory) $(objdir) $(stampdir)
	chmod 755 glibc-$(VERSION)/scripts/cpp # XXX Hack!
ifeq ($(DEB_HOST_GNU_SYSTEM),linux)
	@if [ "$(num_headers)" != "1" ]; then \
		echo; \
		echo "Either you have more than one set of kernel headers in /usr/src"; \
		echo "or none at all. Please change that, or specify the proper one using"; \
		echo "the LINUX_SOURCE environment variable."; \
		echo; \
		exit 1; \
	 fi
endif
	rm -f $(objdir)/configparms
	echo "CC = $(CC)"		  >> $(objdir)/configparms
	echo "BUILD_CC = $(BUILD_CC)"	  >> $(objdir)/configparms
	echo "CFLAGS = $(HOST_CFLAGS)"	  >> $(objdir)/configparms
	echo "BUILD_CFLAGS = $(BUILD_CFLAGS)" >> $(objdir)/configparms
	echo "BASH := /bin/bash"	  >> $(objdir)/configparms
	echo "KSH := /bin/bash"		  >> $(objdir)/configparms
	echo "mandir = $(mandir)"	  >> $(objdir)/configparms
	echo "infodir = $(infodir)"	  >> $(objdir)/configparms
	echo "libexecdir = $(libexecdir)" >> $(objdir)/configparms
	echo "LIBGD = no"		  >> $(objdir)/configparms
ifneq ($(DEB_HOST_GNU_SYSTEM),linux)
	echo "slibdir = /lib"		  >> $(objdir)/configparms
	echo "rootsbindir = /sbin"	  >> $(objdir)/configparms
	echo "sysconfdir = /etc"	  >> $(objdir)/configparms
endif
	cd $(objdir) && CC=$(CC) $(srcdir)/configure --host=$(DEB_HOST_GNU_TYPE) \
		--build=$(DEB_BUILD_GNU_TYPE) --prefix=/usr --without-cvs \
		--enable-add-ons="$(add-ons)" $(with_headers) $(extra_config_options)

	touch $@

arch_packages  += $(libc) libc-udeb $(libc)-dev $(libc)-prof $(libc)-dbg \
$(libc)-pic $(addsuffix -pkg,$(opt_packages))

indep_packages = locales $(glibc)-doc

ifeq ($(threads),yes)
# nscd requires pthreads
arch_packages += nscd
endif

print-config:
	@echo "Compiling with debugging symbols: $(DEB_BUILD_OPTION_DEBUG)."
	@echo "Stripping binaries: $(DEB_BUILD_OPTION_STRIP)."
	@echo "Using parallel make: $(DEB_BUILD_OPTION_PARALLEL)."
	@echo "Compiler: $(CC) (`$(CC) --version`)."

binary: binary-arch binary-indep
binary-indep: $(indep_packages)
binary-arch: $(arch_packages)

include $(package_rules)/libc.mk
include $(package_rules)/libc-udeb.mk
include $(package_rules)/libc-dev.mk
include $(package_rules)/libc-dbg.mk
include $(package_rules)/libc-pic.mk
include $(package_rules)/libc-prof.mk
include $(package_rules)/nscd.mk
include $(package_rules)/locales.mk
include $(package_rules)/glibc-doc.mk
include $(package_rules)/optimized.mk
ifeq ($(DEB_HOST_GNU_CPU),sparc)
#include $(package_rules)/sparc64.mk
endif
ifeq ($(DEB_HOST_GNU_CPU),s390)
include $(package_rules)/s390x.mk
endif

setperms: debian/perms
	@for dir in glibc-doc libc libc-* locales nscd; \
	do \
		chmod 0755 debian/$$dir; \
		find debian/$$dir -type f -name p\* | xargs chmod -v 0755; \
	done
	@while read file mode; do \
		case $$file in \#*) continue;; esac; \
		chmod -v $$mode debian/$$file; \
	done < $<

links:
	@if [ ! -L debian/$(libc) ]; then \
		echo "Linking debian/$(libc) -> libc."; \
		ln -sf libc debian/$(libc); \
	fi
	@for pkg in dev dbg prof pic; \
	do \
		if [ ! -L debian/$(libc)-$$pkg -a -d debian/libc-$$pkg ]; then \
			echo "Linking debian/$(libc)-$$pkg -> libc-$$pkg."; \
			ln -sf libc-$$pkg debian/$(libc)-$$pkg; \
		fi \
	done

$(DEB_HOST_GNU_TYPE):
	mkdir $@

unpack: $(stamp_unpack)
$(stamp_unpack): prep.sh
	$(SHELL) prep.sh
	$(MAKE) -f debian/rules links
	$(MAKE) -f debian/rules setperms
	touch $@

include debian/rules.d/shlibs.mk
include debian/rules.d/control.mk
include debian/rules.d/patch.mk

define checkroot
	@test root = "`whoami`" || (echo Need root privileges; exit 1)
endef

.PHONY: binary binary-arch binary-indep clean print-config
