#! /bin/sh -e

# All lines beginning with `# DP:' are a description of the patch.
# DP: Description: /usr/include/assert.h
# DP:	One must be allowed to include <assert.h> multiple times with different
# DP:	values for NDEBUG, so the file is not protected against multiple
# DP:	inclusions.  Unfortunately this means that the declarations for
# DP:	__assert_fail() and the like may occur multiple times in a compilation
# DP:	unit, causing gcc to issue a batch of warnings.
# DP:	I believe this can be fixed by protecting the declarations (but only
# DP:	those declarations) against repetition.
# DP: Author: Jeroen T. Vermeulen <jtv@xs4all.nl>
# DP: Upstream status: Not submitted
# DP: Status Details: Plan to submit
# DP: Date: 2003-01-01

if [ $# -ne 2 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch) patch -d "$2" -f --no-backup-if-mismatch -p0 < $0;;
    -unpatch) patch -d "$2" -f --no-backup-if-mismatch -R -p0 < $0;;
    *)
	echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
	exit 1
esac
exit 0

# append the patch here and adjust the -p? flag in the patch calls.
--- assert/assert.h	2002-10-13 15:24:18.000000000 +0200
+++ assert/assert.h	2002-10-13 15:23:57.000000000 +0200
@@ -62,6 +62,8 @@
 
 #else /* Not NDEBUG.  */
 
+#ifndef _ASSERT_H_DECLS
+#define _ASSERT_H_DECLS
 __BEGIN_DECLS
 
 /* This prints an "Assertion failed" message and aborts.  */
@@ -83,6 +85,7 @@
 
 
 __END_DECLS
+#endif /* Not _ASSERT_H_DECLS */
 
 # define assert(expr) \
   (__ASSERT_VOID_CAST ((expr) ? 0 :					      \
