---
 sys/amd64/include/segments.h   |   16 +++++-----
 sys/dev/ata/atapi-cd.h         |    2 -
 sys/dev/ciss/cissio.h          |   28 ++++++++---------
 sys/net80211/ieee80211.h       |   64 ++++++++++++++++++++---------------------
 sys/net80211/ieee80211_ioctl.h |    2 -
 sys/sys/ata.h                  |    6 +--
 6 files changed, 59 insertions(+), 59 deletions(-)

--- a/sys/net80211/ieee80211.h
+++ b/sys/net80211/ieee80211.h
@@ -1,4 +1,4 @@
-/*-
+ /*-
  * Copyright (c) 2001 Atsushi Onoe
  * Copyright (c) 2002-2009 Sam Leffler, Errno Consulting
  * All rights reserved.
@@ -47,7 +47,7 @@
 	uint8_t		i_service;
 	uint16_t	i_length;
 	uint16_t	i_crc;
-} __packed;
+} __attribute__((__packed__));
 
 #define IEEE80211_PLCP_SFD      0xF3A0 
 #define IEEE80211_PLCP_SERVICE  0x00
@@ -69,7 +69,7 @@
 	uint8_t		i_seq[2];
 	/* possibly followed by addr4[IEEE80211_ADDR_LEN]; */
 	/* see below */
-} __packed;
+} __attribute__((__packed__));
 
 struct ieee80211_qosframe {
 	uint8_t		i_fc[2];
@@ -81,7 +81,7 @@
 	uint8_t		i_qos[2];
 	/* possibly followed by addr4[IEEE80211_ADDR_LEN]; */
 	/* see below */
-} __packed;
+} __attribute__((__packed__));
 
 struct ieee80211_qoscntl {
 	uint8_t		i_qos[2];
@@ -95,7 +95,7 @@
 	uint8_t		i_addr3[IEEE80211_ADDR_LEN];
 	uint8_t		i_seq[2];
 	uint8_t		i_addr4[IEEE80211_ADDR_LEN];
-} __packed;
+} __attribute__((__packed__));
 
 
 struct ieee80211_qosframe_addr4 {
@@ -107,7 +107,7 @@
 	uint8_t		i_seq[2];
 	uint8_t		i_addr4[IEEE80211_ADDR_LEN];
 	uint8_t		i_qos[2];
-} __packed;
+} __attribute__((__packed__));
 
 #define	IEEE80211_FC0_VERSION_MASK		0x03
 #define	IEEE80211_FC0_VERSION_SHIFT		0
@@ -219,7 +219,7 @@
 	uint8_t		wme_subtype;	/* OUI subtype */
 	uint8_t		wme_version;	/* spec revision */
 	uint8_t		wme_info;	/* QoS info */
-} __packed;
+} __attribute__((__packed__));
 
 /*
  * WME/802.11e Tspec Element
@@ -247,7 +247,7 @@
 	uint8_t		ts_delay[4];
 	uint8_t		ts_surplus[2];
 	uint8_t		ts_medium_time[2];
-} __packed;
+} __attribute__((__packed__));
 
 /*
  * WME AC parameter field
@@ -256,7 +256,7 @@
 	uint8_t		acp_aci_aifsn;
 	uint8_t		acp_logcwminmax;
 	uint16_t	acp_txop;
-} __packed;
+} __attribute__((__packed__));
 
 #define WME_NUM_AC		4	/* 4 AC categories */
 #define	WME_NUM_TID		16	/* 16 tids */
@@ -298,7 +298,7 @@
 #define	WME_QOSINFO_COUNT	0x0f	/* Mask for param count field */
 	uint8_t		param_reserved;
 	struct ieee80211_wme_acparams	params_acParams[WME_NUM_AC];
-} __packed;
+} __attribute__((__packed__));
 
 /*
  * Management Notification Frame
@@ -308,7 +308,7 @@
 	uint8_t		mnf_action;
 	uint8_t		mnf_dialog;
 	uint8_t		mnf_status;
-} __packed;
+} __attribute__((__packed__));
 #define	MNF_SETUP_REQ	0
 #define	MNF_SETUP_RESP	1
 #define	MNF_TEARDOWN	2
@@ -320,7 +320,7 @@
 struct ieee80211_action {
 	uint8_t		ia_category;
 	uint8_t		ia_action;
-} __packed;
+} __attribute__((__packed__));
 
 #define	IEEE80211_ACTION_CAT_SM		0	/* Spectrum Management */
 #define	IEEE80211_ACTION_CAT_QOS	1	/* QoS */
@@ -336,7 +336,7 @@
 struct ieee80211_action_ht_txchwidth {
 	struct ieee80211_action	at_header;
 	uint8_t		at_chwidth;	
-} __packed;
+} __attribute__((__packed__));
 
 #define	IEEE80211_A_HT_TXCHWIDTH_20	0
 #define	IEEE80211_A_HT_TXCHWIDTH_2040	1
@@ -345,7 +345,7 @@
 struct ieee80211_action_ht_mimopowersave {
 	struct ieee80211_action am_header;
 	uint8_t		am_control;
-} __packed;
+} __attribute__((__packed__));
 
 #define	IEEE80211_A_HT_MIMOPWRSAVE_ENA		0x01	/* PS enabled */
 #define	IEEE80211_A_HT_MIMOPWRSAVE_MODE		0x02
@@ -389,7 +389,7 @@
 	uint16_t	rq_baparamset;
 	uint16_t	rq_batimeout;		/* in TUs */
 	uint16_t	rq_baseqctl;
-} __packed;
+} __attribute__((__packed__));
 
 /* BA - ADDBA response */
 struct ieee80211_action_ba_addbaresponse {
@@ -398,14 +398,14 @@
 	uint16_t	rs_statuscode;
 	uint16_t	rs_baparamset; 
 	uint16_t	rs_batimeout;		/* in TUs */
-} __packed;
+} __attribute__((__packed__));
 
 /* BA - DELBA */
 struct ieee80211_action_ba_delba {
 	struct ieee80211_action dl_header;
 	uint16_t	dl_baparamset;
 	uint16_t	dl_reasoncode;
-} __packed;
+} __attribute__((__packed__));
 
 /* BAR Control */
 #define	IEEE80211_BAR_TID	0xf000		/* TID */
@@ -421,7 +421,7 @@
 struct ieee80211_ba_request {
 	uint16_t	rq_barctl;
 	uint16_t	rq_barseqctl;
-} __packed;
+} __attribute__((__packed__));
 
 /*
  * Control frames.
@@ -432,7 +432,7 @@
 	uint8_t		i_addr1[IEEE80211_ADDR_LEN];
 	uint8_t		i_addr2[IEEE80211_ADDR_LEN];
 	/* FCS */
-} __packed;
+} __attribute__((__packed__));
 
 struct ieee80211_frame_rts {
 	uint8_t		i_fc[2];
@@ -440,21 +440,21 @@
 	uint8_t		i_ra[IEEE80211_ADDR_LEN];
 	uint8_t		i_ta[IEEE80211_ADDR_LEN];
 	/* FCS */
-} __packed;
+} __attribute__((__packed__));
 
 struct ieee80211_frame_cts {
 	uint8_t		i_fc[2];
 	uint8_t		i_dur[2];
 	uint8_t		i_ra[IEEE80211_ADDR_LEN];
 	/* FCS */
-} __packed;
+} __attribute__((__packed__));
 
 struct ieee80211_frame_ack {
 	uint8_t		i_fc[2];
 	uint8_t		i_dur[2];
 	uint8_t		i_ra[IEEE80211_ADDR_LEN];
 	/* FCS */
-} __packed;
+} __attribute__((__packed__));
 
 struct ieee80211_frame_pspoll {
 	uint8_t		i_fc[2];
@@ -462,7 +462,7 @@
 	uint8_t		i_bssid[IEEE80211_ADDR_LEN];
 	uint8_t		i_ta[IEEE80211_ADDR_LEN];
 	/* FCS */
-} __packed;
+} __attribute__((__packed__));
 
 struct ieee80211_frame_cfend {		/* NB: also CF-End+CF-Ack */
 	uint8_t		i_fc[2];
@@ -470,7 +470,7 @@
 	uint8_t		i_ra[IEEE80211_ADDR_LEN];
 	uint8_t		i_bssid[IEEE80211_ADDR_LEN];
 	/* FCS */
-} __packed;
+} __attribute__((__packed__));
 
 struct ieee80211_frame_bar {
 	uint8_t		i_fc[2];
@@ -480,7 +480,7 @@
 	uint16_t	i_ctl;
 	uint16_t	i_seq;
 	/* FCS */
-} __packed;
+} __attribute__((__packed__));
 
 /*
  * BEACON management packets
@@ -537,7 +537,7 @@
 	uint16_t	wpa_caps;	/* 802.11i capabilities */
 	uint16_t	wpa_pmkidcnt;	/* 802.11i pmkid count */
 	uint16_t	wpa_pmkids[8];	/* 802.11i pmkids */
-} __packed;
+} __attribute__((__packed__));
 
 /*
  * 802.11n HT Capability IE
@@ -552,7 +552,7 @@
 	uint16_t	hc_extcap;		/* extended HT capabilities */
 	uint32_t	hc_txbf;		/* txbf capabilities */
 	uint8_t		hc_antenna;		/* antenna capabilities */
-} __packed;
+} __attribute__((__packed__));
 
 /* HT capability flags (ht_cap) */
 #define	IEEE80211_HTCAP_LDPC		0x0001	/* LDPC supported */
@@ -632,7 +632,7 @@
 	uint8_t		hi_byte3;		/* ht ie byte 3 */
 	uint16_t	hi_byte45;		/* ht ie bytes 4+5 */
 	uint8_t 	hi_basicmcsset[16]; 	/* basic MCS set */
-} __packed;
+} __attribute__((__packed__));
 
 /* byte1 */
 #define	IEEE80211_HTINFO_2NDCHAN	0x03	/* secondary/ext chan offset */
@@ -741,7 +741,7 @@
 	uint8_t		tim_period;		/* DTIM period */
 	uint8_t		tim_bitctl;		/* bitmap control */
 	uint8_t		tim_bitmap[1];		/* variable-length bitmap */
-} __packed;
+} __attribute__((__packed__));
 
 struct ieee80211_country_ie {
 	uint8_t		ie;			/* IEEE80211_ELEMID_COUNTRY */
@@ -751,8 +751,8 @@
 		uint8_t schan;			/* starting channel */
 		uint8_t nchan;			/* number channels */
 		uint8_t maxtxpwr;		/* tx power cap */
-	} __packed band[1];			/* sub bands (NB: var size) */
-} __packed;
+	} __attribute__((__packed__)) band[1];	/* sub bands (NB: var size) */
+} __attribute__((__packed__));
 
 #define	IEEE80211_COUNTRY_MAX_BANDS	84	/* max possible bands */
 #define	IEEE80211_COUNTRY_MAX_SIZE \
@@ -767,7 +767,7 @@
 	uint8_t		csa_mode;		/* Channel Switch Mode */
 	uint8_t		csa_newchan;		/* New Channel Number */
 	uint8_t		csa_count;		/* Channel Switch Count */
-} __packed;
+} __attribute__((__packed__));
 
 /*
  * Note the min acceptable CSA count is used to guard against
--- a/sys/sys/ata.h
+++ b/sys/sys/ata.h
@@ -186,7 +186,7 @@
 #define ATA_SUPPORT_WRITEDMAQFUAEXT	0x0080
 #define ATA_SUPPORT_64BITWWN		0x0100
 #define ATA_SUPPORT_UNLOAD		0x2000
-	} __packed support, enabled;
+	} __attribute__((__packed__)) support, enabled;
 
 /*088*/ u_int16_t       udmamodes;              /* UltraDMA modes */
 /*089*/ u_int16_t       erase_time;
@@ -259,7 +259,7 @@
 /*223*/ u_int16_t       transport_minor;
 	u_int16_t       reserved224[31];
 /*255*/ u_int16_t       integrity;
-} __packed;
+} __attribute__((__packed__));
 
 
 /* ATA transfer modes */
@@ -475,7 +475,7 @@
 	
     u_int8_t	specific1;		/* sense key specific */
     u_int8_t	specific2;		/* sense key specific */
-} __packed;
+} __attribute__((__packed__));
 
 struct ata_ioc_request {
     union {
--- a/sys/dev/ata/atapi-cd.h
+++ b/sys/dev/ata/atapi-cd.h
@@ -267,7 +267,7 @@
     u_int8_t    vendor_specific_byte1;
     u_int8_t    vendor_specific_byte2;
     u_int8_t    vendor_specific_byte3;
-} __packed;
+} __attribute__((__packed__));
 
 /* CDROM Read Track Information structure */
 struct acd_track_info {
--- a/sys/dev/ciss/cissio.h
+++ b/sys/dev/ciss/cissio.h
@@ -109,18 +109,18 @@
 	u_int8_t	Dev;
 	u_int8_t	Bus:6;
 	u_int8_t	Mode:2;
-    } __packed PeripDev;
+    } __attribute__((__packed__)) PeripDev;
     struct {
 	u_int8_t	DevLSB;
 	u_int8_t	DevMSB:6;
 	u_int8_t	Mode:2;
-    } __packed LogDev;
+    } __attribute__((__packed__)) LogDev;
     struct {
 	u_int8_t	Dev:5;
 	u_int8_t	Bus:3;
 	u_int8_t	Targ:6;
 	u_int8_t	Mode:2;
-    } __packed LogUnit;
+    } __attribute__((__packed__)) LogUnit;
 } SCSI3Addr_struct;
 
 typedef struct {
@@ -128,20 +128,20 @@
     u_int32_t		Bus:6;
     u_int32_t		Mode:2;
     SCSI3Addr_struct	Target[2];
-} __packed PhysDevAddr_struct;
+} __attribute__((__packed__)) PhysDevAddr_struct;
   
 typedef struct {
     u_int32_t		VolId:30;
     u_int32_t		Mode:2;
     u_int8_t		reserved[4];
-} __packed LogDevAddr_struct;
+} __attribute__((__packed__)) LogDevAddr_struct;
 
 typedef union {
     u_int8_t		LunAddrBytes[8];
     SCSI3Addr_struct	SCSI3Lun[4];
     PhysDevAddr_struct	PhysDev;
     LogDevAddr_struct	LogDev;
-} __packed LUNAddr_struct;
+} __attribute__((__packed__)) LUNAddr_struct;
 
 typedef struct {
     u_int8_t	CDBLen;
@@ -149,24 +149,24 @@
 	u_int8_t	Type:3;
 	u_int8_t	Attribute:3;
 	u_int8_t	Direction:2;
-    } __packed Type;
+    } __attribute__((__packed__)) Type;
     u_int16_t	Timeout;
     u_int8_t	CDB[16];
-} __packed RequestBlock_struct;
+} __attribute__((__packed__)) RequestBlock_struct;
 
 typedef union {
     struct {
 	u_int8_t	Reserved[3];
 	u_int8_t	Type;
 	u_int32_t	ErrorInfo;
-    } __packed Common_Info;
+    } __attribute__((__packed__)) Common_Info;
     struct {
 	u_int8_t	Reserved[2];
 	u_int8_t	offense_size;
 	u_int8_t	offense_num;
 	u_int32_t	offense_value;
-    } __packed Invalid_Cmd;
-} __packed MoreErrInfo_struct;
+    } __attribute__((__packed__)) Invalid_Cmd;
+} __attribute__((__packed__)) MoreErrInfo_struct;
 
 typedef struct {
     u_int8_t		ScsiStatus;
@@ -175,7 +175,7 @@
     u_int32_t		ResidualCnt;
     MoreErrInfo_struct	MoreErrInfo;
     u_int8_t		SenseInfo[SENSEINFOBYTES];
-} __packed ErrorInfo_struct;
+} __attribute__((__packed__)) ErrorInfo_struct;
 
 typedef struct {
     LUNAddr_struct	LUN_info;	/* 8 */
@@ -183,7 +183,7 @@
     ErrorInfo_struct	error_info;	/* 48 */
     u_int16_t		buf_size;	/* 2 */
     u_int8_t		*buf;		/* 4 */
-} __packed IOCTL_Command_struct;
+} __attribute__((__packed__)) IOCTL_Command_struct;
 
 #ifdef __amd64__
 typedef struct {
@@ -192,7 +192,7 @@
     ErrorInfo_struct	error_info;	/* 48 */
     u_int16_t		buf_size;	/* 2 */
     u_int32_t		buf;		/* 4 */
-} __packed IOCTL_Command_struct32;
+} __attribute__((__packed__)) IOCTL_Command_struct32;
 #endif
 
 /************************************************************************
--- a/sys/amd64/include/segments.h
+++ b/sys/amd64/include/segments.h
@@ -72,7 +72,7 @@
 	u_int64_t sd_def32:1;		/* default 32 vs 16 bit size */
 	u_int64_t sd_gran:1;		/* limit granularity (byte/page units)*/
 	u_int64_t sd_hibase:8;		/* segment base address  (msb) */
-} __packed;
+} __attribute__((__packed__));
 
 #define	USD_GETBASE(sd)		(((sd)->sd_lobase) | (sd)->sd_hibase << 24) 
 #define	USD_SETBASE(sd, b)	(sd)->sd_lobase = (b); 	\
@@ -93,11 +93,11 @@
 	u_int64_t sd_hilimit:4;		/* segment extent (msb) */
 	u_int64_t sd_xx0:3;		/* unused */
 	u_int64_t sd_gran:1;		/* limit granularity (byte/page units)*/
-	u_int64_t sd_hibase:40 __packed;/* segment base address  (msb) */
+	u_int64_t sd_hibase:40 __attribute__((__packed__));/* segment base address  (msb) */
 	u_int64_t sd_xx1:8;
 	u_int64_t sd_mbz:5;		/* MUST be zero */
 	u_int64_t sd_xx2:19;
-} __packed;
+} __attribute__((__packed__));
 
 /*
  * Gate descriptors (e.g. indirect descriptors, trap, interrupt etc. 128 bit)
@@ -111,9 +111,9 @@
 	u_int64_t gd_type:5;		/* segment type */
 	u_int64_t gd_dpl:2;		/* segment descriptor priority level */
 	u_int64_t gd_p:1;		/* segment descriptor present */
-	u_int64_t gd_hioffset:48 __packed;	/* gate offset (msb) */
+	u_int64_t gd_hioffset:48 __attribute__((__packed__));	/* gate offset (msb) */
 	u_int64_t sd_xx1:32;
-} __packed;
+} __attribute__((__packed__));
 
 /*
  * Generic descriptor
@@ -174,15 +174,15 @@
 	unsigned long ssd_long:1;	/* long mode (for %cs) */
 	unsigned long ssd_def32:1;	/* default 32 vs 16 bit size */
 	unsigned long ssd_gran:1;	/* limit granularity (byte/page units)*/
-} __packed;
+} __attribute__((__packed__));
 
 /*
  * region descriptors, used to load gdt/idt tables before segments yet exist.
  */
 struct region_descriptor {
 	unsigned long rd_limit:16;		/* segment extent */
-	unsigned long rd_base:64 __packed;	/* base address  */
-} __packed;
+	unsigned long rd_base:64 __attribute__((__packed__));	/* base address  */
+} __attribute__((__packed__));
 
 /*
  * Size of IDT table
--- a/sys/net80211/ieee80211_ioctl.h
+++ b/sys/net80211/ieee80211_ioctl.h
@@ -321,7 +321,7 @@
 
 struct ieee80211req_maclist {
 	uint8_t		ml_macaddr[IEEE80211_ADDR_LEN];
-} __packed;
+} __attribute__((__packed__));
 
 /*
  * Mesh Routing Table Operations.
