--- a/sys/amd64/include/atomic.h
+++ b/sys/amd64/include/atomic.h
@@ -71,7 +71,7 @@
  * Kernel modules call real functions which are built into the kernel.
  * This allows kernel modules to be portable between UP and SMP systems.
  */
-#if defined(KLD_MODULE) || !defined(__GNUCLIKE_ASM)
+#if defined(KLD_MODULE) || !defined(__GNUC__)
 #define	ATOMIC_ASM(NAME, TYPE, OP, CONS, V)			\
 void atomic_##NAME##_##TYPE(volatile u_##TYPE *p, u_##TYPE v);	\
 void atomic_##NAME##_barr_##TYPE(volatile u_##TYPE *p, u_##TYPE v)
@@ -303,7 +303,7 @@
 #ifndef WANT_FUNCTIONS
 
 /* Read the current value and store a zero in the destination. */
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 
 static __inline u_int
 atomic_readandclear_int(volatile u_int *addr)
--- a/sys/amd64/include/bus.h
+++ b/sys/amd64/include/bus.h
@@ -272,7 +272,7 @@
 	if (tag == AMD64_BUS_SPACE_IO)
 		insb(bsh + offset, addr, count);
 	else {
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 		1:	movb (%2),%%al				\n\
@@ -293,7 +293,7 @@
 	if (tag == AMD64_BUS_SPACE_IO)
 		insw(bsh + offset, addr, count);
 	else {
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 		1:	movw (%2),%%ax				\n\
@@ -314,7 +314,7 @@
 	if (tag == AMD64_BUS_SPACE_IO)
 		insl(bsh + offset, addr, count);
 	else {
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 		1:	movl (%2),%%eax				\n\
@@ -359,7 +359,7 @@
 
 	if (tag == AMD64_BUS_SPACE_IO) {
 		int _port_ = bsh + offset;
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 		1:	inb %w2,%%al				\n\
@@ -372,7 +372,7 @@
 #endif
 	} else {
 		bus_space_handle_t _port_ = bsh + offset;
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 			repne					\n\
@@ -391,7 +391,7 @@
 
 	if (tag == AMD64_BUS_SPACE_IO) {
 		int _port_ = bsh + offset;
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 		1:	inw %w2,%%ax				\n\
@@ -404,7 +404,7 @@
 #endif
 	} else {
 		bus_space_handle_t _port_ = bsh + offset;
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 			repne					\n\
@@ -423,7 +423,7 @@
 
 	if (tag == AMD64_BUS_SPACE_IO) {
 		int _port_ = bsh + offset;
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 		1:	inl %w2,%%eax				\n\
@@ -436,7 +436,7 @@
 #endif
 	} else {
 		bus_space_handle_t _port_ = bsh + offset;
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 			repne					\n\
@@ -536,7 +536,7 @@
 	if (tag == AMD64_BUS_SPACE_IO)
 		outsb(bsh + offset, addr, count);
 	else {
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 		1:	lodsb					\n\
@@ -557,7 +557,7 @@
 	if (tag == AMD64_BUS_SPACE_IO)
 		outsw(bsh + offset, addr, count);
 	else {
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 		1:	lodsw					\n\
@@ -578,7 +578,7 @@
 	if (tag == AMD64_BUS_SPACE_IO)
 		outsl(bsh + offset, addr, count);
 	else {
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 		1:	lodsl					\n\
@@ -624,7 +624,7 @@
 
 	if (tag == AMD64_BUS_SPACE_IO) {
 		int _port_ = bsh + offset;
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 		1:	lodsb					\n\
@@ -637,7 +637,7 @@
 #endif
 	} else {
 		bus_space_handle_t _port_ = bsh + offset;
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 			repne					\n\
@@ -656,7 +656,7 @@
 
 	if (tag == AMD64_BUS_SPACE_IO) {
 		int _port_ = bsh + offset;
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 		1:	lodsw					\n\
@@ -669,7 +669,7 @@
 #endif
 	} else {
 		bus_space_handle_t _port_ = bsh + offset;
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 			repne					\n\
@@ -688,7 +688,7 @@
 
 	if (tag == AMD64_BUS_SPACE_IO) {
 		int _port_ = bsh + offset;
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 		1:	lodsl					\n\
@@ -701,7 +701,7 @@
 #endif
 	} else {
 		bus_space_handle_t _port_ = bsh + offset;
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 			repne					\n\
@@ -996,7 +996,7 @@
 bus_space_barrier(bus_space_tag_t tag __unused, bus_space_handle_t bsh __unused,
 		  bus_size_t offset __unused, bus_size_t len __unused, int flags)
 {
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 	if (flags & BUS_SPACE_BARRIER_READ)
 		__asm __volatile("lock; addl $0,0(%%rsp)" : : : "memory");
 	else
--- a/sys/amd64/include/cpufunc.h
+++ b/sys/amd64/include/cpufunc.h
@@ -55,7 +55,7 @@
 #define writel(va, d)	(*(volatile u_int32_t *) (va) = (d))
 #define writeq(va, d)	(*(volatile u_int64_t *) (va) = (d))
 
-#if defined(__GNUCLIKE_ASM) && defined(__CC_SUPPORTS___INLINE)
+#if defined(__GNUC__) && defined(__CC_SUPPORTS___INLINE)
 
 static __inline void
 breakpoint(void)
--- a/sys/amd64/include/endian.h
+++ b/sys/amd64/include/endian.h
@@ -67,7 +67,7 @@
 #define	BYTE_ORDER	_BYTE_ORDER
 #endif
 
-#if defined(__GNUCLIKE_ASM) && defined(__GNUCLIKE_BUILTIN_CONSTANT_P)
+#if defined(__GNUC__)
 
 #define __byte_swap_int_var(x) \
 __extension__ ({ register __uint32_t __X = (x); \
--- a/sys/amd64/include/ieeefp.h
+++ b/sys/amd64/include/ieeefp.h
@@ -122,7 +122,7 @@
 #define	SSE_RND_OFF	13	/* rounding control offset */
 #define	SSE_FZ_OFF	15	/* flush to zero offset */
 
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 
 #define	__fldcw(addr)	__asm __volatile("fldcw %0" : : "m" (*(addr)))
 #define	__fldenv(addr)	__asm __volatile("fldenv %0" : : "m" (*(addr)))
@@ -277,7 +277,7 @@
 
 #endif /* __GNUCLIKE_ASM */
 
-#if !defined(__IEEEFP_NOINLINES__) && defined(__GNUCLIKE_ASM)
+#if !defined(__IEEEFP_NOINLINES__) && defined(__GNUC__)
 
 #define	fpgetmask()	__fpgetmask()
 #define	fpgetprec()	__fpgetprec()
--- a/sys/amd64/include/pcpu.h
+++ b/sys/amd64/include/pcpu.h
@@ -91,7 +91,7 @@
 #define	PCPU_PTR(member)	(&pcpup->pc_ ## member)
 #define	PCPU_SET(member, val)	(pcpup->pc_ ## member = (val))
 
-#elif defined(__GNUCLIKE_ASM) && defined(__GNUCLIKE___TYPEOF)
+#elif defined(__GNUC__) && defined(__GNUC__)
 
 /*
  * Evaluates to the byte offset of the per-cpu variable name.
--- a/sys/amd64/include/profile.h
+++ b/sys/amd64/include/profile.h
@@ -57,7 +57,7 @@
 #define	MCOUNT_DECL(s)
 #define	MCOUNT_ENTER(s)
 #define	MCOUNT_EXIT(s)
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 #define	MCOUNT_OVERHEAD(label)						\
 	__asm __volatile("pushq %0; call __mcount; popq %%rcx"		\
 			 :						\
@@ -112,7 +112,7 @@
 static void _mcount(uintfptr_t frompc, uintfptr_t selfpc) __used; \
 static void _mcount
 
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 #define	MCOUNT __asm("			\n\
 	.text				\n\
 	.p2align 4,0x90			\n\
@@ -191,7 +191,7 @@
 #include <sys/cdefs.h>
 
 __BEGIN_DECLS
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 void	mcount(void) __asm(".mcount");
 #endif
 __END_DECLS
--- a/sys/amd64/include/stdarg.h
+++ b/sys/amd64/include/stdarg.h
@@ -39,7 +39,7 @@
 typedef	__va_list	va_list;
 #endif
 
-#ifdef __GNUCLIKE_BUILTIN_STDARG
+#ifdef __GNUC__
 
 #define	va_start(ap, last) \
 	__builtin_va_start((ap), (last))
--- a/sys/amd64/include/_types.h
+++ b/sys/amd64/include/_types.h
@@ -110,7 +110,7 @@
 /*
  * Unusual type definitions.
  */
-#ifdef __GNUCLIKE_BUILTIN_VARARGS
+#ifdef __GNUC__
 typedef	__builtin_va_list	__va_list;	/* internally known to gcc */
 #elif defined(lint)
 typedef	char *			__va_list;	/* pretend */
--- a/sys/amd64/include/varargs.h
+++ b/sys/amd64/include/varargs.h
@@ -47,7 +47,7 @@
 #error this file needs sys/cdefs.h as a prerequisite
 #endif
 
-#ifdef __GNUCLIKE_BUILTIN_VARARGS
+#ifdef __GNUC__
 
 #include <sys/_types.h>
 
@@ -71,7 +71,7 @@
 #define	__va_size(type) \
 	(((sizeof(type) + sizeof(int) - 1) / sizeof(int)) * sizeof(int))
 
-#if defined(__GNUCLIKE_BUILTIN_VAALIST)
+#if defined(__GNUC__)
 #define	va_alist	__builtin_va_alist
 #endif
 #define	va_dcl	int va_alist; ...
--- a/sys/i386/include/atomic.h
+++ b/sys/i386/include/atomic.h
@@ -71,7 +71,7 @@
  * Kernel modules call real functions which are built into the kernel.
  * This allows kernel modules to be portable between UP and SMP systems.
  */
-#if defined(KLD_MODULE) || !defined(__GNUCLIKE_ASM)
+#if defined(KLD_MODULE) || !defined(__GNUC__)
 #define	ATOMIC_ASM(NAME, TYPE, OP, CONS, V)			\
 void atomic_##NAME##_##TYPE(volatile u_##TYPE *p, u_##TYPE v);	\
 void atomic_##NAME##_barr_##TYPE(volatile u_##TYPE *p, u_##TYPE v)
@@ -307,7 +307,7 @@
 }
 
 /* Read the current value and store a zero in the destination. */
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 
 static __inline u_int
 atomic_readandclear_int(volatile u_int *addr)
--- a/sys/i386/include/bus.h
+++ b/sys/i386/include/bus.h
@@ -276,7 +276,7 @@
 	if (tag == I386_BUS_SPACE_IO)
 		insb(bsh + offset, addr, count);
 	else {
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 		1:	movb (%2),%%al				\n\
@@ -301,7 +301,7 @@
 	if (tag == I386_BUS_SPACE_IO)
 		insw(bsh + offset, addr, count);
 	else {
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 		1:	movw (%2),%%ax				\n\
@@ -326,7 +326,7 @@
 	if (tag == I386_BUS_SPACE_IO)
 		insl(bsh + offset, addr, count);
 	else {
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 		1:	movl (%2),%%eax				\n\
@@ -375,7 +375,7 @@
 
 	if (tag == I386_BUS_SPACE_IO) {
 		int _port_ = bsh + offset;
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 		1:	inb %w2,%%al				\n\
@@ -392,7 +392,7 @@
 #endif
 	} else {
 		int _port_ = bsh + offset;
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 			repne					\n\
@@ -415,7 +415,7 @@
 
 	if (tag == I386_BUS_SPACE_IO) {
 		int _port_ = bsh + offset;
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 		1:	inw %w2,%%ax				\n\
@@ -432,7 +432,7 @@
 #endif
 	} else {
 		int _port_ = bsh + offset;
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 			repne					\n\
@@ -455,7 +455,7 @@
 
 	if (tag == I386_BUS_SPACE_IO) {
 		int _port_ = bsh + offset;
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 		1:	inl %w2,%%eax				\n\
@@ -472,7 +472,7 @@
 #endif
 	} else {
 		int _port_ = bsh + offset;
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 			repne					\n\
@@ -576,7 +576,7 @@
 	if (tag == I386_BUS_SPACE_IO)
 		outsb(bsh + offset, addr, count);
 	else {
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 		1:	lodsb					\n\
@@ -601,7 +601,7 @@
 	if (tag == I386_BUS_SPACE_IO)
 		outsw(bsh + offset, addr, count);
 	else {
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 		1:	lodsw					\n\
@@ -626,7 +626,7 @@
 	if (tag == I386_BUS_SPACE_IO)
 		outsl(bsh + offset, addr, count);
 	else {
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 		1:	lodsl					\n\
@@ -676,7 +676,7 @@
 
 	if (tag == I386_BUS_SPACE_IO) {
 		int _port_ = bsh + offset;
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 		1:	lodsb					\n\
@@ -693,7 +693,7 @@
 #endif
 	} else {
 		int _port_ = bsh + offset;
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 			repne					\n\
@@ -716,7 +716,7 @@
 
 	if (tag == I386_BUS_SPACE_IO) {
 		int _port_ = bsh + offset;
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 		1:	lodsw					\n\
@@ -733,7 +733,7 @@
 #endif
 	} else {
 		int _port_ = bsh + offset;
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 			repne					\n\
@@ -756,7 +756,7 @@
 
 	if (tag == I386_BUS_SPACE_IO) {
 		int _port_ = bsh + offset;
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 		1:	lodsl					\n\
@@ -773,7 +773,7 @@
 #endif
 	} else {
 		int _port_ = bsh + offset;
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 		__asm __volatile("				\n\
 			cld					\n\
 			repne					\n\
@@ -1072,7 +1072,7 @@
 bus_space_barrier(bus_space_tag_t tag __unused, bus_space_handle_t bsh __unused,
 		  bus_size_t offset __unused, bus_size_t len __unused, int flags)
 {
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 	if (flags & BUS_SPACE_BARRIER_READ)
 		__asm __volatile("lock; addl $0,0(%%esp)" : : : "memory");
 	else
--- a/sys/i386/include/cpufunc.h
+++ b/sys/i386/include/cpufunc.h
@@ -65,7 +65,7 @@
 #define writew(va, d)	(*(volatile u_int16_t *) (va) = (d))
 #define writel(va, d)	(*(volatile u_int32_t *) (va) = (d))
 
-#if defined(__GNUCLIKE_ASM) && defined(__CC_SUPPORTS___INLINE)
+#if defined(__GNUC__) && defined(__CC_SUPPORTS___INLINE)
 
 static __inline void
 breakpoint(void)
--- a/sys/i386/include/endian.h
+++ b/sys/i386/include/endian.h
@@ -67,7 +67,7 @@
 #define	BYTE_ORDER	_BYTE_ORDER
 #endif
 
-#if defined(__GNUCLIKE_ASM) && defined(__GNUCLIKE_BUILTIN_CONSTANT_P)
+#if defined(__GNUC__)
 
 #define __byte_swap_int_var(x) \
 __extension__ ({ register __uint32_t __X = (x); \
--- a/sys/i386/include/ieeefp.h
+++ b/sys/i386/include/ieeefp.h
@@ -104,7 +104,7 @@
  */
 #define FP_STKY_OFF	0	/* sticky flags offset */
 
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 
 #define	__fldcw(addr)	__asm __volatile("fldcw %0" : : "m" (*(addr)))
 #define	__fldenv(addr)	__asm __volatile("fldenv %0" : : "m" (*(addr)))
--- a/sys/i386/include/in_cksum.h
+++ b/sys/i386/include/in_cksum.h
@@ -53,7 +53,7 @@
  * in the normal case (where there are no options and the header length is
  * therefore always exactly five 32-bit words.
  */
-#if defined(__GNUCLIKE_ASM) && !defined(__INTEL_COMPILER)
+#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
 static __inline u_int
 in_cksum_hdr(const struct ip *ip)
 {
@@ -131,7 +131,7 @@
 #endif
 
 #ifdef _KERNEL
-#if !defined(__GNUCLIKE_ASM) || defined(__INTEL_COMPILER)
+#if !defined(__GNUC__) || defined(__INTEL_COMPILER)
 u_int in_cksum_hdr(const struct ip *ip);
 u_short in_addword(u_short sum, u_short b);
 u_short in_pseudo(u_int sum, u_int b, u_int c);
--- a/sys/i386/include/pcpu.h
+++ b/sys/i386/include/pcpu.h
@@ -103,7 +103,7 @@
 #define	PCPU_PTR(member)	(&pcpup->pc_ ## member)
 #define	PCPU_SET(member, val)	(pcpup->pc_ ## member = (val))
 
-#elif defined(__GNUCLIKE_ASM) && defined(__GNUCLIKE___TYPEOF)
+#elif __GNUC__
 
 /*
  * Evaluates to the byte offset of the per-cpu variable name.
--- a/sys/i386/include/profile.h
+++ b/sys/i386/include/profile.h
@@ -57,7 +57,7 @@
 #define	MCOUNT_DECL(s)
 #define	MCOUNT_ENTER(s)
 #define	MCOUNT_EXIT(s)
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 #define	MCOUNT_OVERHEAD(label)						\
 	__asm __volatile("pushl %0; call __mcount; popl %%ecx"		\
 			 :						\
@@ -110,7 +110,7 @@
 
 #define	_MCOUNT_DECL static __inline void _mcount
 
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 #define	MCOUNT								\
 void									\
 mcount()								\
@@ -165,7 +165,7 @@
 #include <sys/cdefs.h>
 
 __BEGIN_DECLS
-#ifdef __GNUCLIKE_ASM
+#ifdef __GNUC__
 void	mcount(void) __asm(".mcount");
 #endif
 __END_DECLS
--- a/sys/i386/include/stdarg.h
+++ b/sys/i386/include/stdarg.h
@@ -46,7 +46,7 @@
 typedef	__va_list	va_list;
 #endif
 
-#ifdef __GNUCLIKE_BUILTIN_STDARG
+#ifdef __GNUC__
 
 #define	va_start(ap, last) \
 	__builtin_va_start((ap), (last))
@@ -67,7 +67,7 @@
 #define	__va_size(type) \
 	(((sizeof(type) + sizeof(int) - 1) / sizeof(int)) * sizeof(int))
 
-#ifdef __GNUCLIKE_BUILTIN_NEXT_ARG
+#ifdef __GNUC__
 #define va_start(ap, last) \
 	((ap) = (va_list)__builtin_next_arg(last))
 #else	/* !__GNUCLIKE_BUILTIN_NEXT_ARG */
--- a/sys/i386/include/_types.h
+++ b/sys/i386/include/_types.h
@@ -63,7 +63,7 @@
 typedef	long long		__int64_t;
 /* LONGLONG */
 typedef	unsigned long long	__uint64_t;
-#elif defined(__GNUCLIKE_ATTRIBUTE_MODE_DI)
+#elif defined(__GNUC__)
 typedef	int __attribute__((__mode__(__DI__)))		__int64_t;
 typedef	unsigned int __attribute__((__mode__(__DI__)))	__uint64_t;
 #else
@@ -126,7 +126,7 @@
 /*
  * Unusual type definitions.
  */
-#ifdef __GNUCLIKE_BUILTIN_VARARGS
+#ifdef __GNUC__
 typedef __builtin_va_list	__va_list;	/* internally known to gcc */
 #else
 typedef	char *			__va_list;
--- a/sys/i386/include/varargs.h
+++ b/sys/i386/include/varargs.h
@@ -43,7 +43,7 @@
 #error this file needs sys/cdefs.h as a prerequisite
 #endif
 
-#ifdef __GNUCLIKE_BUILTIN_VARARGS
+#ifdef __GNUC__
 
 #include <sys/_types.h>
 
@@ -67,7 +67,7 @@
 #define	__va_size(type) \
 	(((sizeof(type) + sizeof(int) - 1) / sizeof(int)) * sizeof(int))
 
-#if defined(__GNUCLIKE_BUILTIN_VAALIST)
+#if defined(__GNUC__)
 #define	va_alist	__builtin_va_alist
 #endif
 #ifdef __CC_SUPPORTS_VARADIC_XXX
--- a/sys/sys/linker_set.h
+++ b/sys/sys/linker_set.h
@@ -43,7 +43,7 @@
 /*
  * Private macros, not to be used outside this header file.
  */
-#ifdef __GNUCLIKE___SECTION
+#ifdef __GNUC__
 #define __MAKE_SET(set, sym)						\
 	static void const * const __set_##set##_sym_##sym 		\
 	__section("set_" #set) __used = &sym
--- a/sys/mips/include/endian.h
+++ b/sys/mips/include/endian.h
@@ -68,7 +68,7 @@
 #endif
 
 #ifndef __ASSEMBLER__
-#if defined(__GNUCLIKE_BUILTIN_CONSTANT_P) && defined(__OPTIMIZE__)
+#if defined(__GNUC__) && defined(__OPTIMIZE__)
 #define	__is_constant(x)	__builtin_constant_p(x)
 #else
 #define	__is_constant(x)	0
--- a/sys/mips/include/_types.h
+++ b/sys/mips/include/_types.h
@@ -63,7 +63,7 @@
 typedef	long long		__int64_t;
 /* LONGLONG */
 typedef	unsigned long long	__uint64_t;
-#elif defined(__GNUCLIKE_ATTRIBUTE_MODE_DI)
+#elif defined(__GNUC__)
 typedef	int __attribute__((__mode__(__DI__)))		__int64_t;
 typedef	unsigned int __attribute__((__mode__(__DI__)))	__uint64_t;
 #else
@@ -154,11 +154,11 @@
 /*
  * Unusual type definitions.
  */
-#ifdef __GNUCLIKE_BUILTIN_VARARGS
+#ifdef __GNUC__
 typedef __builtin_va_list	__va_list;	/* internally known to gcc */
 #else
 typedef	char *			__va_list;
-#endif /* __GNUCLIKE_BUILTIN_VARARGS */
+#endif /* __GNUC__ */
 #if defined(__GNUC_VA_LIST_COMPATIBILITY) && !defined(__GNUC_VA_LIST) \
     && !defined(__NO_GNUC_VA_LIST)
 #define	__GNUC_VA_LIST
