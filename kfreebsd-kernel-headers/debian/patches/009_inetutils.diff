diff -ur sys.orig/net/if.h sys/net/if.h
--- sys.orig/net/if.h	2004-11-30 01:05:19.000000000 +0100
+++ sys/net/if.h	2004-11-30 01:17:54.000000000 +0100
@@ -83,30 +83,30 @@
  */
 struct if_data {
 	/* generic interface information */
-	u_char	ifi_type;		/* ethernet, tokenring, etc */
-	u_char	ifi_physical;		/* e.g., AUI, Thinnet, 10base-T, etc */
-	u_char	ifi_addrlen;		/* media address length */
-	u_char	ifi_hdrlen;		/* media header length */
-	u_char	ifi_link_state;		/* current link state */
-	u_char	ifi_recvquota;		/* polling quota for receive intrs */
-	u_char	ifi_xmitquota;		/* polling quota for xmit intrs */
-	u_char	ifi_datalen;		/* length of this data struct */
-	u_long	ifi_mtu;		/* maximum transmission unit */
-	u_long	ifi_metric;		/* routing metric (external only) */
-	u_long	ifi_baudrate;		/* linespeed */
+	unsigned char	ifi_type;		/* ethernet, tokenring, etc */
+	unsigned char	ifi_physical;		/* e.g., AUI, Thinnet, 10base-T, etc */
+	unsigned char	ifi_addrlen;		/* media address length */
+	unsigned char	ifi_hdrlen;		/* media header length */
+	unsigned char	ifi_link_state;		/* current link state */
+	unsigned char	ifi_recvquota;		/* polling quota for receive intrs */
+	unsigned char	ifi_xmitquota;		/* polling quota for xmit intrs */
+	unsigned char	ifi_datalen;		/* length of this data struct */
+	unsigned long	ifi_mtu;		/* maximum transmission unit */
+	unsigned long	ifi_metric;		/* routing metric (external only) */
+	unsigned long	ifi_baudrate;		/* linespeed */
 	/* volatile statistics */
-	u_long	ifi_ipackets;		/* packets received on interface */
-	u_long	ifi_ierrors;		/* input errors on interface */
-	u_long	ifi_opackets;		/* packets sent on interface */
-	u_long	ifi_oerrors;		/* output errors on interface */
-	u_long	ifi_collisions;		/* collisions on csma interfaces */
-	u_long	ifi_ibytes;		/* total number of octets received */
-	u_long	ifi_obytes;		/* total number of octets sent */
-	u_long	ifi_imcasts;		/* packets received via multicast */
-	u_long	ifi_omcasts;		/* packets sent via multicast */
-	u_long	ifi_iqdrops;		/* dropped on input, this interface */
-	u_long	ifi_noproto;		/* destined for unsupported protocol */
-	u_long	ifi_hwassist;		/* HW offload capabilities */
+	unsigned long	ifi_ipackets;		/* packets received on interface */
+	unsigned long	ifi_ierrors;		/* input errors on interface */
+	unsigned long	ifi_opackets;		/* packets sent on interface */
+	unsigned long	ifi_oerrors;		/* output errors on interface */
+	unsigned long	ifi_collisions;		/* collisions on csma interfaces */
+	unsigned long	ifi_ibytes;		/* total number of octets received */
+	unsigned long	ifi_obytes;		/* total number of octets sent */
+	unsigned long	ifi_imcasts;		/* packets received via multicast */
+	unsigned long	ifi_omcasts;		/* packets sent via multicast */
+	unsigned long	ifi_iqdrops;		/* dropped on input, this interface */
+	unsigned long	ifi_noproto;		/* destined for unsupported protocol */
+	unsigned long	ifi_hwassist;		/* HW offload capabilities */
 	time_t	ifi_epoch;		/* time of attach or stat reset */
 #ifdef __alpha__
 	u_int	ifi_timepad;		/* time_t is int, not long on alpha */
@@ -177,12 +177,12 @@
  * from getkerninfo and the routing socket
  */
 struct if_msghdr {
-	u_short	ifm_msglen;	/* to skip over non-understood messages */
-	u_char	ifm_version;	/* future binary compatibility */
-	u_char	ifm_type;	/* message type */
+	unsigned short	ifm_msglen;	/* to skip over non-understood messages */
+	unsigned char	ifm_version;	/* future binary compatibility */
+	unsigned char	ifm_type;	/* message type */
 	int	ifm_addrs;	/* like rtm_addrs */
 	int	ifm_flags;	/* value of if_flags */
-	u_short	ifm_index;	/* index for associated ifp */
+	unsigned short	ifm_index;	/* index for associated ifp */
 	struct	if_data ifm_data;/* statistics and other data about if */
 };
 
@@ -191,12 +191,12 @@
  * from getkerninfo and the routing socket
  */
 struct ifa_msghdr {
-	u_short	ifam_msglen;	/* to skip over non-understood messages */
-	u_char	ifam_version;	/* future binary compatibility */
-	u_char	ifam_type;	/* message type */
+	unsigned short	ifam_msglen;	/* to skip over non-understood messages */
+	unsigned char	ifam_version;	/* future binary compatibility */
+	unsigned char	ifam_type;	/* message type */
 	int	ifam_addrs;	/* like rtm_addrs */
 	int	ifam_flags;	/* value of ifa_flags */
-	u_short	ifam_index;	/* index for associated ifp */
+	unsigned short	ifam_index;	/* index for associated ifp */
 	int	ifam_metric;	/* value of ifa_metric */
 };
 
@@ -205,24 +205,24 @@
  * from the routing socket
  */
 struct ifma_msghdr {
-	u_short	ifmam_msglen;	/* to skip over non-understood messages */
-	u_char	ifmam_version;	/* future binary compatibility */
-	u_char	ifmam_type;	/* message type */
+	unsigned short	ifmam_msglen;	/* to skip over non-understood messages */
+	unsigned char	ifmam_version;	/* future binary compatibility */
+	unsigned char	ifmam_type;	/* message type */
 	int	ifmam_addrs;	/* like rtm_addrs */
 	int	ifmam_flags;	/* value of ifa_flags */
-	u_short	ifmam_index;	/* index for associated ifp */
+	unsigned short	ifmam_index;	/* index for associated ifp */
 };
 
 /*
  * Message format announcing the arrival or departure of a network interface.
  */
 struct if_announcemsghdr {
-	u_short	ifan_msglen;	/* to skip over non-understood messages */
-	u_char	ifan_version;	/* future binary compatibility */
-	u_char	ifan_type;	/* message type */
-	u_short	ifan_index;	/* index for associated ifp */
+	unsigned short	ifan_msglen;	/* to skip over non-understood messages */
+	unsigned char	ifan_version;	/* future binary compatibility */
+	unsigned char	ifan_type;	/* message type */
+	unsigned short	ifan_index;	/* index for associated ifp */
 	char	ifan_name[IFNAMSIZ]; /* if name, e.g. "en0" */
-	u_short	ifan_what;	/* what type of announcement */
+	unsigned short	ifan_what;	/* what type of announcement */
 };
 
 #define	IFAN_ARRIVAL	0	/* interface arrival */
@@ -247,7 +247,7 @@
 		int	ifru_mtu;
 		int	ifru_phys;
 		int	ifru_media;
-		caddr_t	ifru_data;
+		char	*ifru_data;
 		int	ifru_cap[2];
 	} ifr_ifru;
 #define	ifr_addr	ifr_ifru.ifru_addr	/* address */
@@ -310,7 +310,7 @@
 struct	ifconf {
 	int	ifc_len;		/* size of associated buffer */
 	union {
-		caddr_t	ifcu_buf;
+		char	*ifcu_buf;
 		struct	ifreq *ifcu_req;
 	} ifc_ifcu;
 #define	ifc_buf	ifc_ifcu.ifcu_buf	/* buffer address */
@@ -323,9 +323,9 @@
  */
 struct if_laddrreq {
 	char	iflr_name[IFNAMSIZ];
-	u_int	flags;
+	unsigned int	flags;
 #define	IFLR_PREFIX	0x8000  /* in: prefix given  out: kernel fills id */
-	u_int	prefixlen;         /* in/out */
+	unsigned int	prefixlen;         /* in/out */
 	struct	sockaddr_storage addr;   /* in/out */
 	struct	sockaddr_storage dstaddr; /* out */
 };
diff -ur sys.orig/net/if_dl.h sys/net/if_dl.h
--- sys.orig/net/if_dl.h	2004-11-30 01:05:19.000000000 +0100
+++ sys/net/if_dl.h	2004-11-30 01:16:42.000000000 +0100
@@ -59,13 +59,13 @@
  * Structure of a Link-Level sockaddr:
  */
 struct sockaddr_dl {
-	u_char	sdl_len;	/* Total length of sockaddr */
-	u_char	sdl_family;	/* AF_LINK */
-	u_short	sdl_index;	/* if != 0, system given index for interface */
-	u_char	sdl_type;	/* interface type */
-	u_char	sdl_nlen;	/* interface name length, no trailing 0 reqd. */
-	u_char	sdl_alen;	/* link level address length */
-	u_char	sdl_slen;	/* link layer selector length */
+	unsigned char	sdl_len;	/* Total length of sockaddr */
+	unsigned char	sdl_family;	/* AF_LINK */
+	unsigned short	sdl_index;	/* if != 0, system given index for interface */
+	unsigned char	sdl_type;	/* interface type */
+	unsigned char	sdl_nlen;	/* interface name length, no trailing 0 reqd. */
+	unsigned char	sdl_alen;	/* link level address length */
+	unsigned char	sdl_slen;	/* link layer selector length */
 	char	sdl_data[46];	/* minimum work area, can be larger;
 				   contains both if name and ll address */
 };
diff -ur sys.orig/net/if_var.h sys/net/if_var.h
--- sys.orig/net/if_var.h	2004-10-31 00:01:43.000000000 +0200
+++ sys/net/if_var.h	2004-11-30 01:16:42.000000000 +0100
@@ -33,6 +33,9 @@
 #ifndef	_NET_IF_VAR_H_
 #define	_NET_IF_VAR_H_
 
+#include <sys/types.h>
+#include <net/if.h>
+
 /*
  * Structures defining a network interface, providing a packet
  * transport mechanism (ala level 0 of the PUP protocols).
diff -ur sys.orig/netinet/in_var.h sys/netinet/in_var.h
--- sys.orig/netinet/in_var.h	2004-08-16 20:32:07.000000000 +0200
+++ sys/netinet/in_var.h	2004-11-30 01:16:42.000000000 +0100
@@ -34,7 +34,9 @@
 #define _NETINET_IN_VAR_H_
 
 #include <sys/queue.h>
+#include <net/if_var.h>		/* ifaddr */
 #include <sys/fnv_hash.h>
+#include <netinet/in.h>		/* in_addr */
 
 /*
  * Interface address, Internet version.  One of these structures
diff -ur sys.orig/netinet/ip.h sys/netinet/ip.h
--- sys.orig/netinet/ip.h	2004-04-07 22:46:13.000000000 +0200
+++ sys/netinet/ip.h	2004-11-30 01:16:42.000000000 +0100
@@ -35,6 +35,10 @@
 
 #include <sys/cdefs.h>
 
+#include <sys/types.h>		/* u_int */
+#include <netinet/in.h>		/* in_addr */
+#include <netinet/in_systm.h>	/* n_long */
+
 /*
  * Definitions for internet protocol version 4.
  * Per RFC 791, September 1981.
diff -ur sys.orig/netinet/ip_var.h sys/netinet/ip_var.h
--- sys.orig/netinet/ip_var.h	2004-09-23 18:38:53.000000000 +0200
+++ sys/netinet/ip_var.h	2004-11-30 01:16:42.000000000 +0100
@@ -34,6 +34,8 @@
 #define	_NETINET_IP_VAR_H_
 
 #include <sys/queue.h>
+#include <sys/types.h>		/* u_char, u_short */
+#include <netinet/in.h>		/* in_addr */
 
 /*
  * Overlay for ip header used by other protocols (tcp, udp).
diff -ur sys.orig/netinet6/in6.h sys/netinet6/in6.h
--- sys.orig/netinet6/in6.h	2004-04-07 22:46:15.000000000 +0200
+++ sys/netinet6/in6.h	2004-11-30 01:16:42.000000000 +0100
@@ -61,13 +61,15 @@
  *	@(#)in.h	8.3 (Berkeley) 1/3/94
  */
 
-#ifndef __KAME_NETINET_IN_H_INCLUDED_
+#ifndef _NETINET_IN_H
 #error "do not include netinet6/in6.h directly, include netinet/in.h.  see RFC2553"
 #endif
 
 #ifndef _NETINET6_IN6_H_
 #define _NETINET6_IN6_H_
 
+#include <sys/types.h>
+
 /*
  * Identification of the network protocol stack
  * for *BSD-current/release: http://www.kame.net/dev/cvsweb.cgi/kame/COVERAGE
@@ -122,7 +124,6 @@
 	} __u6_addr;			/* 128-bit IP6 address */
 };
 
-#define s6_addr   __u6_addr.__u6_addr8
 #ifdef _KERNEL	/* XXX nonstandard */
 #define s6_addr8  __u6_addr.__u6_addr8
 #define s6_addr16 __u6_addr.__u6_addr16
@@ -242,11 +243,6 @@
 #ifdef _KERNEL
 #define IN6_ARE_ADDR_EQUAL(a, b)			\
     (bcmp(&(a)->s6_addr[0], &(b)->s6_addr[0], sizeof(struct in6_addr)) == 0)
-#else
-#if __BSD_VISIBLE
-#define IN6_ARE_ADDR_EQUAL(a, b)			\
-    (memcmp(&(a)->s6_addr[0], &(b)->s6_addr[0], sizeof(struct in6_addr)) == 0)
-#endif
 #endif
 
 #ifdef _KERNEL			/* non standard */
diff -ur sys.orig/netinet6/in6_var.h sys/netinet6/in6_var.h
--- sys.orig/netinet6/in6_var.h	2004-11-30 01:05:19.000000000 +0100
+++ sys/netinet6/in6_var.h	2004-11-30 01:16:42.000000000 +0100
@@ -64,6 +64,9 @@
 #ifndef _NETINET6_IN6_VAR_H_
 #define _NETINET6_IN6_VAR_H_
 
+#include <sys/types.h>		/* time_t */
+#include <netinet/in_var.h>	/* ifaddr */
+
 /*
  * Interface address, Internet version.  One of these structures
  * is allocated for each interface with an Internet address.
diff -ur sys.orig/sys/fnv_hash.h sys/sys/fnv_hash.h
--- sys.orig/sys/fnv_hash.h	2001-03-20 03:10:18.000000000 +0100
+++ sys/sys/fnv_hash.h	2004-11-30 01:16:42.000000000 +0100
@@ -8,6 +8,8 @@
  * $FreeBSD: sys/sys/fnv_hash.h,v 1.2 2001/03/20 02:10:18 peter Exp $
  */
 
+#include <sys/types.h>
+
 typedef u_int32_t Fnv32_t;
 typedef u_int64_t Fnv64_t;
 
@@ -58,7 +60,7 @@
 fnv_64_str(const char *str, Fnv64_t hval)
 {
 	const u_int8_t *s = (const u_int8_t *)str;
-	u_register_t c;		 /* 32 bit on i386, 64 bit on alpha,ia64 */
+	long int c;		 /* 32 bit on i386, 64 bit on alpha,ia64 */
 
 	while ((c = *s++) != 0) {
 		hval *= FNV_64_PRIME;
Only in sys.orig/sys: ioctl_compat.h.orig
Only in sys.orig/vm: vm_param.h.orig
