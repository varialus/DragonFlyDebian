--- a/sys/i386/include/_types.h
+++ b/sys/i386/include/_types.h
@@ -68,7 +68,12 @@
 /*
  * Standard type definitions.
  */
+#if defined(__GLIBC__) && !defined(_KERNEL)
+/* This divergence is probably accidental, but it can't be fixed now. */
+typedef	__int32_t	__clock_t;
+#else
 typedef	unsigned long	__clock_t;		/* clock()... */
+#endif
 typedef	__int32_t	__critical_t;
 typedef	long double	__double_t;
 typedef	long double	__float_t;
@@ -88,7 +93,11 @@
 typedef	__int32_t	__segsz_t;		/* segment size (in pages) */
 typedef	__uint32_t	__this_is_a_temporary_kludge__size_t;		/* sizeof() */
 typedef	__int32_t	__ssize_t;		/* byte count or error */
+#if defined(__GLIBC__) && !defined(_KERNEL)
+typedef	long int	__time_t;
+#else
 typedef	__int32_t	__time_t;		/* time()... */
+#endif
 typedef	__uint32_t	__uintfptr_t;
 typedef	__uint64_t	__uintmax_t;
 typedef	__uint32_t	__uintptr_t;
--- a/sys/sys/_types.h
+++ b/sys/sys/_types.h
@@ -40,11 +40,20 @@
 typedef	__int32_t	__clockid_t;	/* clock_gettime()... */
 typedef	__uint64_t	__cap_rights_t;	/* capability rights */
 typedef	__uint32_t	__fflags_t;	/* file flags */
+#if defined(__GLIBC__) && !defined(_KERNEL)
+/* User-selectable types. Leave them to Glibc headers. */
+#else
 typedef	__uint64_t	__fsblkcnt_t;
 typedef	__uint64_t	__fsfilcnt_t;
+#endif
 typedef	__uint32_t	__gid_t;
+#if defined(__GLIBC__) && !defined(_KERNEL)
+/* This divergence is probably accidental, but it can't be fixed now. */
+typedef	__uint32_t	__id_t;
+#else
 typedef	__int64_t	__id_t;		/* can hold a gid_t, pid_t, or uid_t */
-typedef	__uint32_t	__ino_t;	/* inode number */
+#endif
+typedef	__uint32_t	__kernel_ino_t;	/* inode number */
 typedef	long		__key_t;	/* IPC key (for Sys V IPC) */
 typedef	__int32_t	__lwpid_t;	/* Thread ID (a.k.a. LWP) */
 typedef	__uint16_t	__mode_t;	/* permissions */
@@ -59,8 +68,12 @@
 typedef	__uint8_t	__sa_family_t;
 typedef	__uint32_t	__socklen_t;
 typedef	long		__suseconds_t;	/* microseconds (signed) */
+#if defined(__GLIBC__) && !defined(_KERNEL)
+typedef	__int32_t	__timer_t;
+#else
 typedef	struct __timer	*__timer_t;	/* timer_gettime()... */
-typedef	struct __mq	*__mqd_t;	/* mq_open()... */
+#endif
+typedef	struct __mq	*__kernel_mqd_t;	/* mq_open()... */
 typedef	__uint32_t	__uid_t;
 typedef	unsigned int	__useconds_t;	/* microseconds (unsigned) */
 typedef	int		__cpuwhich_t;	/* which parameter for cpuset. */
@@ -98,9 +111,13 @@
  * mbstate_t is an opaque object to keep conversion state during multibyte
  * stream conversions.
  */
+#if defined(__GLIBC__) && !defined(_KERNEL)
+/* Defined in <wchar.h> */
+#else
 typedef union {
 	char		__mbstate8[128];
 	__int64_t	_mbstateL;	/* for alignment */
 } __mbstate_t;
+#endif
 
 #endif /* !_SYS__TYPES_H_ */
--- a/sys/amd64/include/_types.h
+++ b/sys/amd64/include/_types.h
@@ -76,11 +76,19 @@
 typedef	__int32_t	__int_least32_t;
 typedef	__int64_t	__int_least64_t;
 typedef	__int64_t	__ptrdiff_t;		/* ptr1 - ptr2 */
+#if defined(__GLIBC__) && !defined(_KERNEL)
+typedef int		__register_t;
+#else
 typedef	__int64_t	__register_t;
+#endif
 typedef	__int64_t	__segsz_t;		/* segment size (in pages) */
 typedef	__uint64_t	__this_is_a_temporary_kludge__size_t;		/* sizeof() */
 typedef	__int64_t	__ssize_t;		/* byte count or error */
+#if defined(__GLIBC__) && !defined(_KERNEL)
+typedef	long int	__time_t;
+#else
 typedef	__int64_t	__time_t;		/* time()... */
+#endif
 typedef	__uint64_t	__uintfptr_t;
 typedef	__uint64_t	__uintmax_t;
 typedef	__uint64_t	__uintptr_t;
--- a/sys/ia64/include/_types.h
+++ b/sys/ia64/include/_types.h
@@ -74,7 +74,11 @@
 typedef	__int32_t	__int_least32_t;
 typedef	__int64_t	__int_least64_t;
 typedef	__int64_t	__ptrdiff_t;		/* ptr1 - ptr2 */
+#if defined(__GLIBC__) && !defined(_KERNEL)
+typedef int		__register_t;
+#else
 typedef	__int64_t	__register_t;
+#endif
 typedef	__int64_t	__segsz_t;		/* segment size (in pages) */
 typedef	__uint64_t	__this_is_a_temporary_kludge__size_t;		/* sizeof() */
 typedef	__int64_t	__ssize_t;		/* byte count or error */
--- a/sys/mips/include/_types.h
+++ b/sys/mips/include/_types.h
@@ -94,7 +94,11 @@
 typedef	__int32_t	__int_least32_t;
 typedef	__int64_t	__int_least64_t;
 #if defined(__mips_n64) || defined(__mips_n32)
+# if defined(__GLIBC__) && !defined(_KERNEL)
+typedef int		__register_t;
+# else
 typedef	__int64_t	__register_t;
+# endif
 typedef	__int64_t	f_register_t;
 #else
 typedef	__int32_t	__register_t;
--- a/sys/powerpc/include/_types.h
+++ b/sys/powerpc/include/_types.h
@@ -94,7 +94,11 @@
 typedef	__int64_t	__int_least64_t;
 #ifdef __LP64__
 typedef	__int64_t	__ptrdiff_t;		/* ptr1 - ptr2 */
+#if defined(__GLIBC__) && !defined(_KERNEL)
+typedef int		__register_t;
+#else
 typedef	__int64_t	__register_t;
+#endif
 typedef	__int64_t	__segsz_t;		/* segment size (in pages) */
 typedef	__uint64_t	__this_is_a_temporary_kludge__size_t;		/* sizeof() */
 typedef	__int64_t	__ssize_t;		/* byte count or error */
--- a/sys/sparc64/include/_types.h
+++ b/sys/sparc64/include/_types.h
@@ -70,7 +70,11 @@
 typedef	__int32_t	__int_least32_t;
 typedef	__int64_t	__int_least64_t;
 typedef	__int64_t	__ptrdiff_t;		/* ptr1 - ptr2 */
+#if defined(__GLIBC__) && !defined(_KERNEL)
+typedef int		__register_t;
+#else
 typedef	__int64_t	__register_t;
+#endif
 typedef	__int64_t	__segsz_t;		/* segment size (in pages) */
 typedef	__uint64_t	__this_is_a_temporary_kludge__size_t;		/* sizeof() */
 typedef	__int64_t	__ssize_t;		/* byte count or error */
--- a/sys/sys/types.h
+++ b/sys/sys/types.h
@@ -44,7 +44,15 @@
 #include <machine/endian.h>
 #include <sys/_types.h>
 
-#include <sys/_pthreadtypes.h>
+/* Allow conflicting declarations in glibc <sys/types.h> to override us.  */
+#include <sys/types.h>
+#define _CLOCK_T_DECLARED
+#define _FSBLKCNT_T_DECLARED
+#define _ID_T_DECLARED
+#define _TIME_T_DECLARED
+#define _TIMER_T_DECLARED
+#define _MQD_T_DECLARED
+#define _INO_T_DECLARED
 
 #if __BSD_VISIBLE
 typedef	unsigned char	u_char;
@@ -182,8 +190,6 @@
 #define	_PID_T_DECLARED
 #endif
 
-typedef	__register_t	register_t;
-
 #ifndef _RLIM_T_DECLARED
 typedef	__rlim_t	rlim_t;		/* resource limit */
 #define	_RLIM_T_DECLARED
@@ -273,6 +279,7 @@
 
 #include <sys/select.h>
 
+#if 0
 /*
  * minor() gives a cookie instead of an index since we don't want to
  * change the meanings of bits 0-15 or waste time and space shifting
@@ -308,6 +315,8 @@
 __END_DECLS
 #endif /* !_KERNEL */
 
+#endif
+
 #endif /* __BSD_VISIBLE */
 
 #endif /* !_SYS_TYPES_H_ */
--- a/sys/sys/time.h
+++ b/sys/sys/time.h
@@ -36,11 +36,14 @@
 #include <sys/_timeval.h>
 #include <sys/kern/types.h>
 #include <sys/timespec.h>
+#include <sys/time.h>
 
+#if 0
 struct timezone {
 	int	tz_minuteswest;	/* minutes west of Greenwich */
 	int	tz_dsttime;	/* type of dst correction */
 };
+#endif
 #define	DST_NONE	0	/* not on dst */
 #define	DST_USA		1	/* USA style dst */
 #define	DST_AUST	2	/* Australian style dst */
@@ -199,7 +202,7 @@
 
 #endif /* _KERNEL */
 
-#ifndef _KERNEL			/* NetBSD/OpenBSD compatible interfaces */
+#if 0
 
 #define	timerclear(tvp)		((tvp)->tv_sec = (tvp)->tv_usec = 0)
 #define	timerisset(tvp)		((tvp)->tv_sec || (tvp)->tv_usec)
@@ -227,6 +230,7 @@
 	} while (0)
 #endif
 
+#if 0
 /*
  * Names of the interval timers, and structure
  * defining a timer setting.
@@ -273,6 +277,8 @@
 #define TIMER_ABSTIME	0x1	/* absolute timer */
 #endif
 
+#endif
+
 #ifdef _KERNEL
 
 /*
@@ -338,6 +344,7 @@
 #include <sys/cdefs.h>
 #include <sys/select.h>
 
+#if 0
 __BEGIN_DECLS
 int	setitimer(int, const struct itimerval *, struct itimerval *);
 int	utimes(const char *, const struct timeval *);
@@ -356,6 +363,7 @@
 #endif
 
 __END_DECLS
+#endif
 
 #endif /* !_KERNEL */
 
--- a/sys/sys/timespec.h
+++ b/sys/sys/timespec.h
@@ -51,6 +51,7 @@
 
 #endif /* __BSD_VISIBLE */
 
+#if 0
 /*
  * Structure defined by POSIX.1b to be like a itimerval, but with
  * timespecs. Used in the timer_*() system calls.
@@ -59,5 +60,6 @@
 	struct timespec  it_interval;
 	struct timespec  it_value;
 };
+#endif
 
 #endif /* _SYS_TIMESPEC_H_ */
--- a/sys/amd64/include/stdarg.h
+++ b/sys/amd64/include/stdarg.h
@@ -34,6 +34,10 @@
 #include <sys/cdefs.h>
 #include <sys/_types.h>
 
+#include <stdarg.h>
+#endif
+#if 0
+
 #ifndef _VA_LIST_DECLARED
 #define	_VA_LIST_DECLARED
 typedef	__va_list	va_list;
--- a/sys/i386/include/stdarg.h
+++ b/sys/i386/include/stdarg.h
@@ -41,6 +41,10 @@
 #include <sys/cdefs.h>
 #include <sys/_types.h>
 
+#include <stdarg.h>
+#endif
+#if 0
+
 #ifndef _VA_LIST_DECLARED
 #define	_VA_LIST_DECLARED
 typedef	__va_list	va_list;
