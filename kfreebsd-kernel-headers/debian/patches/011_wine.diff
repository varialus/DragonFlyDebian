--- sys/i386/include/segments.h.old	2004-12-01 03:21:53.000000000 +0100
+++ sys/i386/include/segments.h	2004-12-01 03:23:54.000000000 +0100
@@ -60,7 +60,7 @@
  */
 struct	segment_descriptor	{
 	unsigned sd_lolimit:16 ;	/* segment extent (lsb) */
-	unsigned sd_lobase:24 __packed;	/* segment base address (lsb) */
+	unsigned sd_lobase:24 __attribute__((packed));	/* segment base address (lsb) */
 	unsigned sd_type:5 ;		/* segment type */
 	unsigned sd_dpl:2 ;		/* segment descriptor priority level */
 	unsigned sd_p:1 ;		/* segment descriptor present */
@@ -152,7 +152,7 @@
  */
 struct region_descriptor {
 	unsigned rd_limit:16;		/* segment extent */
-	unsigned rd_base:32 __packed;	/* base address  */
+	unsigned rd_base:32 __attribute__((packed));	/* base address  */
 };
 
 /*
--- sys/sys/elf32.h~	2002-05-30 10:32:18.000000000 +0200
+++ sys/sys/elf32.h	2004-12-01 03:48:05.000000000 +0100
@@ -30,6 +30,7 @@
 #define _SYS_ELF32_H_ 1
 
 #include <sys/elf_common.h>
+#include <elf.h>
 
 /*
  * ELF definitions common to all 32-bit architectures.
@@ -43,89 +44,6 @@
 typedef u_int32_t	Elf32_Size;
 typedef Elf32_Off	Elf32_Hashelt;
 
-/*
- * ELF header.
- */
-
-typedef struct {
-	unsigned char	e_ident[EI_NIDENT];	/* File identification. */
-	Elf32_Half	e_type;		/* File type. */
-	Elf32_Half	e_machine;	/* Machine architecture. */
-	Elf32_Word	e_version;	/* ELF format version. */
-	Elf32_Addr	e_entry;	/* Entry point. */
-	Elf32_Off	e_phoff;	/* Program header file offset. */
-	Elf32_Off	e_shoff;	/* Section header file offset. */
-	Elf32_Word	e_flags;	/* Architecture-specific flags. */
-	Elf32_Half	e_ehsize;	/* Size of ELF header in bytes. */
-	Elf32_Half	e_phentsize;	/* Size of program header entry. */
-	Elf32_Half	e_phnum;	/* Number of program header entries. */
-	Elf32_Half	e_shentsize;	/* Size of section header entry. */
-	Elf32_Half	e_shnum;	/* Number of section header entries. */
-	Elf32_Half	e_shstrndx;	/* Section name strings section. */
-} Elf32_Ehdr;
-
-/*
- * Section header.
- */
-
-typedef struct {
-	Elf32_Word	sh_name;	/* Section name (index into the
-					   section header string table). */
-	Elf32_Word	sh_type;	/* Section type. */
-	Elf32_Word	sh_flags;	/* Section flags. */
-	Elf32_Addr	sh_addr;	/* Address in memory image. */
-	Elf32_Off	sh_offset;	/* Offset in file. */
-	Elf32_Size	sh_size;	/* Size in bytes. */
-	Elf32_Word	sh_link;	/* Index of a related section. */
-	Elf32_Word	sh_info;	/* Depends on section type. */
-	Elf32_Size	sh_addralign;	/* Alignment in bytes. */
-	Elf32_Size	sh_entsize;	/* Size of each entry in section. */
-} Elf32_Shdr;
-
-/*
- * Program header.
- */
-
-typedef struct {
-	Elf32_Word	p_type;		/* Entry type. */
-	Elf32_Off	p_offset;	/* File offset of contents. */
-	Elf32_Addr	p_vaddr;	/* Virtual address in memory image. */
-	Elf32_Addr	p_paddr;	/* Physical address (not used). */
-	Elf32_Size	p_filesz;	/* Size of contents in file. */
-	Elf32_Size	p_memsz;	/* Size of contents in memory. */
-	Elf32_Word	p_flags;	/* Access permission flags. */
-	Elf32_Size	p_align;	/* Alignment in memory and file. */
-} Elf32_Phdr;
-
-/*
- * Dynamic structure.  The ".dynamic" section contains an array of them.
- */
-
-typedef struct {
-	Elf32_Sword	d_tag;		/* Entry type. */
-	union {
-		Elf32_Size	d_val;	/* Integer value. */
-		Elf32_Addr	d_ptr;	/* Address value. */
-	} d_un;
-} Elf32_Dyn;
-
-/*
- * Relocation entries.
- */
-
-/* Relocations that don't need an addend field. */
-typedef struct {
-	Elf32_Addr	r_offset;	/* Location to be relocated. */
-	Elf32_Word	r_info;		/* Relocation type and symbol index. */
-} Elf32_Rel;
-
-/* Relocations that need an addend field. */
-typedef struct {
-	Elf32_Addr	r_offset;	/* Location to be relocated. */
-	Elf32_Word	r_info;		/* Relocation type and symbol index. */
-	Elf32_Sword	r_addend;	/* Addend. */
-} Elf32_Rela;
-
 /* Macros for accessing the fields of r_info. */
 #define ELF32_R_SYM(info)	((info) >> 8)
 #define ELF32_R_TYPE(info)	((unsigned char)(info))
@@ -133,19 +51,6 @@
 /* Macro for constructing r_info from field values. */
 #define ELF32_R_INFO(sym, type)	(((sym) << 8) + (unsigned char)(type))
 
-/*
- * Symbol table entries.
- */
-
-typedef struct {
-	Elf32_Word	st_name;	/* String table index of name. */
-	Elf32_Addr	st_value;	/* Symbol value. */
-	Elf32_Size	st_size;	/* Size of associated object. */
-	unsigned char	st_info;	/* Type and binding information. */
-	unsigned char	st_other;	/* Reserved (not used). */
-	Elf32_Half	st_shndx;	/* Section index of symbol. */
-} Elf32_Sym;
-
 /* Macros for accessing the fields of st_info. */
 #define ELF32_ST_BIND(info)		((info) >> 4)
 #define ELF32_ST_TYPE(info)		((info) & 0xf)
--- sys/sys/elf64.h~	2006-03-01 20:28:58.000000000 +0100
+++ sys/sys/elf64.h	2006-03-04 20:43:36.000000000 +0100
@@ -30,6 +30,7 @@
 #define _SYS_ELF64_H_ 1
 
 #include <sys/elf_common.h>
+#include <elf.h>
 
 /*
  * ELF definitions common to all 64-bit architectures.
@@ -56,89 +57,6 @@
 typedef Elf64_Half	Elf64_Hashelt;
 #endif
 
-/*
- * ELF header.
- */
-
-typedef struct {
-	unsigned char	e_ident[EI_NIDENT];	/* File identification. */
-	Elf64_Quarter	e_type;		/* File type. */
-	Elf64_Quarter	e_machine;	/* Machine architecture. */
-	Elf64_Half	e_version;	/* ELF format version. */
-	Elf64_Addr	e_entry;	/* Entry point. */
-	Elf64_Off	e_phoff;	/* Program header file offset. */
-	Elf64_Off	e_shoff;	/* Section header file offset. */
-	Elf64_Half	e_flags;	/* Architecture-specific flags. */
-	Elf64_Quarter	e_ehsize;	/* Size of ELF header in bytes. */
-	Elf64_Quarter	e_phentsize;	/* Size of program header entry. */
-	Elf64_Quarter	e_phnum;	/* Number of program header entries. */
-	Elf64_Quarter	e_shentsize;	/* Size of section header entry. */
-	Elf64_Quarter	e_shnum;	/* Number of section header entries. */
-	Elf64_Quarter	e_shstrndx;	/* Section name strings section. */
-} Elf64_Ehdr;
-
-/*
- * Section header.
- */
-
-typedef struct {
-	Elf64_Half	sh_name;	/* Section name (index into the
-					   section header string table). */
-	Elf64_Half	sh_type;	/* Section type. */
-	Elf64_Size	sh_flags;	/* Section flags. */
-	Elf64_Addr	sh_addr;	/* Address in memory image. */
-	Elf64_Off	sh_offset;	/* Offset in file. */
-	Elf64_Size	sh_size;	/* Size in bytes. */
-	Elf64_Half	sh_link;	/* Index of a related section. */
-	Elf64_Half	sh_info;	/* Depends on section type. */
-	Elf64_Size	sh_addralign;	/* Alignment in bytes. */
-	Elf64_Size	sh_entsize;	/* Size of each entry in section. */
-} Elf64_Shdr;
-
-/*
- * Program header.
- */
-
-typedef struct {
-	Elf64_Half	p_type;		/* Entry type. */
-	Elf64_Half	p_flags;	/* Access permission flags. */
-	Elf64_Off	p_offset;	/* File offset of contents. */
-	Elf64_Addr	p_vaddr;	/* Virtual address in memory image. */
-	Elf64_Addr	p_paddr;	/* Physical address (not used). */
-	Elf64_Size	p_filesz;	/* Size of contents in file. */
-	Elf64_Size	p_memsz;	/* Size of contents in memory. */
-	Elf64_Size	p_align;	/* Alignment in memory and file. */
-} Elf64_Phdr;
-
-/*
- * Dynamic structure.  The ".dynamic" section contains an array of them.
- */
-
-typedef struct {
-	Elf64_Size	d_tag;		/* Entry type. */
-	union {
-		Elf64_Size	d_val;	/* Integer value. */
-		Elf64_Addr	d_ptr;	/* Address value. */
-	} d_un;
-} Elf64_Dyn;
-
-/*
- * Relocation entries.
- */
-
-/* Relocations that don't need an addend field. */
-typedef struct {
-	Elf64_Addr	r_offset;	/* Location to be relocated. */
-	Elf64_Size	r_info;		/* Relocation type and symbol index. */
-} Elf64_Rel;
-
-/* Relocations that need an addend field. */
-typedef struct {
-	Elf64_Addr	r_offset;	/* Location to be relocated. */
-	Elf64_Size	r_info;		/* Relocation type and symbol index. */
-	Elf64_Off	r_addend;	/* Addend. */
-} Elf64_Rela;
-
 /* Macros for accessing the fields of r_info. */
 #define ELF64_R_SYM(info)	((info) >> 32)
 #define ELF64_R_TYPE(info)	((unsigned char)(info))
@@ -146,19 +64,6 @@
 /* Macro for constructing r_info from field values. */
 #define ELF64_R_INFO(sym, type)	(((sym) << 32) + (unsigned char)(type))
 
-/*
- * Symbol table entries.
- */
-
-typedef struct {
-	Elf64_Half	st_name;	/* String table index of name. */
-	unsigned char	st_info;	/* Type and binding information. */
-	unsigned char	st_other;	/* Reserved (not used). */
-	Elf64_Quarter	st_shndx;	/* Section index of symbol. */
-	Elf64_Addr	st_value;	/* Symbol value. */
-	Elf64_Size	st_size;	/* Size of associated object. */
-} Elf64_Sym;
-
 /* Macros for accessing the fields of st_info. */
 #define ELF64_ST_BIND(info)		((info) >> 4)
 #define ELF64_ST_TYPE(info)		((info) & 0xf)
--- sys/sys/elf64.h~	2006-03-04 20:44:39.000000000 +0100
+++ sys/sys/elf64.h	2006-03-04 20:46:46.000000000 +0100
@@ -37,10 +37,7 @@
  */
 
 typedef u_int64_t	Elf64_Addr;
-typedef u_int32_t	Elf64_Half;
 typedef u_int64_t	Elf64_Off;
-typedef int64_t		Elf64_Sword;
-typedef u_int64_t	Elf64_Word;
 typedef u_int64_t	Elf64_Size;
 typedef u_int16_t	Elf64_Quarter;
 
--- sys/sys/elf_common.h~	2006-03-01 20:28:58.000000000 +0100
+++ sys/sys/elf_common.h	2006-03-04 21:01:38.000000000 +0100
@@ -29,6 +29,8 @@
 #ifndef _SYS_ELF_COMMON_H_
 #define _SYS_ELF_COMMON_H_ 1
 
+#include <stdint.h>
+
 /*
  * ELF definitions that are independent of architecture or word size.
  */
@@ -43,9 +45,9 @@
  */
 
 typedef struct {
-	u_int32_t	n_namesz;	/* Length of name. */
-	u_int32_t	n_descsz;	/* Length of descriptor. */
-	u_int32_t	n_type;		/* Type of this note. */
+	uint32_t	n_namesz;	/* Length of name. */
+	uint32_t	n_descsz;	/* Length of descriptor. */
+	uint32_t	n_type;		/* Type of this note. */
 } Elf_Note;
 
 /* Indexes into the e_ident array.  Keep synced with 
--- sys/sys/elf64.h~	2006-03-04 20:47:50.000000000 +0100
+++ sys/sys/elf64.h	2006-03-04 21:01:55.000000000 +0100
@@ -31,15 +31,16 @@
 
 #include <sys/elf_common.h>
 #include <elf.h>
+#include <stdint.h>
 
 /*
  * ELF definitions common to all 64-bit architectures.
  */
 
-typedef u_int64_t	Elf64_Addr;
-typedef u_int64_t	Elf64_Off;
-typedef u_int64_t	Elf64_Size;
-typedef u_int16_t	Elf64_Quarter;
+typedef uint64_t	Elf64_Addr;
+typedef uint64_t	Elf64_Off;
+typedef uint64_t	Elf64_Size;
+typedef uint16_t	Elf64_Quarter;
 
 /*
  * Types of dynamic symbol hash table bucket and chain elements.
--- sys/sys/elf32.h~	2006-03-04 20:47:50.000000000 +0100
+++ sys/sys/elf32.h	2006-03-04 21:02:14.000000000 +0100
@@ -31,17 +31,18 @@
 
 #include <sys/elf_common.h>
 #include <elf.h>
+#include <stdint.h>
 
 /*
  * ELF definitions common to all 32-bit architectures.
  */
 
-typedef u_int32_t	Elf32_Addr;
-typedef u_int16_t	Elf32_Half;
-typedef u_int32_t	Elf32_Off;
+typedef uint32_t	Elf32_Addr;
+typedef uint16_t	Elf32_Half;
+typedef uint32_t	Elf32_Off;
 typedef int32_t		Elf32_Sword;
-typedef u_int32_t	Elf32_Word;
-typedef u_int32_t	Elf32_Size;
+typedef uint32_t	Elf32_Word;
+typedef uint32_t	Elf32_Size;
 typedef Elf32_Off	Elf32_Hashelt;
 
 /* Macros for accessing the fields of r_info. */
