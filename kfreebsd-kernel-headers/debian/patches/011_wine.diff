--- sys/i386/include/segments.h.old	2004-12-01 03:21:53.000000000 +0100
+++ sys/i386/include/segments.h	2004-12-01 03:23:54.000000000 +0100
@@ -59,30 +59,30 @@
  * Memory and System segment descriptors
  */
 struct	segment_descriptor	{
-	unsigned sd_lolimit:16 ;	/* segment extent (lsb) */
-	unsigned sd_lobase:24 __packed;	/* segment base address (lsb) */
-	unsigned sd_type:5 ;		/* segment type */
-	unsigned sd_dpl:2 ;		/* segment descriptor priority level */
-	unsigned sd_p:1 ;		/* segment descriptor present */
-	unsigned sd_hilimit:4 ;		/* segment extent (msb) */
-	unsigned sd_xx:2 ;		/* unused */
-	unsigned sd_def32:1 ;		/* default 32 vs 16 bit size */
-	unsigned sd_gran:1 ;		/* limit granularity (byte/page units)*/
-	unsigned sd_hibase:8 ;		/* segment base address  (msb) */
+	unsigned sd_lolimit;		/* segment extent (lsb) */
+	unsigned sd_lobase;		/* segment base address (lsb) */
+	unsigned sd_type;		/* segment type */
+	unsigned sd_dpl;		/* segment descriptor priority level */
+	unsigned sd_p;			/* segment descriptor present */
+	unsigned sd_hilimit;		/* segment extent (msb) */
+	unsigned sd_xx;			/* unused */
+	unsigned sd_def32;		/* default 32 vs 16 bit size */
+	unsigned sd_gran;		/* limit granularity (byte/page units)*/
+	unsigned sd_hibase;		/* segment base address  (msb) */
 } ;
 
 /*
  * Gate descriptors (e.g. indirect descriptors)
  */
 struct	gate_descriptor	{
-	unsigned gd_looffset:16 ;	/* gate offset (lsb) */
-	unsigned gd_selector:16 ;	/* gate segment selector */
-	unsigned gd_stkcpy:5 ;		/* number of stack wds to cpy */
-	unsigned gd_xx:3 ;		/* unused */
-	unsigned gd_type:5 ;		/* segment type */
-	unsigned gd_dpl:2 ;		/* segment descriptor priority level */
-	unsigned gd_p:1 ;		/* segment descriptor present */
-	unsigned gd_hioffset:16 ;	/* gate offset (msb) */
+	unsigned gd_looffset;		/* gate offset (lsb) */
+	unsigned gd_selector;		/* gate segment selector */
+	unsigned gd_stkcpy;		/* number of stack wds to cpy */
+	unsigned gd_xx;			/* unused */
+	unsigned gd_type;		/* segment type */
+	unsigned gd_dpl;		/* segment descriptor priority level */
+	unsigned gd_p;			/* segment descriptor present */
+	unsigned gd_hioffset;	   	/* gate offset (msb) */
 } ;
 
 /*
@@ -136,23 +136,23 @@
  */
 
 struct	soft_segment_descriptor	{
-	unsigned ssd_base ;		/* segment base address  */
-	unsigned ssd_limit ;		/* segment extent */
-	unsigned ssd_type:5 ;		/* segment type */
-	unsigned ssd_dpl:2 ;		/* segment descriptor priority level */
-	unsigned ssd_p:1 ;		/* segment descriptor present */
-	unsigned ssd_xx:4 ;		/* unused */
-	unsigned ssd_xx1:2 ;		/* unused */
-	unsigned ssd_def32:1 ;		/* default 32 vs 16 bit size */
-	unsigned ssd_gran:1 ;		/* limit granularity (byte/page units)*/
+	unsigned ssd_base;		/* segment base address  */
+	unsigned ssd_limit;		/* segment extent */
+	unsigned ssd_type;		/* segment type */
+	unsigned ssd_dpl;		/* segment descriptor priority level */
+	unsigned ssd_p;			/* segment descriptor present */
+	unsigned ssd_xx;		/* unused */
+	unsigned ssd_xx1;		/* unused */
+	unsigned ssd_def32;		/* default 32 vs 16 bit size */
+	unsigned ssd_gran;		/* limit granularity (byte/page units)*/
 };
 
 /*
  * region descriptors, used to load gdt/idt tables before segments yet exist.
  */
 struct region_descriptor {
-	unsigned rd_limit:16;		/* segment extent */
-	unsigned rd_base:32 __packed;	/* base address  */
+	unsigned rd_limit;		/* segment extent */
+	unsigned rd_base;		/* base address  */
 };
 
 /*
--- sys/sys/elf32.h~	2002-05-30 10:32:18.000000000 +0200
+++ sys/sys/elf32.h	2004-12-01 03:48:05.000000000 +0100
@@ -30,6 +30,7 @@
 #define _SYS_ELF32_H_ 1
 
 #include <sys/elf_common.h>
+#include <elf.h>
 
 /*
  * ELF definitions common to all 32-bit architectures.
@@ -43,89 +44,6 @@
 typedef u_int32_t	Elf32_Size;
 typedef Elf32_Off	Elf32_Hashelt;
 
-/*
- * ELF header.
- */
-
-typedef struct {
-	unsigned char	e_ident[EI_NIDENT];	/* File identification. */
-	Elf32_Half	e_type;		/* File type. */
-	Elf32_Half	e_machine;	/* Machine architecture. */
-	Elf32_Word	e_version;	/* ELF format version. */
-	Elf32_Addr	e_entry;	/* Entry point. */
-	Elf32_Off	e_phoff;	/* Program header file offset. */
-	Elf32_Off	e_shoff;	/* Section header file offset. */
-	Elf32_Word	e_flags;	/* Architecture-specific flags. */
-	Elf32_Half	e_ehsize;	/* Size of ELF header in bytes. */
-	Elf32_Half	e_phentsize;	/* Size of program header entry. */
-	Elf32_Half	e_phnum;	/* Number of program header entries. */
-	Elf32_Half	e_shentsize;	/* Size of section header entry. */
-	Elf32_Half	e_shnum;	/* Number of section header entries. */
-	Elf32_Half	e_shstrndx;	/* Section name strings section. */
-} Elf32_Ehdr;
-
-/*
- * Section header.
- */
-
-typedef struct {
-	Elf32_Word	sh_name;	/* Section name (index into the
-					   section header string table). */
-	Elf32_Word	sh_type;	/* Section type. */
-	Elf32_Word	sh_flags;	/* Section flags. */
-	Elf32_Addr	sh_addr;	/* Address in memory image. */
-	Elf32_Off	sh_offset;	/* Offset in file. */
-	Elf32_Size	sh_size;	/* Size in bytes. */
-	Elf32_Word	sh_link;	/* Index of a related section. */
-	Elf32_Word	sh_info;	/* Depends on section type. */
-	Elf32_Size	sh_addralign;	/* Alignment in bytes. */
-	Elf32_Size	sh_entsize;	/* Size of each entry in section. */
-} Elf32_Shdr;
-
-/*
- * Program header.
- */
-
-typedef struct {
-	Elf32_Word	p_type;		/* Entry type. */
-	Elf32_Off	p_offset;	/* File offset of contents. */
-	Elf32_Addr	p_vaddr;	/* Virtual address in memory image. */
-	Elf32_Addr	p_paddr;	/* Physical address (not used). */
-	Elf32_Size	p_filesz;	/* Size of contents in file. */
-	Elf32_Size	p_memsz;	/* Size of contents in memory. */
-	Elf32_Word	p_flags;	/* Access permission flags. */
-	Elf32_Size	p_align;	/* Alignment in memory and file. */
-} Elf32_Phdr;
-
-/*
- * Dynamic structure.  The ".dynamic" section contains an array of them.
- */
-
-typedef struct {
-	Elf32_Sword	d_tag;		/* Entry type. */
-	union {
-		Elf32_Size	d_val;	/* Integer value. */
-		Elf32_Addr	d_ptr;	/* Address value. */
-	} d_un;
-} Elf32_Dyn;
-
-/*
- * Relocation entries.
- */
-
-/* Relocations that don't need an addend field. */
-typedef struct {
-	Elf32_Addr	r_offset;	/* Location to be relocated. */
-	Elf32_Word	r_info;		/* Relocation type and symbol index. */
-} Elf32_Rel;
-
-/* Relocations that need an addend field. */
-typedef struct {
-	Elf32_Addr	r_offset;	/* Location to be relocated. */
-	Elf32_Word	r_info;		/* Relocation type and symbol index. */
-	Elf32_Sword	r_addend;	/* Addend. */
-} Elf32_Rela;
-
 /* Macros for accessing the fields of r_info. */
 #define ELF32_R_SYM(info)	((info) >> 8)
 #define ELF32_R_TYPE(info)	((unsigned char)(info))
@@ -133,19 +51,6 @@
 /* Macro for constructing r_info from field values. */
 #define ELF32_R_INFO(sym, type)	(((sym) << 8) + (unsigned char)(type))
 
-/*
- * Symbol table entries.
- */
-
-typedef struct {
-	Elf32_Word	st_name;	/* String table index of name. */
-	Elf32_Addr	st_value;	/* Symbol value. */
-	Elf32_Size	st_size;	/* Size of associated object. */
-	unsigned char	st_info;	/* Type and binding information. */
-	unsigned char	st_other;	/* Reserved (not used). */
-	Elf32_Half	st_shndx;	/* Section index of symbol. */
-} Elf32_Sym;
-
 /* Macros for accessing the fields of st_info. */
 #define ELF32_ST_BIND(info)		((info) >> 4)
 #define ELF32_ST_TYPE(info)		((info) & 0xf)
