
Status: chflags is BSD-specific.  We could add it to freebsd-utils.
  The rest has been rejected (kern/93502)

Index: sys/conf/kern.mk
===================================================================
--- sys/conf/kern.mk.orig	2005-04-01 00:53:58.000000000 +0200
+++ sys/conf/kern.mk	2006-06-24 17:25:17.000000000 +0200
@@ -1,5 +1,9 @@
 # $FreeBSD: src/sys/conf/kern.mk,v 1.45 2005/03/31 22:53:58 peter Exp $
 
+.if !defined(OPSYS)
+OPSYS!=		uname -s
+.endif
+
 #
 # Warning flags for compiling the kernel and components of the kernel.
 #
@@ -9,10 +13,14 @@
 .if ${CC} == "icc"
 #CWARNFLAGS=	-w2	# use this if you are terribly bored
 CWARNFLAGS=
-.else
-CWARNFLAGS?=	-Wall -Wredundant-decls -Wnested-externs -Wstrict-prototypes \
+.elif !defined(CWARNFLAGS)
+CWARNFLAGS=	-Wall -Wredundant-decls -Wnested-externs -Wstrict-prototypes \
 		-Wmissing-prototypes -Wpointer-arith -Winline -Wcast-qual \
-		-fformat-extensions -std=c99
+		-std=c99
+.if ${OPSYS} == "FreeBSD"
+# FreeBSD extensions, not available in upstream GCC
+CWARNFLAGS+=	-fformat-extensions
+.endif
 .endif
 #
 # The following flags are next up for working on:
@@ -30,8 +38,12 @@
 # reserved for user applications.
 #
 .if ${MACHINE_ARCH} == "i386" && ${CC} != "icc"
-CFLAGS+=	-mno-align-long-strings -mpreferred-stack-boundary=2 \
+CFLAGS+=	-mpreferred-stack-boundary=2 \
 		-mno-mmx -mno-3dnow -mno-sse -mno-sse2
+.if ${OPSYS} == "FreeBSD"
+# FreeBSD extensions, not available in upstream GCC
+CFLAGS+=	-mno-align-long-strings
+.endif
 INLINE_LIMIT?=	8000
 .endif
 
Index: sys/conf/kern.post.mk
===================================================================
--- sys/conf/kern.post.mk.orig	2005-11-16 11:03:02.000000000 +0100
+++ sys/conf/kern.post.mk	2006-06-24 17:25:17.000000000 +0200
@@ -1,5 +1,15 @@
 # $FreeBSD: src/sys/conf/kern.post.mk,v 1.83.2.1 2005/11/16 10:03:02 ru Exp $
 
+.if !defined(OPSYS)
+OPSYS!=		uname -s
+.endif
+
+.if ${OPSYS} == "FreeBSD"
+WHEEL_GROUP?=	wheel
+.else
+WHEEL_GROUP?=	root
+.endif
+
 # Part of a unified Makefile for building kernels.  This part includes all
 # the definitions that need to be after all the % directives except %RULES
 # and ones that act like they are part of %RULES.
@@ -189,11 +199,9 @@
 .if exists(${DESTDIR}${KODIR})
 	-thiskernel=`sysctl -n kern.bootfile` ; \
 	if [ ! "`dirname "$$thiskernel"`" -ef ${DESTDIR}${KODIR} ] ; then \
-		chflags -R noschg ${DESTDIR}${KODIR} ; \
 		rm -rf ${DESTDIR}${KODIR} ; \
 	else \
 		if [ -d ${DESTDIR}${KODIR}.old ] ; then \
-			chflags -R noschg ${DESTDIR}${KODIR}.old ; \
 			rm -rf ${DESTDIR}${KODIR}.old ; \
 		fi ; \
 		mv ${DESTDIR}${KODIR} ${DESTDIR}${KODIR}.old ; \
@@ -202,17 +210,16 @@
 .endif
 	mkdir -p ${DESTDIR}${KODIR}
 .if defined(DEBUG) && defined(INSTALL_DEBUG)
-	${INSTALL} -p -m 555 -o root -g wheel ${FULLKERNEL} ${DESTDIR}${KODIR}
+	${INSTALL} -p -m 555 -o root -g ${WHEEL_GROUP} ${FULLKERNEL} ${DESTDIR}${KODIR}
 .else
-	${INSTALL} -p -m 555 -o root -g wheel ${KERNEL_KO} ${DESTDIR}${KODIR}
+	${INSTALL} -p -m 555 -o root -g ${WHEEL_GROUP} ${KERNEL_KO} ${DESTDIR}${KODIR}
 .endif
 
 kernel-reinstall:
-	@-chflags -R noschg ${DESTDIR}${KODIR}
 .if defined(DEBUG) && defined(INSTALL_DEBUG)
-	${INSTALL} -p -m 555 -o root -g wheel ${FULLKERNEL} ${DESTDIR}${KODIR}
+	${INSTALL} -p -m 555 -o root -g ${WHEEL_GROUP} ${FULLKERNEL} ${DESTDIR}${KODIR}
 .else
-	${INSTALL} -p -m 555 -o root -g wheel ${KERNEL_KO} ${DESTDIR}${KODIR}
+	${INSTALL} -p -m 555 -o root -g ${WHEEL_GROUP} ${KERNEL_KO} ${DESTDIR}${KODIR}
 .endif
 
 config.o env.o hints.o vers.o vnode_if.o:
