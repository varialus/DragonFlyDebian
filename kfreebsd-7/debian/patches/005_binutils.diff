
Status: Reported as kern/93331

Index: sys/i386/i386/locore.s
===================================================================
--- sys/i386/i386/locore.s.orig	2005-05-16 11:47:53.000000000 +0200
+++ sys/i386/i386/locore.s	2006-06-24 17:32:27.000000000 +0200
@@ -358,7 +358,7 @@
 	pushl	%eax
 	testl	$PSL_VM,UC_EFLAGS(%eax)
 	jne	1f
-	movl	UC_GS(%eax),%gs		/* restore %gs */
+	movw	UC_GS(%eax),%gs		/* restore %gs */
 1:
 	movl	$SYS_sigreturn,%eax
 	pushl	%eax			/* junk to fake return addr. */
@@ -375,7 +375,7 @@
 	pushl	%eax
 	testl	$PSL_VM,UC4_EFLAGS(%eax)
 	jne	1f
-	movl	UC4_GS(%eax),%gs	/* restore %gs */
+	movw	UC4_GS(%eax),%gs	/* restore %gs */
 1:
 	movl	$344,%eax		/* 4.x SYS_sigreturn */
 	pushl	%eax			/* junk to fake return addr. */
@@ -393,7 +393,7 @@
 	pushl	%eax
 	testl	$PSL_VM,SC_PS(%eax)
 	jne	9f
-	movl	SC_GS(%eax),%gs		/* restore %gs */
+	movw	SC_GS(%eax),%gs		/* restore %gs */
 9:
 	movl	$103,%eax		/* 3.x SYS_sigreturn */
 	pushl	%eax			/* junk to fake return addr. */
Index: sys/i386/i386/swtch.s
===================================================================
--- sys/i386/i386/swtch.s.orig	2005-04-14 00:57:17.000000000 +0200
+++ sys/i386/i386/swtch.s	2006-06-24 17:32:27.000000000 +0200
@@ -111,7 +111,7 @@
 	movl	%ebp,PCB_EBP(%edx)
 	movl	%esi,PCB_ESI(%edx)
 	movl	%edi,PCB_EDI(%edx)
-	movl	%gs,PCB_GS(%edx)
+	movw	%gs,PCB_GS(%edx)
 	pushfl					/* PSL */
 	popl	PCB_PSL(%edx)
 	/* Check to see if we need to call a switchout function. */
@@ -279,7 +279,7 @@
 	/* This must be done after loading the user LDT. */
 	.globl	cpu_switch_load_gs
 cpu_switch_load_gs:
-	movl	PCB_GS(%edx),%gs
+	movw	PCB_GS(%edx),%gs
 
 	/* Test if debug registers should be restored. */
 	testl	$PCB_DBREGS,PCB_FLAGS(%edx)
@@ -348,7 +348,7 @@
 	movl	%ebp,PCB_EBP(%ecx)
 	movl	%esi,PCB_ESI(%ecx)
 	movl	%edi,PCB_EDI(%ecx)
-	movl	%gs,PCB_GS(%ecx)
+	movw	%gs,PCB_GS(%ecx)
 	pushfl
 	popl	PCB_PSL(%ecx)
 
Index: sys/i386/include/cpufunc.h
===================================================================
--- sys/i386/include/cpufunc.h.orig	2005-05-13 02:05:56.000000000 +0200
+++ sys/i386/include/cpufunc.h	2006-06-24 17:32:27.000000000 +0200
@@ -452,7 +452,7 @@
 rfs(void)
 {
 	u_int sel;
-	__asm __volatile("movl %%fs,%0" : "=rm" (sel));
+	__asm __volatile("mov %%fs,%0" : "=rm" (sel));
 	return (sel);
 }
 
@@ -460,7 +460,7 @@
 rgs(void)
 {
 	u_int sel;
-	__asm __volatile("movl %%gs,%0" : "=rm" (sel));
+	__asm __volatile("mov %%gs,%0" : "=rm" (sel));
 	return (sel);
 }
 
@@ -468,12 +468,12 @@
 static __inline void
 load_fs(u_int sel)
 {
-	__asm __volatile("movl %0,%%fs" : : "rm" (sel));
+	__asm __volatile("mov %0,%%fs" : : "rm" (sel));
 }
 
 static __inline void
 load_gs(u_int sel)
 {
-	__asm __volatile("movl %0,%%gs" : : "rm" (sel));
+	__asm __volatile("mov %0,%%gs" : : "rm" (sel));
 }
 
 static __inline void
Index: sys/i386/linux/linux_locore.s
===================================================================
--- sys/i386/linux/linux_locore.s.orig	2001-02-25 07:29:01.000000000 +0100
+++ sys/i386/linux/linux_locore.s	2006-06-24 17:32:27.000000000 +0200
@@ -8,7 +8,7 @@
 NON_GPROF_ENTRY(linux_sigcode)
 	call	*LINUX_SIGF_HANDLER(%esp)
 	leal	LINUX_SIGF_SC(%esp),%ebx	/* linux scp */
-	movl	LINUX_SC_GS(%ebx),%gs
+	movw	LINUX_SC_GS(%ebx),%gs
 	movl	%esp, %ebx			/* pass sigframe */
 	push	%eax				/* fake ret addr */
 	movl	$LINUX_SYS_linux_sigreturn,%eax	/* linux_sigreturn() */
@@ -19,7 +19,7 @@
 linux_rt_sigcode:
 	call	*LINUX_RT_SIGF_HANDLER(%esp)
 	leal	LINUX_RT_SIGF_UC(%esp),%ebx	/* linux ucp */
-	movl	LINUX_SC_GS(%ebx),%gs
+	movw	LINUX_SC_GS(%ebx),%gs
 	push	%eax				/* fake ret addr */
 	movl	$LINUX_SYS_linux_rt_sigreturn,%eax   /* linux_rt_sigreturn() */
 	int	$0x80				/* enter kernel with args */
Index: sys/compat/ndis/winx32_wrap.S
===================================================================
--- sys/compat/ndis/winx32_wrap.S.orig	2005-11-06 04:52:25.000000000 +0100
+++ sys/compat/ndis/winx32_wrap.S	2006-06-24 17:32:27.000000000 +0200
@@ -364,7 +364,7 @@
 	ret
 
 ENTRY(x86_setfs)
-	movl	4(%esp),%fs
+	movw	4(%esp),%fs
 	ret
 
 ENTRY(x86_gettid)
Index: sys/amd64/amd64/cpu_switch.S
===================================================================
--- sys/amd64/amd64/cpu_switch.S.orig	2005-11-15 01:25:59.000000000 +0100
+++ sys/amd64/amd64/cpu_switch.S	2006-06-24 17:33:03.000000000 +0200
@@ -102,7 +102,7 @@
 	jz	1f				/* no, skip over */
 
 	/* Save userland %gs */
-	movl	%gs,PCB_GS(%r8)
+	movw	%gs,PCB_GS(%r8)
 	movq	PCB_GS32P(%r8),%rax
 	movq	(%rax),%rax
 	movq	%rax,PCB_GS32SD(%r8)
@@ -204,7 +204,7 @@
 	movq	%rbx,(%rax)
 	movl	$MSR_GSBASE,%ecx
 	rdmsr
-	movl	PCB_GS(%r8),%gs
+	movw	PCB_GS(%r8),%gs
 	wrmsr
 
 1:
Index: sys/amd64/ia32/ia32_signal.c
===================================================================
--- sys/amd64/ia32/ia32_signal.c.orig	2004-04-06 01:55:14.000000000 +0200
+++ sys/amd64/ia32/ia32_signal.c	2006-06-24 17:32:27.000000000 +0200
@@ -197,8 +197,8 @@
 	sf.sf_uc.uc_mcontext.mc_onstack = (oonstack) ? 1 : 0;
 	sf.sf_uc.uc_mcontext.mc_gs = rgs();
 	sf.sf_uc.uc_mcontext.mc_fs = rfs();
-	__asm __volatile("movl %%es,%0" : "=rm" (sf.sf_uc.uc_mcontext.mc_es));
-	__asm __volatile("movl %%ds,%0" : "=rm" (sf.sf_uc.uc_mcontext.mc_ds));
+	__asm __volatile("mov %%es,%0" : "=rm" (sf.sf_uc.uc_mcontext.mc_es));
+	__asm __volatile("mov %%ds,%0" : "=rm" (sf.sf_uc.uc_mcontext.mc_ds));
 	sf.sf_uc.uc_mcontext.mc_edi = regs->tf_rdi;
 	sf.sf_uc.uc_mcontext.mc_esi = regs->tf_rsi;
 	sf.sf_uc.uc_mcontext.mc_ebp = regs->tf_rbp;
@@ -309,8 +309,8 @@
 	sf.sf_uc.uc_mcontext.mc_onstack = (oonstack) ? 1 : 0;
 	sf.sf_uc.uc_mcontext.mc_gs = rgs();
 	sf.sf_uc.uc_mcontext.mc_fs = rfs();
-	__asm __volatile("movl %%es,%0" : "=rm" (sf.sf_uc.uc_mcontext.mc_es));
-	__asm __volatile("movl %%ds,%0" : "=rm" (sf.sf_uc.uc_mcontext.mc_ds));
+	__asm __volatile("mov %%es,%0" : "=rm" (sf.sf_uc.uc_mcontext.mc_es));
+	__asm __volatile("mov %%ds,%0" : "=rm" (sf.sf_uc.uc_mcontext.mc_ds));
 	sf.sf_uc.uc_mcontext.mc_edi = regs->tf_rdi;
 	sf.sf_uc.uc_mcontext.mc_esi = regs->tf_rsi;
 	sf.sf_uc.uc_mcontext.mc_ebp = regs->tf_rbp;
Index: sys/amd64/include/cpufunc.h
===================================================================
--- sys/amd64/include/cpufunc.h.orig	2005-05-13 02:05:55.000000000 +0200
+++ sys/amd64/include/cpufunc.h	2006-06-24 17:32:27.000000000 +0200
@@ -482,7 +482,7 @@
 rfs(void)
 {
 	u_int sel;
-	__asm __volatile("movl %%fs,%0" : "=rm" (sel));
+	__asm __volatile("mov %%fs,%0" : "=rm" (sel));
 	return (sel);
 }
 
@@ -490,7 +490,7 @@
 rgs(void)
 {
 	u_int sel;
-	__asm __volatile("movl %%gs,%0" : "=rm" (sel));
+	__asm __volatile("mov %%gs,%0" : "=rm" (sel));
 	return (sel);
 }
 
@@ -498,20 +498,20 @@
 rss(void)
 {
 	u_int sel;
-	__asm __volatile("movl %%ss,%0" : "=rm" (sel));
+	__asm __volatile("mov %%ss,%0" : "=rm" (sel));
 	return (sel);
 }
 
 static __inline void
 load_ds(u_int sel)
 {
-	__asm __volatile("movl %0,%%ds" : : "rm" (sel));
+	__asm __volatile("mov %0,%%ds" : : "rm" (sel));
 }
 
 static __inline void
 load_es(u_int sel)
 {
-	__asm __volatile("movl %0,%%es" : : "rm" (sel));
+	__asm __volatile("mov %0,%%es" : : "rm" (sel));
 }
 
 #ifdef _KERNEL
@@ -526,7 +526,7 @@
 
 	/* Preserve the fsbase value across the selector load */
 	fsbase = MSR_FSBASE;
-        __asm __volatile("rdmsr; movl %0,%%fs; wrmsr"
+        __asm __volatile("rdmsr; mov %0,%%fs; wrmsr"
             : : "rm" (sel), "c" (fsbase) : "eax", "edx");
 }
 
@@ -544,7 +544,7 @@
 	 * being trashed happens to be the kernel gsbase at the time.
 	 */
 	gsbase = MSR_GSBASE;
-        __asm __volatile("pushfq; cli; rdmsr; movl %0,%%gs; wrmsr; popfq"
+        __asm __volatile("pushfq; cli; rdmsr; mov %0,%%gs; wrmsr; popfq"
             : : "rm" (sel), "c" (gsbase) : "eax", "edx");
 }
 #else
@@ -552,13 +552,13 @@
 static __inline void
 load_fs(u_int sel)
 {
-	__asm __volatile("movl %0,%%fs" : : "rm" (sel));
+	__asm __volatile("mov %0,%%fs" : : "rm" (sel));
 }
 
 static __inline void
 load_gs(u_int sel)
 {
-	__asm __volatile("movl %0,%%gs" : : "rm" (sel));
+	__asm __volatile("mov %0,%%gs" : : "rm" (sel));
 }
 #endif
 
Index: sys/amd64/linux32/linux32_sysvec.c
===================================================================
--- sys/amd64/linux32/linux32_sysvec.c.orig	2005-12-22 22:25:19.000000000 +0100
+++ sys/amd64/linux32/linux32_sysvec.c	2006-06-24 17:32:27.000000000 +0200
@@ -345,9 +345,9 @@
 	frame.sf_sc.uc_mcontext.sc_mask   = frame.sf_sc.uc_sigmask.__bits[0];
         frame.sf_sc.uc_mcontext.sc_gs     = rgs();
         frame.sf_sc.uc_mcontext.sc_fs     = rfs();
-        __asm __volatile("movl %%es,%0" :
+        __asm __volatile("mov %%es,%0" :
 	    "=rm" (frame.sf_sc.uc_mcontext.sc_es));
-        __asm __volatile("movl %%ds,%0" :
+        __asm __volatile("mov %%ds,%0" :
 	    "=rm" (frame.sf_sc.uc_mcontext.sc_ds));
 	frame.sf_sc.uc_mcontext.sc_edi    = regs->tf_rdi;
 	frame.sf_sc.uc_mcontext.sc_esi    = regs->tf_rsi;
@@ -474,8 +474,8 @@
 	frame.sf_sc.sc_mask   = lmask.__bits[0];
         frame.sf_sc.sc_gs     = rgs();
         frame.sf_sc.sc_fs     = rfs();
-        __asm __volatile("movl %%es,%0" : "=rm" (frame.sf_sc.sc_es));
-        __asm __volatile("movl %%ds,%0" : "=rm" (frame.sf_sc.sc_ds));
+        __asm __volatile("mov %%es,%0" : "=rm" (frame.sf_sc.sc_es));
+        __asm __volatile("mov %%ds,%0" : "=rm" (frame.sf_sc.sc_ds));
 	frame.sf_sc.sc_edi    = regs->tf_rdi;
 	frame.sf_sc.sc_esi    = regs->tf_rsi;
 	frame.sf_sc.sc_ebp    = regs->tf_rbp;
Index: sys/amd64/ia32/ia32_sigtramp.S
===================================================================
--- sys/amd64/ia32/ia32_sigtramp.S.orig	2003-08-23 01:19:02.000000000 +0200
+++ sys/amd64/ia32/ia32_sigtramp.S	2006-06-24 17:32:27.000000000 +0200
@@ -45,8 +45,8 @@
 	calll	*IA32_SIGF_HANDLER(%esp)
 	leal	IA32_SIGF_UC(%esp),%eax	/* get ucontext */
 	pushl	%eax
-	movl	IA32_UC_ES(%eax),%es	/* restore %es */
-	movl	IA32_UC_DS(%eax),%ds	/* restore %ds */
+	mov	IA32_UC_ES(%eax),%es	/* restore %es */
+	mov	IA32_UC_DS(%eax),%ds	/* restore %ds */
 	movl	$SYS_sigreturn,%eax
 	pushl	%eax			/* junk to fake return addr. */
 	int	$0x80			/* enter kernel with args */
@@ -60,8 +60,8 @@
 	calll	*IA32_SIGF_HANDLER(%esp)
 	leal	IA32_SIGF_UC4(%esp),%eax/* get ucontext */
 	pushl	%eax
-	movl	IA32_UC4_ES(%eax),%es	/* restore %es */
-	movl	IA32_UC4_DS(%eax),%ds	/* restore %ds */
+	mov	IA32_UC4_ES(%eax),%es	/* restore %es */
+	mov	IA32_UC4_DS(%eax),%ds	/* restore %ds */
 	movl	$344,%eax		/* 4.x SYS_sigreturn */
 	pushl	%eax			/* junk to fake return addr. */
 	int	$0x80			/* enter kernel with args */
Index: sys/amd64/linux32/linux32_locore.s
===================================================================
--- sys/amd64/linux32/linux32_locore.s.orig	2004-08-16 09:55:06.000000000 +0200
+++ sys/amd64/linux32/linux32_locore.s	2006-06-24 17:32:27.000000000 +0200
@@ -11,8 +11,8 @@
 NON_GPROF_ENTRY(linux_sigcode)
 	call	*LINUX_SIGF_HANDLER(%esp)
 	leal	LINUX_SIGF_SC(%esp),%ebx	/* linux scp */
-	movl	LINUX_SC_ES(%ebx),%es
-	movl	LINUX_SC_DS(%ebx),%ds
+	mov	LINUX_SC_ES(%ebx),%es
+	mov	LINUX_SC_DS(%ebx),%ds
 	movl	%esp, %ebx			/* pass sigframe */
 	push	%eax				/* fake ret addr */
 	movl	$LINUX_SYS_linux_sigreturn,%eax	/* linux_sigreturn() */
@@ -23,8 +23,8 @@
 linux_rt_sigcode:
 	call	*LINUX_RT_SIGF_HANDLER(%esp)
 	leal	LINUX_RT_SIGF_UC(%esp),%ebx	/* linux ucp */
-	movl	LINUX_SC_ES(%ebx),%es
-	movl	LINUX_SC_DS(%ebx),%ds
+	mov	LINUX_SC_ES(%ebx),%es
+	mov	LINUX_SC_DS(%ebx),%ds
 	push	%eax				/* fake ret addr */
 	movl	$LINUX_SYS_linux_rt_sigreturn,%eax   /* linux_rt_sigreturn() */
 	int	$0x80				/* enter kernel with args */
