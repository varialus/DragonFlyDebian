---
 lib/libkvm/Makefile             |    2 +-
 lib/libkvm/kvm.c                |   23 +++++++++++++++++++----
 lib/libkvm/kvm_cptime.c         |    4 ++--
 lib/libkvm/kvm_file.c           |    7 ++++++-
 lib/libkvm/kvm_getloadavg.c     |   12 +++++++++---
 lib/libkvm/kvm_getswapinfo.c    |    8 +++++---
 lib/libkvm/kvm_minidump_amd64.c |    9 +++++++++
 lib/libkvm/kvm_minidump_i386.c  |   10 ++++++++++
 lib/libkvm/kvm_pcpu.c           |    6 +++---
 lib/libkvm/kvm_private.h        |    6 ++++--
 lib/libkvm/kvm_proc.c           |    5 ++++-
 lib/libkvm/kvm_vnet.c           |   14 +++++++-------
 12 files changed, 79 insertions(+), 27 deletions(-)

--- a/lib/libkvm/Makefile
+++ b/lib/libkvm/Makefile
@@ -2,8 +2,8 @@
 # $FreeBSD$
 
 LIB=	kvm
+LDADD= -lbsd
 SHLIBDIR?= /lib
-CFLAGS+=-DLIBC_SCCS -I${.CURDIR}
 
 .if ${MACHINE} == "sun4v"
 CFLAGS+=-DSUN4V
--- a/lib/libkvm/kvm.c
+++ b/lib/libkvm/kvm.c
@@ -70,6 +70,10 @@
 #include <strings.h>
 #include <unistd.h>
 
+#ifndef _PATH_FWMEM
+#define _PATH_FWMEM     "/dev/fwmem"
+#endif
+
 #include "kvm_private.h"
 
 /* from src/lib/libc/gen/nlist.c */
@@ -151,6 +155,7 @@
 	char *errout;
 {
 	struct stat st;
+	static char name[MAXPATHLEN];
 
 	kd->vmfd = -1;
 	kd->pmfd = -1;
@@ -160,8 +165,17 @@
 	kd->argspc = 0;
 	kd->argv = 0;
 
-	if (uf == 0)
-		uf = getbootfile();
+	if (uf == 0) {
+		size_t size = sizeof(name);
+		int mib[2];
+
+		mib[0] = CTL_KERN;
+		mib[1] = KERN_BOOTFILE;
+		if (sysctl(mib, 2, name, &size, NULL, 0) == -1)
+			strcpy(name, "/boot/kernel/kernel");
+
+		uf = name;
+	}
 	else if (strlen(uf) >= MAXPATHLEN) {
 		_kvm_err(kd, kd->program, "exec file name too long");
 		goto failed;
@@ -244,7 +258,7 @@
 kvm_openfiles(uf, mf, sf, flag, errout)
 	const char *uf;
 	const char *mf;
-	const char *sf __unused;
+	const char *sf;
 	int flag;
 	char *errout;
 {
@@ -262,7 +276,7 @@
 kvm_open(uf, mf, sf, flag, errstr)
 	const char *uf;
 	const char *mf;
-	const char *sf __unused;
+	const char *sf;
 	int flag;
 	const char *errstr;
 {
--- a/lib/libkvm/kvm_file.c
+++ b/lib/libkvm/kvm_file.c
@@ -59,7 +59,7 @@
 #include <sys/sysctl.h>
 
 #include <limits.h>
-#include <ndbm.h>
+#include <gdbm-ndbm.h>
 #include <paths.h>
 #include <stdlib.h>
 
@@ -80,6 +80,7 @@
 	int op, arg, nprocs;
 	long allproc_o;
 {
+#if 0
 	struct proc proc;
 	struct filedesc filed;
 	int buflen = kd->arglen, ocnt = 0, n = 0, once = 0, i;
@@ -151,6 +152,7 @@
 	return (n);
 fail:
 	free(ofiles);
+#endif
 	return (0);
 	
 }
@@ -166,6 +168,7 @@
 
 	_kvm_syserr(kd, kd->program, "kvm_getfiles has been broken for years");
 	return (0);
+#if 0
 	if (ISALIVE(kd)) {
 		size = 0;
 		mib[0] = CTL_KERN;
@@ -228,4 +231,6 @@
 	}
 	*cnt = nfiles;
 	return (kd->argspc);
+#endif
+	return 0;
 }
--- a/lib/libkvm/kvm_getloadavg.c
+++ b/lib/libkvm/kvm_getloadavg.c
@@ -44,15 +44,21 @@
 #include <limits.h>
 #include <nlist.h>
 #include <kvm.h>
+#include <sys/_types.h>
 
 #include "kvm_private.h"
 
 static struct nlist nl[] = {
-	{ "_averunnable" },
+	{ { "_averunnable" } },
 #define	X_AVERUNNABLE	0
-	{ "_fscale" },
+	{ { "_fscale" } },
 #define	X_FSCALE	1
-	{ "" },
+	{ { "" } },
+};
+
+struct loadavg {
+	__fixpt_t       ldavg[3];
+	long            fscale;
 };
 
 /*
--- a/lib/libkvm/kvm_getswapinfo.c
+++ b/lib/libkvm/kvm_getswapinfo.c
@@ -51,9 +51,9 @@
 #include "kvm_private.h"
 
 static struct nlist kvm_swap_nl[] = {
-	{ "_swtailq" },		/* list of swap devices and sizes */
-	{ "_dmmax" },		/* maximum size of a swap block */
-	{ NULL }
+	{ { "_swtailq" } },		/* list of swap devices and sizes */
+	{ { "_dmmax" } },		/* maximum size of a swap block */
+	{ { NULL } }
 };
 
 #define NL_SWTAILQ	0
@@ -210,8 +210,10 @@
 			swap_ary[unswdev].ksw_total = ttl;
 			swap_ary[unswdev].ksw_used = xsd.xsw_used;
 			swap_ary[unswdev].ksw_flags = xsd.xsw_flags;
+#if 0
 			GETSWDEVNAME(xsd.xsw_dev, swap_ary[unswdev].ksw_devname,
 			     flags);
+#endif
 		}
 		tot.ksw_total += ttl;
 		tot.ksw_used += xsd.xsw_used;
--- a/lib/libkvm/kvm_minidump_amd64.c
+++ b/lib/libkvm/kvm_minidump_amd64.c
@@ -100,6 +100,15 @@
 	return (-1);
 }
 
+__inline__ u_long
+bsfq(u_long mask)
+{
+	u_long  result;
+
+	__asm __volatile("bsfq %1,%0" : "=r" (result) : "rm" (mask));
+	return (result);
+}
+
 static int
 inithash(kvm_t *kd, uint64_t *base, int len, off_t off)
 {
--- a/lib/libkvm/kvm_minidump_i386.c
+++ b/lib/libkvm/kvm_minidump_i386.c
@@ -102,6 +102,16 @@
 	return (-1);
 }
 
+__inline__ u_int
+bsfl(u_int mask)
+{
+	u_int   result;
+
+	__asm __volatile("bsfl %1,%0" : "=r" (result) : "rm" (mask));
+	return (result);
+}
+
+
 static int
 inithash(kvm_t *kd, uint32_t *base, int len, off_t off)
 {
--- a/lib/libkvm/kvm_private.h
+++ b/lib/libkvm/kvm_private.h
@@ -34,6 +34,8 @@
  * $FreeBSD$
  */
 
+#include <stdint.h>
+
 struct __kvm {
 	/*
 	 * a string to be prepended to error messages
--- a/lib/libkvm/kvm_proc.c
+++ b/lib/libkvm/kvm_proc.c
@@ -54,7 +54,7 @@
 #include <sys/_lock.h>
 #include <sys/_mutex.h>
 #include <sys/_task.h>
-#include <sys/cpuset.h>
+
 #include <sys/user.h>
 #include <sys/proc.h>
 #define	_WANT_PRISON	/* make jail.h give us 'struct prison' */
@@ -101,6 +101,7 @@
 	struct kinfo_proc *bp;
 	int maxcnt;
 {
+#if 0
 	int cnt = 0;
 	struct kinfo_proc kinfo_proc, *kp;
 	struct pgrp pgrp;
@@ -427,6 +428,8 @@
 		++cnt;
 	}
 	return (cnt);
+#endif
+	return -1;
 }
 
 /*
--- a/lib/libkvm/kvm_cptime.c
+++ b/lib/libkvm/kvm_cptime.c
@@ -44,8 +44,8 @@
 #include "kvm_private.h"
 
 static struct nlist kvm_cp_time_nl[] = {
-	{ "_cp_time" },			/* (deprecated) */
-	{ NULL },
+	{ { "_cp_time" } },			/* (deprecated) */
+	{ { NULL } },
 };
 
 #define	NL_CP_TIME		0
--- a/lib/libkvm/kvm_pcpu.c
+++ b/lib/libkvm/kvm_pcpu.c
@@ -41,9 +41,9 @@
 #include "kvm_private.h"
 
 static struct nlist kvm_pcpu_nl[] = {
-	{ "_cpuid_to_pcpu" },
-	{ "_mp_maxcpus" },
-	{ NULL },
+	{ { "_cpuid_to_pcpu" } },
+	{ { "_mp_maxcpus" } },
+	{ { NULL } },
 };
 
 /*
--- a/lib/libkvm/kvm_vnet.c
+++ b/lib/libkvm/kvm_vnet.c
@@ -69,18 +69,18 @@
 		 * here to __{start,stop}_set_vnet.
 		 */
 #define	NLIST_START_VNET	0
-		{ .n_name = "___start_" VNET_SETNAME },
+		{ "___start_" VNET_SETNAME },
 #define	NLIST_STOP_VNET		1
-		{ .n_name = "___stop_" VNET_SETNAME },
+		{ "___stop_" VNET_SETNAME },
 #define	NLIST_VNET_HEAD		2
-		{ .n_name = "vnet_head" },
+		{ "vnet_head" },
 #define	NLIST_ALLPROC		3
-		{ .n_name = "allproc" },
+		{ "allproc" },
 #define	NLIST_DUMPTID		4
-		{ .n_name = "dumptid" },
+		{ "dumptid" },
 #define	NLIST_PROC0		5
-		{ .n_name = "proc0" },
-		{ .n_name = NULL },
+		{ "proc0" },
+		{ NULL },
 	};
 	uintptr_t procp, tdp, credp;
 	lwpid_t dumptid;
