---
 lib/libkvm/Makefile             |    2 +-
 lib/libkvm/kvm.c                |   23 +++++++++++++++++++----
 lib/libkvm/kvm_cptime.c         |    4 ++--
 lib/libkvm/kvm_file.c           |    7 ++++++-
 lib/libkvm/kvm_getloadavg.c     |   12 +++++++++---
 lib/libkvm/kvm_getswapinfo.c    |    8 +++++---
 lib/libkvm/kvm_minidump_amd64.c |    9 +++++++++
 lib/libkvm/kvm_minidump_i386.c  |   10 ++++++++++
 lib/libkvm/kvm_pcpu.c           |    6 +++---
 lib/libkvm/kvm_private.h        |    6 ++++--
 lib/libkvm/kvm_proc.c           |    5 ++++-
 lib/libkvm/kvm_vnet.c           |   14 +++++++-------
 12 files changed, 79 insertions(+), 27 deletions(-)

--- a/lib/libkvm/Makefile
+++ b/lib/libkvm/Makefile
@@ -2,8 +2,8 @@
 # $FreeBSD$
 
 LIB=	kvm
+LDADD= -lbsd
 SHLIBDIR?= /lib
-CFLAGS+=-DLIBC_SCCS -I${.CURDIR}
 
 .if exists(${.CURDIR}/kvm_${MACHINE_ARCH}.c)
 KVM_ARCH=${MACHINE_ARCH}
--- a/lib/libkvm/kvm.c
+++ b/lib/libkvm/kvm.c
@@ -71,6 +71,10 @@
 #include <strings.h>
 #include <unistd.h>
 
+#ifndef _PATH_FWMEM
+#define _PATH_FWMEM     "/dev/fwmem"
+#endif
+
 #include "kvm_private.h"
 
 /* from src/lib/libc/gen/nlist.c */
@@ -144,6 +148,7 @@
 _kvm_open(kvm_t *kd, const char *uf, const char *mf, int flag, char *errout)
 {
 	struct stat st;
+	static char name[MAXPATHLEN];
 
 	kd->vmfd = -1;
 	kd->pmfd = -1;
@@ -153,8 +158,17 @@
 	kd->argspc = 0;
 	kd->argv = 0;
 
-	if (uf == 0)
-		uf = getbootfile();
+	if (uf == 0) {
+		size_t size = sizeof(name);
+		int mib[2];
+
+		mib[0] = CTL_KERN;
+		mib[1] = KERN_BOOTFILE;
+		if (sysctl(mib, 2, name, &size, NULL, 0) == -1)
+			strcpy(name, "/boot/kernel/kernel");
+
+		uf = name;
+	}
 	else if (strlen(uf) >= MAXPATHLEN) {
 		_kvm_err(kd, kd->program, "exec file name too long");
 		goto failed;
--- a/lib/libkvm/kvm_file.c
+++ b/lib/libkvm/kvm_file.c
@@ -59,7 +59,7 @@
 #include <sys/sysctl.h>
 
 #include <limits.h>
-#include <ndbm.h>
+#include <gdbm-ndbm.h>
 #include <paths.h>
 #include <stdlib.h>
 
@@ -78,6 +78,7 @@
 kvm_deadfiles(kvm_t *kd, int op __unused, int arg __unused, long allproc_o,
     int nprocs __unused)
 {
+#if 0
 	struct proc proc;
 	struct filedesc filed;
 	int buflen = kd->arglen, ocnt = 0, n = 0, once = 0, i;
@@ -149,6 +150,7 @@
 	return (n);
 fail:
 	free(ofiles);
+#endif
 	return (0);
 	
 }
@@ -161,6 +163,7 @@
 
 	_kvm_syserr(kd, kd->program, "kvm_getfiles has been broken for years");
 	return (0);
+#if 0
 	if (ISALIVE(kd)) {
 		size = 0;
 		mib[0] = CTL_KERN;
@@ -223,4 +226,6 @@
 	}
 	*cnt = nfiles;
 	return (kd->argspc);
+#endif
+	return 0;
 }
--- a/lib/libkvm/kvm_getloadavg.c
+++ b/lib/libkvm/kvm_getloadavg.c
@@ -55,6 +55,12 @@
 	{ .n_name = "" },
 };
 
+#include <sys/_types.h>
+struct loadavg {
+	__fixpt_t       ldavg[3];
+	long            fscale;
+};
+
 /*
  * kvm_getloadavg() -- Get system load averages, from live or dead kernels.
  *
--- a/lib/libkvm/kvm_getswapinfo.c
+++ b/lib/libkvm/kvm_getswapinfo.c
@@ -200,8 +200,10 @@
 			swap_ary[unswdev].ksw_total = ttl;
 			swap_ary[unswdev].ksw_used = xsd.xsw_used;
 			swap_ary[unswdev].ksw_flags = xsd.xsw_flags;
+#if 0
 			GETSWDEVNAME(xsd.xsw_dev, swap_ary[unswdev].ksw_devname,
 			     flags);
+#endif
 		}
 		tot.ksw_total += ttl;
 		tot.ksw_used += xsd.xsw_used;
--- a/lib/libkvm/kvm_private.h
+++ b/lib/libkvm/kvm_private.h
@@ -34,6 +34,8 @@
  * $FreeBSD$
  */
 
+#include <stdint.h>
+
 struct __kvm {
 	/*
 	 * a string to be prepended to error messages
--- a/lib/libkvm/kvm_proc.c
+++ b/lib/libkvm/kvm_proc.c
@@ -54,7 +54,7 @@
 #include <sys/_lock.h>
 #include <sys/_mutex.h>
 #include <sys/_task.h>
-#include <sys/cpuset.h>
+
 #include <sys/user.h>
 #include <sys/proc.h>
 #define	_WANT_PRISON	/* make jail.h give us 'struct prison' */
@@ -116,6 +116,7 @@
 kvm_proclist(kvm_t *kd, int what, int arg, struct proc *p,
     struct kinfo_proc *bp, int maxcnt)
 {
+#if 0
 	int cnt = 0;
 	struct kinfo_proc kinfo_proc, *kp;
 	struct pgrp pgrp;
@@ -440,6 +441,8 @@
 		++cnt;
 	}
 	return (cnt);
+#endif
+	return -1;
 }
 
 /*
--- a/lib/libkvm/kvm_vnet.c
+++ b/lib/libkvm/kvm_vnet.c
@@ -68,18 +68,18 @@
 		 * here to __{start,stop}_set_vnet.
 		 */
 #define	NLIST_START_VNET	0
-		{ .n_name = "___start_" VNET_SETNAME },
+		{ "___start_" VNET_SETNAME },
 #define	NLIST_STOP_VNET		1
-		{ .n_name = "___stop_" VNET_SETNAME },
+		{ "___stop_" VNET_SETNAME },
 #define	NLIST_VNET_HEAD		2
-		{ .n_name = "vnet_head" },
+		{ "vnet_head" },
 #define	NLIST_ALLPROC		3
-		{ .n_name = "allproc" },
+		{ "allproc" },
 #define	NLIST_DUMPTID		4
-		{ .n_name = "dumptid" },
+		{ "dumptid" },
 #define	NLIST_PROC0		5
-		{ .n_name = "proc0" },
-		{ .n_name = NULL },
+		{ "proc0" },
+		{ NULL },
 	};
 	uintptr_t procp, credp;
 #define	VMCORE_VNET_OF_PROC0
