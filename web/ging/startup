#!/bin/bash
# IMPORTANT:
# don't use <<EOF anywhere in this file.  Bash would attempt to create a
# tempfile and, since our /tmp is readonly, fail.

ging_msg ()
  {
    # enable green
    echo -en "\x1B[0;32m"
    echo "@distribution_lowcase@: $@ ..."
    # disable green
    echo -en "\x1B[0m"
  }

export TERM=cons25
exec < /dev/console > /dev/console 2> /dev/console

ging_msg "@distribution@ @version@ starting"

# do this as soon as we have stdio
set -e
trap "echo \"Something wicked happened.  Press enter for rescue shell.\" ; read ; bash" 0

# this will allow us to run stuff from the cloop directly, once it's accessible
export PATH=/cloop/sbin:/cloop/bin:/cloop/usr/sbin:/cloop/usr/bin:/sbin:/bin:/usr/sbin:/usr/bin
export LD_LIBRARY_PATH=/cloop/lib:/cloop/usr/lib

ging_msg "Searching for @distribution@ cdrom"
for i in /dev/acd* /dev/cd* ; do
  if mount_cd9660 $i /cdrom > /dev/null && test -f /cdrom/ging.cloop ; then
    break
  fi
  umount /cdrom 2> /dev/null
done
# assert we found it
test -f /cdrom/ging.cloop

ging_msg "Accessing cloop image"
md1=`mdconfig -a -t vnode -f /cdrom/ging.cloop`
# According to FreeSBIE, there's race condition here.  Let's add a semaphore
while ! test -e /dev/${md1}.uzip ; do
  ging_msg "cloop device not yet ready, retrying"
  sleep 1
done
mount_cd9660 /dev/${md1}.uzip /cloop

# IMPORTANT: We just mounted the cloop image.  From now on, we're using commands
# from the cloop.  We don't need to add any commands to the mfsroot unless
# they're needed in the steps before this point!

ging_msg "Generating @ramdisk_size@ MB UFS2 ramdisk"
md2=`mdconfig -a -t malloc -o compress -s @ramdisk_size@m`
mkfs.ufs -U /dev/${md2} > /dev/null 2> /dev/null
mount -o rw,noatime -t ufs /dev/${md2} /ramdisk

ging_msg "Populating ramdisk node (this might take a while)"

# readonly dirs from cloop
for i in bin usr boot lib libexec sbin var/{lib/{dpkg,apt},cache/apt} ; do
  mkdir -p /ramdisk/$i
  mount_nullfs /cloop/$i /ramdisk/$i
done

# virtual mounts
mkdir -p /ramdisk/{dev,proc}
mount_devfs null /ramdisk/dev
mount_linprocfs null /ramdisk/proc

for i in `cd /cloop && echo *` ; do
  case $i in
    dev|proc|bin|usr|boot|lib|libexec|sbin)
    ;;
    var)
      # partialy readonly, so expect failure
      cp -a /cloop/$i /ramdisk/ 2>/dev/null || true
    ;;
    *)
      cp -a /cloop/$i /ramdisk/
    ;;
  esac
done

ging_msg "Setting up network via DHCP (in background)"
chroot /ramdisk dhclient3 < /dev/null > /dev/null 2> /dev/null &

ging_msg "Spawning chrooted init"

unset LD_LIBRARY_PATH
# Save chroot path, before we can no longer find it
chroot=`which chroot`
# These are set by Linux, but kFreeBSD doesn't play with them.  So, let's set
# them here just in case.
export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/bin2
export HOME=/
exec ${chroot} /ramdisk init $@ <&- >&- 2>&- 255>&-
false

