#!/bin/bash

ging_msg ()
  {
    # enable green
    echo -en "\x1B[0;32m"
    echo "ging: $@ ..."
    # disable green
    echo -en "\x1B[0m"
  }

# if we don't have proper std streams, get some
if ! ging_msg "Ging @version@ starting" ; then
  export TERM=cons25
  exec $0 < /dev/console > /dev/console 2> /dev/console
fi

set -e
trap "echo \"Something wicked happened.  Press enter for rescue shell.\" ; read ; bash" 0

# IMPORTANT:
# don't use <<EOF anywhere in this file.  Bash would attempt to create a
# tempfile and, since our /tmp is readonly, would fail.

ramdisk_size=32
ging_msg "Generating ${ramdisk_size} MB UFS2 ramdisk"
mdconfig -a -t malloc -o compress -s ${ramdisk_size}m -u md0
mkfs.ufs /dev/md0 > /dev/null
mount -o rw -t ufs /dev/md0 /ramdisk

ging_msg "Populating ramdisk node (this might take a while)"

for i in bin usr boot lib libexec sbin var/{lib/{dpkg,apt},cache/apt} ; do
  mkdir -p /ramdisk/$i
  mount -t nullfs /$i /ramdisk/$i
done

mkdir -p /ramdisk/{dev,proc}
mount -t devfs null /ramdisk/dev
mount -t linprocfs null /ramdisk/proc

for i in /* ; do
  case $i in
    /dev|/proc|/bin|/usr|/boot|/lib|/libexec|/sbin|/base|/ramdisk|/*-RELEASE)
    ;;
    /var)
      # partialy readonly, so expect failure
      cp -a $i /ramdisk/ 2>/dev/null || true
    ;;
    *)
      cp -a $i /ramdisk/
    ;;
  esac
done

ging_msg "Setting up network via DHCP (in background)"
if which dhclient3 >/dev/null 2>/dev/null ; then
  chroot /ramdisk dhclient3 < /dev/null >/dev/null 2>/dev/null &
fi

ging_msg "Preparing environment for chrooted init"

# make /etc/init.d/checkroot happy
echo "/dev/md0	/	ufs		rw	0 0" > /ramdisk/etc/fstab

# -i|--init is an undocumented flag.  read the source.
exec chroot /ramdisk /sbin/init -i <&- >&- 2>&- 255>&-
false
