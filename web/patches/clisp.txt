
clisp currently fails on kfreebsd-amd64

ffcall does not work correctly, see #451356

also main clisp needs fix up for kfreebsd-amd64:


only in patch2:
unchanged:
--- clisp-2.42.orig/src/lispbibl.d
+++ clisp-2.42/src/lispbibl.d
@@ -3000,7 +3000,7 @@
 #endif
 
 
-#if (oint_addr_shift == 0) && (addr_shift == 0) && defined(TYPECODES) && !defined(WIDE_SOFT) && !(defined(SUN3) && !defined(UNIX_SUNOS4) && !defined(WIDE_SOFT)) && !(defined(AMD64) && defined(UNIX_LINUX))
+#if (oint_addr_shift == 0) && (addr_shift == 0) && defined(TYPECODES) && !defined(WIDE_SOFT) && !(defined(SUN3) && !defined(UNIX_SUNOS4) && !defined(WIDE_SOFT)) && !defined(AMD64)
 # If the address bits are the lower ones and not WIDE_SOFT,
 # memory mapping may be possible.
 
only in patch2:
unchanged:
--- clisp-2.42.orig/src/spvw.d
+++ clisp-2.42/src/spvw.d
@@ -2682,7 +2682,7 @@
       var aint end = bitm(oint_addr_len-1); # keep garcol_bit zero
        #endif
       var aint part = floor(end - (start & (end-1)),5);
-      #if defined(AMD64) && defined(UNIX_LINUX)
+      #if defined(AMD64)
       # Don't use more than 36 address bits, otherwise mmap() fails.
       part &= 0x0000000FFFFFFFFFUL;
       #endif
@@ -2724,7 +2724,7 @@
         #endif
        #endif
       var aint part = floor(end - (start & (end-1)),5);
-      #if defined(AMD64) && defined(UNIX_LINUX)
+      #if defined(AMD64)
       # Don't use more than 36 address bits, otherwise mmap() fails.
       part &= 0x0000000FFFFFFFFFUL;
       #endif
only in patch2:
unchanged:
--- clisp-2.42.orig/src/spvw_page.d
+++ clisp-2.42/src/spvw_page.d
@@ -113,7 +113,7 @@
       # only a 2^32 size address space.
       #define oint_addr_relevant_len  32
     #endif
-    #if (defined(IA64) || defined(AMD64)) && defined(UNIX_LINUX)
+    #if (defined(IA64) || defined(AMD64))
       # It is unlikely that more than 4 GB will be used.
       #define oint_addr_relevant_len  32
     #endif
