
Author: petr
Status: dirty hack

diff -u net-snmp-5.2.2/debian/control net-snmp-5.2.2/debian/control
--- net-snmp-5.2.2/debian/control
+++ net-snmp-5.2.2/debian/control
@@ -2,7 +2,7 @@
 Section: net
 Priority: optional
 Maintainer: Jochen Friedrich <jochen@scram.de>
-Build-Depends: debhelper (>=4.1.16), libtool, libwrap0-dev, libssl-dev (>> 0.9.8), perl (>=5.8), autoconf, automake, debianutils (>=1.13.1), bash (>=2.05), findutils (>=4.1.20), libsensors-dev (>=2.8.5), procps
+Build-Depends: debhelper (>=4.1.16), libtool, libwrap0-dev, libssl-dev (>> 0.9.8), perl (>=5.8), autoconf, automake, debianutils (>=1.13.1), bash (>=2.05), findutils (>=4.1.20), libkvm-dev [kfreebsd-i386 kfreebsd-amd64], libsensors-dev (>=2.8.5) [!hurd-i386 !kfreebsd-i386 !kfreebsd-amd64] , procps
 Standards-Version: 3.6.2
 
 Package: snmpd
diff -u net-snmp-5.2.2/debian/rules net-snmp-5.2.2/debian/rules
--- net-snmp-5.2.2/debian/rules
+++ net-snmp-5.2.2/debian/rules
@@ -28,13 +28,13 @@
 CFLAGS += -g
 endif
 
-MIB_MODULES = host smux ucd-snmp/dlmod ucd-snmp/diskio ucd-snmp/lmSensors
+MIB_MODULES = host smux ucd-snmp/dlmod
 BACKUP = aclocal.m4 config.guess config.sub configure ltmain.sh stamp-h \
          stamp-h.in include/net-snmp/net-snmp-config.h.in
-#ifeq "$(ARCH)" "i386"
-#MIB_MODULES +=  ucd-snmp/lmSensors
+ifeq "$(ARCH)" "i386"
+MIB_MODULES +=  ucd-snmp/lmSensors
 LIBSENSORS = -lsensors
-#endif
+endif
 
 build:  build-stamp
 build-stamp: debian/stamp-patched
@@ -55,7 +55,7 @@
 	  --enable-ucd-snmp-compatibility \
 	  --enable-shared --with-cflags="$(CFLAGS)" \
 	  --with-perl-modules="INSTALLDIRS=vendor" \
-	  --enable-ipv6 --with-logfile=none \
+	  --disable-ipv6 --with-logfile=none \
 	  --without-rpm --with-libwrap --with-openssl \
 	  --without-dmalloc --without-efence --without-rsaref \
 	  --with-sys-contact="root" --with-sys-location="Unknown" \
only in patch2:
unchanged:
--- net-snmp-5.2.2.orig/agent/mibgroup/ucd_snmp.h
+++ net-snmp-5.2.2/agent/mibgroup/ucd_snmp.h
@@ -39,6 +39,10 @@
 config_arch_require(freebsd4, ucd-snmp/memory_freebsd2)
 config_arch_require(freebsd5, ucd-snmp/vmstat_freebsd2)
 config_arch_require(freebsd5, ucd-snmp/memory_freebsd2)
+config_arch_require(kfreebsd5, ucd-snmp/vmstat_freebsd2)
+config_arch_require(kfreebsd5, ucd-snmp/memory_freebsd2)
+config_arch_require(kfreebsd6, ucd-snmp/vmstat_freebsd2)
+config_arch_require(kfreebsd6, ucd-snmp/memory_freebsd2)
 config_arch_require(netbsd1, ucd-snmp/vmstat_netbsd1)
 config_arch_require(netbsd1, ucd-snmp/memory_netbsd1)
 config_arch_require(netbsd, ucd-snmp/vmstat_netbsd1)
only in patch2:
unchanged:
--- net-snmp-5.2.2.orig/include/net-snmp/system/kfreebsd.h
+++ net-snmp-5.2.2/include/net-snmp/system/kfreebsd.h
@@ -0,0 +1,85 @@
+#include "freebsd5.h"
+#define freebsd5
+
+#include <osreldate.h>
+#define __FreeBSD_version __FreeBSD_kernel_version
+
+#include <sys/queue.h>
+#include <sys/_types.h>
+
+typedef unsigned int tcp_seq;
+typedef unsigned int tcp_cc;        
+#define TCPOPT_SACK_HDR         (TCPOPT_NOP<<24|TCPOPT_NOP<<16|TCPOPT_SACK<<8)
+#define MAX_SACK_BLKS   6       /* Max # SACK blocks stored at sender side */
+#define TCP_MAX_SACK    3       /* MAX # SACKs sent in any segment */
+
+#include <netinet/tcp_var.h>  
+
+#include <net/ethernet.h>
+#include <net/if_arp.h>
+#include <netinet/in.h>
+
+typedef unsigned char u_char;
+typedef unsigned short u_short;
+
+struct sockaddr_inarp {
+        u_char  sin_len;
+        u_char  sin_family;
+        u_short sin_port;
+        struct  in_addr sin_addr;
+        struct  in_addr sin_srcaddr;
+        u_short sin_tos;
+        u_short sin_other;
+#define SIN_PROXY 1
+};
+/*
+ * Externalized form of struct socket used by the sysctl(3) interface.
+ */
+struct xsocket {
+        size_t  xso_len;        /* length of this structure */
+        struct  socket *xso_so; /* makes a convenient handle sometimes */
+        short   so_type;
+        short   so_options;
+        short   so_linger;
+        short   so_state;
+        caddr_t so_pcb;         /* another convenient handle */
+        int     xso_protocol;
+        int     xso_family;
+        short   so_qlen;
+        short   so_incqlen;
+        short   so_qlimit;
+        short   so_timeo;
+        u_short so_error;
+        pid_t   so_pgid;
+        u_long  so_oobmark;
+        struct xsockbuf {
+                u_int   sb_cc;
+                u_int   sb_hiwat;
+                u_int   sb_mbcnt;
+                u_int   sb_mbmax;
+                int     sb_lowat;
+                int     sb_timeo;
+                short   sb_flags;
+        } so_rcv, so_snd;
+        uid_t   so_uid;         /* XXX */
+};
+typedef     u_quad_t so_gen_t;
+
+#define _SYS_SOCKETVAR_H_
+#include <netinet/in_pcb.h>
+
+struct  xtcpcb {
+        size_t  xt_len;
+        struct  inpcb   xt_inp;
+        struct  tcpcb   xt_tp;
+        struct  xsocket xt_socket;
+        u_quad_t        xt_alignment_hack;
+};
+
+/* Segment flag values. */
+enum uio_seg {
+        UIO_USERSPACE,          /* from user data space */
+        UIO_SYSSPACE,           /* from system space */
+        UIO_NOCOPY              /* don't copy, already in object */
+};
+                        
