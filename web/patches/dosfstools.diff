=== modified file 'src/common.h'
--- src/common.h	2011-07-10 12:13:57 +0000
+++ src/common.h	2011-07-10 12:22:49 +0000
@@ -19,7 +19,7 @@
    can be found in /usr/share/common-licenses/GPL-3 file.
 */
 
-# include <asm/types.h>
+//#include "types.h"
 
 #ifndef _COMMON_H
 #define _COMMON_H

=== modified file 'src/dosfsck.h'
--- src/dosfsck.h	2011-07-10 12:13:57 +0000
+++ src/dosfsck.h	2011-07-10 12:18:18 +0000
@@ -28,14 +28,7 @@
 #define _DOSFSCK_H
 
 #include <sys/types.h>
-#define _LINUX_STAT_H		/* hack to avoid inclusion of <linux/stat.h> */
-#define _LINUX_STRING_H_	/* hack to avoid inclusion of <linux/string.h>*/
-#define _LINUX_FS_H             /* hack to avoid inclusion of <linux/fs.h> */
-
-# include <asm/types.h>
-# include <asm/byteorder.h>
-
-#include <linux/msdos_fs.h>
+#include "msdos_fs.h"
 
 #undef CF_LE_W
 #undef CF_LE_L

=== modified file 'src/file.c'
--- src/file.c	2011-07-10 12:13:57 +0000
+++ src/file.c	2011-07-10 12:22:33 +0000
@@ -30,13 +30,9 @@
 #include <ctype.h>
 #include <unistd.h>
 
-#define _LINUX_STAT_H		/* hack to avoid inclusion of <linux/stat.h> */
-#define _LINUX_STRING_H_	/* hack to avoid inclusion of <linux/string.h>*/
-#define _LINUX_FS_H             /* hack to avoid inclusion of <linux/fs.h> */
-
-# include <asm/types.h>
-
-#include <linux/msdos_fs.h>
+//# include "types.h"
+
+#include "msdos_fs.h"
 
 #include "common.h"
 #include "file.h"

=== modified file 'src/io.c'
--- src/io.c	2011-07-10 12:13:57 +0000
+++ src/io.c	2011-07-10 12:23:03 +0000
@@ -39,7 +39,7 @@
 #include <sys/ioctl.h>
 #include <errno.h>
 #include <fcntl.h>
-#include <linux/fd.h>
+//#include <linux/fd.h>
 
 #include "dosfsck.h"
 #include "common.h"

=== modified file 'src/mkdosfs.c'
--- src/mkdosfs.c	2011-07-10 12:13:57 +0000
+++ src/mkdosfs.c	2011-07-10 12:37:56 +0000
@@ -46,9 +46,9 @@
 #include "version.h"
 
 #include <fcntl.h>
-#include <linux/hdreg.h>
+//#include <linux/hdreg.h>
 #include <sys/mount.h>
-#include <linux/fd.h>
+//#include <linux/fd.h>
 #include <endian.h>
 #include <mntent.h>
 #include <signal.h>
@@ -63,11 +63,11 @@
 #include <time.h>
 #include <errno.h>
 
-# include <asm/types.h>
+#include "types.h"
 
 #if __BYTE_ORDER == __BIG_ENDIAN
 
-#include <asm/byteorder.h>
+//#include <asm/byteorder.h>
 #ifdef __le16_to_cpu
 /* ++roman: 2.1 kernel headers define these function, they're probably more
  * efficient then coding the swaps machine-independently. */
@@ -103,6 +103,8 @@
 
 #define TEST_BUFFER_BLOCKS 16
 #define HARD_SECTOR_SIZE   512
+#define BLOCK_SIZE_BITS    10
+#define BLOCK_SIZE         (1<<BLOCK_SIZE_BITS)
 #define SECTORS_PER_BLOCK ( BLOCK_SIZE / HARD_SECTOR_SIZE )
 
 
@@ -589,11 +591,17 @@
 static void
 establish_params (int device_num,int size)
 {
+#if 0 /* XXX */
   long loop_size;
+#ifdef HDIO_GETGEO
   struct hd_geometry geometry;
+#endif
+#ifdef FDGETPRM
   struct floppy_struct param;
+#endif
   int def_root_dir_entries = 512;
 
+#ifdef FDGETPRM
   if ((0 == device_num) || ((device_num & 0xff00) == 0x0200))
     /* file image or floppy disk */
     {
@@ -677,10 +685,23 @@
 	      goto floppy_default;
 	}
     }
-  else if ((device_num & 0xff00) == 0x0700) /* This is a loop device */
+  else
+#endif
+  if ((device_num & 0xff00) == 0x0700) /* This is a loop device */
     {
+#if defined(BLKGETSIZE)
       if (ioctl (dev, BLKGETSIZE, &loop_size))
 	die ("unable to get loop device size");
+#elif defined(DIOCGMEDIASIZE)
+      {
+	unsigned long long bytes;
+        if (ioctl (dev, DIOCGMEDIASIZE, &bytes))
+	  die ("unable to get loop device size");
+	loop_size = bytes;
+      }
+#else
+      die ("unable to get loop device size");
+#endif
 
       switch (loop_size)  /* Assuming the loop device -> floppy later */
 	{
@@ -733,6 +754,7 @@
 	  goto def_hd_params;
 	}
     }
+#ifdef HDIO_GETGEO
   else
     /* Must be a hard disk then! */
     {
@@ -773,9 +795,11 @@
 	  bs.cluster_size = (char) 4;
       }
     }
+#endif
 
   if (!root_dir_entries)
     root_dir_entries = def_root_dir_entries;
+#endif
 }
 
 /*

=== added file 'src/msdos_fs.h'
--- src/msdos_fs.h	1970-01-01 00:00:00 +0000
+++ src/msdos_fs.h	2011-07-10 12:23:56 +0000
@@ -0,0 +1,166 @@
+
+/* Stolen from <linux/msdos_fs.h>.  */
+
+#ifndef _MSDOS_FS_H
+#define _MSDOS_FS_H
+
+#include "types.h"
+
+/*
+ * The MS-DOS filesystem constants/structures
+ */
+
+#define SECTOR_SIZE	512		/* sector size (bytes) */
+#define SECTOR_BITS	9		/* log2(SECTOR_SIZE) */
+#define MSDOS_DPB	(MSDOS_DPS)	/* dir entries per block */
+#define MSDOS_DPB_BITS	4		/* log2(MSDOS_DPB) */
+#define MSDOS_DPS	(SECTOR_SIZE / sizeof(struct msdos_dir_entry))
+#define MSDOS_DPS_BITS	4		/* log2(MSDOS_DPS) */
+#define CF_LE_W(v)	le16_to_cpu(v)
+#define CF_LE_L(v)	le32_to_cpu(v)
+#define CT_LE_W(v)	cpu_to_le16(v)
+#define CT_LE_L(v)	cpu_to_le32(v)
+
+
+#define MSDOS_ROOT_INO	1	/* == MINIX_ROOT_INO */
+#define MSDOS_DIR_BITS	5	/* log2(sizeof(struct msdos_dir_entry)) */
+
+/* directory limit */
+#define FAT_MAX_DIR_ENTRIES	(65536)
+#define FAT_MAX_DIR_SIZE	(FAT_MAX_DIR_ENTRIES << MSDOS_DIR_BITS)
+
+#define ATTR_NONE	0	/* no attribute bits */
+#define ATTR_RO		1	/* read-only */
+#define ATTR_HIDDEN	2	/* hidden */
+#define ATTR_SYS	4	/* system */
+#define ATTR_VOLUME	8	/* volume label */
+#define ATTR_DIR	16	/* directory */
+#define ATTR_ARCH	32	/* archived */
+
+/* attribute bits that are copied "as is" */
+#define ATTR_UNUSED	(ATTR_VOLUME | ATTR_ARCH | ATTR_SYS | ATTR_HIDDEN)
+/* bits that are used by the Windows 95/Windows NT extended FAT */
+#define ATTR_EXT	(ATTR_RO | ATTR_HIDDEN | ATTR_SYS | ATTR_VOLUME)
+
+#define CASE_LOWER_BASE	8	/* base is lower case */
+#define CASE_LOWER_EXT	16	/* extension is lower case */
+
+#define DELETED_FLAG	0xe5	/* marks file as deleted when in name[0] */
+#define IS_FREE(n)	(!*(n) || *(n) == DELETED_FLAG)
+
+#define MSDOS_NAME	11	/* maximum name length */
+#define MSDOS_LONGNAME	256	/* maximum name length */
+#define MSDOS_SLOTS	21	/* max # of slots for short and long names */
+#define MSDOS_DOT	".          "	/* ".", padded to MSDOS_NAME chars */
+#define MSDOS_DOTDOT	"..         "	/* "..", padded to MSDOS_NAME chars */
+
+#define FAT_FIRST_ENT(s, x)	((MSDOS_SB(s)->fat_bits == 32 ? 0x0FFFFF00 : \
+	MSDOS_SB(s)->fat_bits == 16 ? 0xFF00 : 0xF00) | (x))
+
+/* start of data cluster's entry (number of reserved clusters) */
+#define FAT_START_ENT	2
+
+/* maximum number of clusters */
+#define MAX_FAT12	0xFF4
+#define MAX_FAT16	0xFFF4
+#define MAX_FAT32	0x0FFFFFF6
+#define MAX_FAT(s)	(MSDOS_SB(s)->fat_bits == 32 ? MAX_FAT32 : \
+	MSDOS_SB(s)->fat_bits == 16 ? MAX_FAT16 : MAX_FAT12)
+
+/* bad cluster mark */
+#define BAD_FAT12	0xFF7
+#define BAD_FAT16	0xFFF7
+#define BAD_FAT32	0x0FFFFFF7
+
+/* standard EOF */
+#define EOF_FAT12	0xFFF
+#define EOF_FAT16	0xFFFF
+#define EOF_FAT32	0x0FFFFFFF
+
+#define FAT_ENT_FREE	(0)
+#define FAT_ENT_BAD	(BAD_FAT32)
+#define FAT_ENT_EOF	(EOF_FAT32)
+
+#define FAT_FSINFO_SIG1	0x41615252
+#define FAT_FSINFO_SIG2	0x61417272
+#define IS_FSINFO(x)	(le32_to_cpu((x)->signature1) == FAT_FSINFO_SIG1 \
+			 && le32_to_cpu((x)->signature2) == FAT_FSINFO_SIG2)
+
+struct __fat_dirent {
+	long		d_ino;
+	off_t		d_off;
+	unsigned short	d_reclen;
+	char		d_name[256]; /* We must not include limits.h! */
+};
+
+/*
+ * ioctl commands
+ */
+#define VFAT_IOCTL_READDIR_BOTH		_IOR('r', 1, struct __fat_dirent[2])
+#define VFAT_IOCTL_READDIR_SHORT	_IOR('r', 2, struct __fat_dirent[2])
+/* <linux/videotext.h> has used 0x72 ('r') in collision, so skip a few */
+#define FAT_IOCTL_GET_ATTRIBUTES	_IOR('r', 0x10, __u32)
+#define FAT_IOCTL_SET_ATTRIBUTES	_IOW('r', 0x11, __u32)
+
+struct fat_boot_sector {
+	__u8	ignored[3];	/* Boot strap short or near jump */
+	__u8	system_id[8];	/* Name - can be used to special case
+				   partition manager volumes */
+	__u8	sector_size[2];	/* bytes per logical sector */
+	__u8	sec_per_clus;	/* sectors/cluster */
+	__le16	reserved;	/* reserved sectors */
+	__u8	fats;		/* number of FATs */
+	__u8	dir_entries[2];	/* root directory entries */
+	__u8	sectors[2];	/* number of sectors */
+	__u8	media;		/* media code */
+	__le16	fat_length;	/* sectors/FAT */
+	__le16	secs_track;	/* sectors per track */
+	__le16	heads;		/* number of heads */
+	__le32	hidden;		/* hidden sectors (unused) */
+	__le32	total_sect;	/* number of sectors (if sectors == 0) */
+
+	/* The following fields are only used by FAT32 */
+	__le32	fat32_length;	/* sectors/FAT */
+	__le16	flags;		/* bit 8: fat mirroring, low 4: active fat */
+	__u8	version[2];	/* major, minor filesystem version */
+	__le32	root_cluster;	/* first cluster in root directory */
+	__le16	info_sector;	/* filesystem info sector */
+	__le16	backup_boot;	/* backup boot sector */
+	__le16	reserved2[6];	/* Unused */
+};
+
+struct fat_boot_fsinfo {
+	__le32   signature1;	/* 0x41615252L */
+	__le32   reserved1[120];	/* Nothing as far as I can tell */
+	__le32   signature2;	/* 0x61417272L */
+	__le32   free_clusters;	/* Free cluster count.  -1 if unknown */
+	__le32   next_cluster;	/* Most recently allocated cluster */
+	__le32   reserved2[4];
+};
+
+struct msdos_dir_entry {
+	__u8	name[MSDOS_NAME];/* name and extension */
+	__u8	attr;		/* attribute bits */
+	__u8    lcase;		/* Case for base and extension */
+	__u8	ctime_cs;	/* Creation time, centiseconds (0-199) */
+	__le16	ctime;		/* Creation time */
+	__le16	cdate;		/* Creation date */
+	__le16	adate;		/* Last access date */
+	__le16	starthi;	/* High 16 bits of cluster in FAT32 */
+	__le16	time,date,start;/* time, date and first cluster */
+	__le32	size;		/* file size (in bytes) */
+};
+
+/* Up to 13 characters of the name */
+struct msdos_dir_slot {
+	__u8    id;		/* sequence number for slot */
+	__u8    name0_4[10];	/* first 5 characters in name */
+	__u8    attr;		/* attribute byte */
+	__u8    reserved;	/* always 0 */
+	__u8    alias_checksum;	/* checksum for 8.3 alias */
+	__u8    name5_10[12];	/* 6 more characters in name */
+	__le16   start;		/* starting cluster number, 0 in long slots */
+	__u8    name11_12[4];	/* last 2 characters in name */
+};
+
+#endif /* !_LINUX_MSDOS_FS_H */

=== added file 'src/types.h'
--- src/types.h	1970-01-01 00:00:00 +0000
+++ src/types.h	2011-07-10 12:24:14 +0000
@@ -0,0 +1,14 @@
+#ifndef _TYPES_H
+#define _TYPES_H
+
+#include <stdint.h>
+
+typedef uint8_t		__u8;
+typedef uint16_t	__u16;
+typedef uint32_t	__u32;
+
+typedef uint8_t		__le8;
+typedef uint16_t	__le16;
+typedef uint32_t	__le32;
+
+#endif

