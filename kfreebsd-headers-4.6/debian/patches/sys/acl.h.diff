*** orig/sys/acl.h	Fri Jan 28 16:22:51 2000
--- import/sys/acl.h	Fri Sep  6 01:13:38 2002
***************
*** 1,3 ****
--- 1,22 ----
+ /* Header file for Access Control Lists.  FreeBSD version.
+    Copyright (C) 2002 Free Software Foundation, Inc.
+    This file is part of the GNU C Library.
+ 
+    The GNU C Library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Lesser General Public
+    License as published by the Free Software Foundation; either
+    version 2.1 of the License, or (at your option) any later version.
+ 
+    The GNU C Library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Lesser General Public License for more details.
+ 
+    You should have received a copy of the GNU Lesser General Public
+    License along with the GNU C Library; if not, write to the Free
+    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+    02111-1307 USA.  */
+ 
  /*-
   * Copyright (c) 1999, 2000 Robert N. M. Watson
   * All rights reserved.
***************
*** 36,41 ****
--- 55,63 ----
  #ifndef _SYS_ACL_H
  #define	_SYS_ACL_H
  
+ #include <features.h>
+ #include <sys/types.h>
+ 
  /*
   * POSIX.1e ACL types and related constants
   */
***************
*** 91,149 ****
  #define	ACL_PERM_BITS	(ACL_PERM_EXEC | ACL_PERM_WRITE | ACL_PERM_READ)
  #define	ACL_POSIX1E_BITS	(ACL_PERM_EXEC | ACL_PERM_WRITE | ACL_PERM_READ)
  
- #ifdef _KERNEL
- 
- /*
-  * Storage for ACLs and support structures
-  */
- #ifdef MALLOC_DECLARE
- MALLOC_DECLARE(M_ACL);
- #endif
- 
- #else /* !_KERNEL */
- 
  /*
!  * Syscall interface -- use the library calls instead as the syscalls
   * have strict acl entry ordering requirements
   */
  __BEGIN_DECLS
! int	__acl_aclcheck_fd(int _filedes, acl_type_t _type, struct acl *_aclp);
! int	__acl_aclcheck_file(const char *_path, acl_type_t _type,
! 	    struct acl *_aclp);
! int	__acl_delete_fd(int _filedes, acl_type_t _type);
! int	__acl_delete_file(const char *_path_p, acl_type_t _type);
! int	__acl_get_fd(int _filedes, acl_type_t _type, struct acl *_aclp);
! int	__acl_get_file(const char *_path, acl_type_t _type, struct acl *_aclp);
! int	__acl_set_fd(int _filedes, acl_type_t _type, struct acl *_aclp);
! int	__acl_set_file(const char *_path, acl_type_t _type, struct acl *_aclp);
  __END_DECLS
  
  /*
!  * Supported POSIX.1e ACL manipulation and assignment/retrieval API
   * _np calls are local extensions that reflect an environment capable of
   * opening file descriptors of directories, and allowing additional
   * ACL type for different file systems (i.e., AFS)
   */
  __BEGIN_DECLS
! int	acl_delete_fd_np(int _filedes, acl_type_t _type);
! int	acl_delete_file_np(const char *_path_p, acl_type_t _type);
! int	acl_delete_def_file(const char *_path_p);
! acl_t	acl_dup(acl_t _acl);
! int	acl_free(void *_obj_p);
! acl_t	acl_from_text(const char *_buf_p);
! acl_t	acl_get_fd(int _fd);
! acl_t	acl_get_fd_np(int fd, acl_type_t _type);
! acl_t	acl_get_file(const char *_path_p, acl_type_t _type);
! acl_t	acl_init(int _count);
! int	acl_set_fd(int _fd, acl_t _acl);
! int	acl_set_fd_np(int _fd, acl_t _acl, acl_type_t _type);
! int	acl_set_file(const char *_path_p, acl_type_t _type, acl_t _acl);
! char	*acl_to_text(acl_t _acl, ssize_t *_len_p);
! int	acl_valid(acl_t _acl);
! int	acl_valid_fd_np(int _fd, acl_type_t _type, acl_t _acl);
! int	acl_valid_file_np(const char *_path_p, acl_type_t _type, acl_t _acl);
  __END_DECLS
  
- #endif /* !_KERNEL */
- 
  #endif /* !_SYS_ACL_H */
--- 113,172 ----
  #define	ACL_PERM_BITS	(ACL_PERM_EXEC | ACL_PERM_WRITE | ACL_PERM_READ)
  #define	ACL_POSIX1E_BITS	(ACL_PERM_EXEC | ACL_PERM_WRITE | ACL_PERM_READ)
  
  /*
!  * Syscall interface, defined in libc.
!  * You should use the libposix1e library calls instead as the syscalls
   * have strict acl entry ordering requirements
   */
  __BEGIN_DECLS
! extern int __acl_aclcheck_fd (int __fd, acl_type_t __type,
! 			      struct acl *__aclp) __THROW;
! extern int __acl_aclcheck_file (__const char *__path, acl_type_t __type,
! 				struct acl *__aclp) __THROW;
! extern int __acl_delete_fd (int __fd, acl_type_t __type) __THROW;
! extern int __acl_delete_file (__const char *__path, acl_type_t __type) __THROW;
! extern int __acl_get_fd (int __fd, acl_type_t __type,
! 			 struct acl *__aclp) __THROW;
! extern int __acl_get_file (__const char *_path, acl_type_t __type,
! 			   struct acl *__aclp) __THROW;
! extern int __acl_set_fd (int __fd, acl_type_t __type,
! 			 struct acl *__aclp) __THROW;
! extern int __acl_set_file (__const char *__path, acl_type_t __type,
! 			   struct acl *_aclp) __THROW;
  __END_DECLS
  
  /*
!  * Supported POSIX.1e ACL manipulation and assignment/retrieval API,
!  * defined in libposix1e.
   * _np calls are local extensions that reflect an environment capable of
   * opening file descriptors of directories, and allowing additional
   * ACL type for different file systems (i.e., AFS)
   */
  __BEGIN_DECLS
! extern int acl_delete_fd_np (int __fd,
! 			     acl_type_t __type) __THROW;
! extern int acl_delete_file_np (__const char *__path,
! 			       acl_type_t __type) __THROW;
! extern int acl_delete_def_file (__const char *__path) __THROW;
! extern acl_t acl_dup (acl_t __acl) __THROW;
! extern int acl_free (void *__obj) __THROW;
! extern acl_t acl_from_text (__const char *__buf) __THROW;
! extern acl_t acl_get_fd (int __fd) __THROW;
! extern acl_t acl_get_fd_np (int __fd, acl_type_t __type) __THROW;
! extern acl_t acl_get_file (__const char *__path, acl_type_t __type) __THROW;
! extern acl_t acl_init (int __count) __THROW;
! extern int acl_set_fd (int __fd,
! 		       acl_t __acl) __THROW;
! extern int acl_set_fd_np (int __fd,
! 			  acl_t __acl, acl_type_t __type) __THROW;
! extern int acl_set_file (__const char *__path,
! 			 acl_type_t __type, acl_t __acl) __THROW;
! extern char *acl_to_text (acl_t __acl, ssize_t *__lenp) __THROW;
! extern int acl_valid (acl_t __acl) __THROW;
! extern int acl_valid_fd_np (int __fd,
! 			    acl_type_t __type, acl_t __acl) __THROW;
! extern int acl_valid_file_np (__const char *__path,
! 			      acl_type_t __type, acl_t __acl) __THROW;
  __END_DECLS
  
  #endif /* !_SYS_ACL_H */
