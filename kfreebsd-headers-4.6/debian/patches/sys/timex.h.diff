*** orig/sys/timex.h	Sun Apr 22 13:19:39 2001
--- import/sys/timex.h	Fri Sep  6 01:30:38 2002
***************
*** 1,3 ****
--- 1,21 ----
+ /* Copyright (C) 2002 Free Software Foundation, Inc.
+    This file is part of the GNU C Library.
+ 
+    The GNU C Library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Lesser General Public
+    License as published by the Free Software Foundation; either
+    version 2.1 of the License, or (at your option) any later version.
+ 
+    The GNU C Library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Lesser General Public License for more details.
+ 
+    You should have received a copy of the GNU Lesser General Public
+    License along with the GNU C Library; if not, write to the Free
+    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+    02111-1307 USA.  */
+ 
  /***********************************************************************
   *								       *
   * Copyright (c) David L. Mills 1993-2001			       *
***************
*** 94,104 ****
   */
  #ifndef _SYS_TIMEX_H_
  #define _SYS_TIMEX_H_ 1
- #define NTP_API		4	/* NTP API version */
  
! #ifndef MSDOS			/* Microsoft specific */
! #include <sys/syscall.h>
! #endif /* MSDOS */
  
  /*
   * The following defines establish the performance envelope of the
--- 112,120 ----
   */
  #ifndef _SYS_TIMEX_H_
  #define _SYS_TIMEX_H_ 1
  
! #include <features.h>
! #include <time.h>
  
  /*
   * The following defines establish the performance envelope of the
***************
*** 175,181 ****
   * Note: The time member is in microseconds if STA_NANO is zero and
   * nanoseconds if not.
   */
! struct ntptimeval {
  	struct __kernel_timespec time;	/* current time (ns) (ro) */
  	long maxerror;		/* maximum error (us) (ro) */
  	long esterror;		/* estimated error (us) (ro) */
--- 191,203 ----
   * Note: The time member is in microseconds if STA_NANO is zero and
   * nanoseconds if not.
   */
! struct ntptimeval3 {
! 	struct __kernel_timespec time;	/* current time (ns) (ro) */
! 	long maxerror;		/* maximum error (us) (ro) */
! 	long esterror;		/* estimated error (us) (ro) */
! 	int time_state;		/* time status */
! };
! struct ntptimeval4 {
  	struct __kernel_timespec time;	/* current time (ns) (ro) */
  	long maxerror;		/* maximum error (us) (ro) */
  	long esterror;		/* estimated error (us) (ro) */
***************
*** 217,236 ****
  	long	stbcnt;		/* stability limit exceeded (ro) */
  };
  
! #ifdef __FreeBSD__
! 
! #ifdef _KERNEL
! struct timecounter;
! void	ntp_update_second __P((struct timecounter *tc));
! #else /* !_KERNEL */
! #include <sys/cdefs.h>
  
  __BEGIN_DECLS
- int	ntp_adjtime __P((struct timex *));
- int	ntp_gettime __P((struct ntptimeval *));
- __END_DECLS
- #endif /* _KERNEL */
  
! #endif /* __FreeBSD__ */
  
  #endif /* !_SYS_TIMEX_H_ */
--- 239,252 ----
  	long	stbcnt;		/* stability limit exceeded (ro) */
  };
  
! #define NTP_API		4	/* NTP API version */
! #define ntptimeval	ntptimeval4
  
  __BEGIN_DECLS
  
! extern int ntp_adjtime (struct timex *__ntv) __THROW;
! extern int ntp_gettime (struct ntptimeval *__ntv) __THROW;
! 
! __END_DECLS
  
  #endif /* !_SYS_TIMEX_H_ */
