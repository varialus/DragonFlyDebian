#!/bin/sh
# preinst script
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <new-preinst> `install'
#        * <new-preinst> `install' <old-version>
#        * <new-preinst> `upgrade' <old-version>
#        * <old-preinst> `abort-upgrade' <new-version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

PATH="/sbin:/bin:/usr/sbin:/usr/bin"
KERNEL_IMG_CONF="/etc/kernel-img.conf"
RELEASE="@RELEASE@"
VERSION="@VERSION@"

case "$1" in
    install|upgrade)
        # Sanitize and quote maintaner script parameters
        for p in "$@"; do
            q="$(echo "$p" | sed -e "s/'/'\\''/g")"
            DEB_MAINT_PARAMS="$DEB_MAINT_PARAMS '$q'"
        done
        export DEB_MAINT_PARAMS

        # Run preinst hook if defined
        preinst_hook=$(sed '/^\s*preinst_hook/!d;s/.*=\s*//' $KERNEL_IMG_CONF 2>/dev/null || true)
        if [ -n "$preinst_hook" ] ; then
            echo "Running preinst hook script $preinst_hook." 1>&2 
            $preinst_hook "$VERSION" "/boot/kfreebsd-$RELEASE.gz"
        fi

        # Run /etc/kernel/preinst.d/ hooks if they exist
        if [ -d "/etc/kernel/preinst.d" ]; then
            echo "Running /etc/kernel/preinst.d hooks..." 1>&2
            run-parts --verbose --exit-on-error \
                --arg=$RELEASE \
                --arg=/boot/kfreebsd-$RELEASE.gz \
                /etc/kernel/preinst.d
        fi
    ;;

    abort-upgrade)
    ;;

    *)
        echo "preinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
