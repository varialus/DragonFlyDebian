
  current ld provides magic symbols with names like __start_* and __stop_*
  only if they are referenced, FreeBSD kernel needs them,
  for details see http://sourceware.org/bugzilla/show_bug.cgi?id=5391


--- kfreebsd-8-8.0~cvs20090715.orig/sys/conf/kern.post.mk
+++ /dev/null
@@ -1,264 +0,0 @@
-# $FreeBSD: src/sys/conf/kern.post.mk,v 1.105 2009/05/04 20:25:56 jhb Exp $
-
-# Part of a unified Makefile for building kernels.  This part includes all
-# the definitions that need to be after all the % directives except %RULES
-# and ones that act like they are part of %RULES.
-#
-# Most make variables should not be defined in this file.  Instead, they
-# should be defined in the kern.pre.mk so that port makefiles can
-# override or augment them.
-
-# In case the config had a makeoptions DESTDIR...
-.if defined(DESTDIR)
-MKMODULESENV+=	DESTDIR="${DESTDIR}"
-.endif
-SYSDIR?= ${S:C;^[^/];${.CURDIR}/&;}
-MKMODULESENV+=	KERNBUILDDIR="${.CURDIR}" SYSDIR="${SYSDIR}"
-
-.MAIN: all
-
-.for target in all clean cleandepend cleandir clobber depend install \
-    obj reinstall tags
-${target}: kernel-${target}
-.if !defined(MODULES_WITH_WORLD) && !defined(NO_MODULES) && exists($S/modules)
-${target}: modules-${target}
-modules-${target}:
-	cd $S/modules; ${MKMODULESENV} ${MAKE} \
-	    ${target:S/^reinstall$/install/:S/^clobber$/cleandir/}
-.endif
-.endfor
-
-# Handle out of tree ports 
-.if !defined(NO_MODULES) && defined(PORTS_MODULES)
-PORTSMODULESENV=SYSDIR=${SYSDIR}
-.for __target in all install reinstall clean
-${__target}: ports-${__target}
-ports-${__target}:
-.for __i in ${PORTS_MODULES}
-	cd $${PORTSDIR:-/usr/ports}/${__i}; ${PORTSMODULESENV} ${MAKE} -B ${__target:C/install/deinstall reinstall/:C/reinstall/deinstall reinstall/}
-.endfor
-.endfor
-.endif
-
-.ORDER: kernel-install modules-install
-
-kernel-all: ${KERNEL_KO} ${KERNEL_EXTRA}
-
-kernel-cleandir: kernel-clean kernel-cleandepend
-
-kernel-clobber:
-	find . -maxdepth 1 ! -type d ! -name version -delete
-
-kernel-obj:
-
-.if !defined(MODULES_WITH_WORLD) && !defined(NO_MODULES) && exists($S/modules)
-modules: modules-all
-
-.if !defined(NO_MODULES_OBJ)
-modules-all modules-depend: modules-obj
-.endif
-.endif
-
-.if !defined(DEBUG)
-FULLKERNEL=	${KERNEL_KO}
-.else
-FULLKERNEL=	${KERNEL_KO}.debug
-${KERNEL_KO}: ${FULLKERNEL} ${KERNEL_KO}.symbols
-	${OBJCOPY} --strip-debug --add-gnu-debuglink=${KERNEL_KO}.symbols\
-	    ${FULLKERNEL} ${.TARGET}
-${KERNEL_KO}.symbols: ${FULLKERNEL}
-	${OBJCOPY} --only-keep-debug ${FULLKERNEL} ${.TARGET}
-install.debug reinstall.debug: gdbinit
-	cd ${.CURDIR}; ${MAKE} ${.TARGET:R}
-
-# Install gdbinit files for kernel debugging.
-gdbinit:
-	grep -v '# XXX' ${S}/../tools/debugscripts/dot.gdbinit | \
-	    sed "s:MODPATH:${.OBJDIR}/modules:" > .gdbinit
-	cp ${S}/../tools/debugscripts/gdbinit.kernel ${.CURDIR}
-.if exists(${S}/../tools/debugscripts/gdbinit.${MACHINE_ARCH})
-	cp ${S}/../tools/debugscripts/gdbinit.${MACHINE_ARCH} \
-	    ${.CURDIR}/gdbinit.machine
-.endif
-.endif
-
-${FULLKERNEL}: ${SYSTEM_DEP} vers.o
-	@rm -f ${.TARGET}
-	@echo linking ${.TARGET}
-	${SYSTEM_LD}
-.if defined(CTFMERGE)
-	${SYSTEM_CTFMERGE}
-.endif
-.if !defined(DEBUG)
-	${OBJCOPY} --strip-debug ${.TARGET}
-.endif
-	${SYSTEM_LD_TAIL}
-.if defined(MFS_IMAGE)
-	@sh ${S}/tools/embed_mfs.sh ${FULLKERNEL} ${MFS_IMAGE}
-.endif
-
-.if !exists(${.OBJDIR}/.depend)
-${SYSTEM_OBJS}: assym.s vnode_if.h ${BEFORE_DEPEND:M*.h} ${MFILES:T:S/.m$/.h/}
-.endif
-
-LNFILES=	${CFILES:T:S/.c$/.ln/}
-
-.for mfile in ${MFILES}
-# XXX the low quality .m.o rules gnerated by config are normally used
-# instead of the .m.c rules here.
-${mfile:T:S/.m$/.c/}: ${mfile}
-	${AWK} -f $S/tools/makeobjops.awk ${mfile} -c
-${mfile:T:S/.m$/.h/}: ${mfile}
-	${AWK} -f $S/tools/makeobjops.awk ${mfile} -h
-.endfor
-
-kernel-clean:
-	rm -f *.o *.so *.So *.ko *.s eddep errs \
-	    ${FULLKERNEL} ${KERNEL_KO} ${KERNEL_KO}.symbols \
-	    linterrs makelinks tags vers.c \
-	    vnode_if.c vnode_if.h vnode_if_newproto.h vnode_if_typedef.h \
-	    ${MFILES:T:S/.m$/.c/} ${MFILES:T:S/.m$/.h/} \
-	    ${CLEAN}
-
-lint: ${LNFILES}
-	${LINT} ${LINTKERNFLAGS} ${CFLAGS:M-[DILU]*} ${.ALLSRC} 2>&1 | \
-	    tee -a linterrs
-
-# This is a hack.  BFD "optimizes" away dynamic mode if there are no
-# dynamic references.  We could probably do a '-Bforcedynamic' mode like
-# in the a.out ld.  For now, this works.
-HACK_EXTRA_FLAGS?= -shared
-hack.So: Makefile
-	:> hack.c
-	${CC} ${HACK_EXTRA_FLAGS} -nostdlib hack.c -o hack.So
-	rm -f hack.c
-
-# This rule stops ./assym.s in .depend from causing problems.
-./assym.s: assym.s
-
-assym.s: $S/kern/genassym.sh genassym.o
-	NM='${NM}' sh $S/kern/genassym.sh genassym.o > ${.TARGET}
-
-genassym.o: $S/$M/$M/genassym.c
-	${CC} -c ${CFLAGS:N-fno-common} $S/$M/$M/genassym.c
-
-${SYSTEM_OBJS} genassym.o vers.o: opt_global.h
-
-kernel-depend: .depend
-# The argument list can be very long, so use make -V and xargs to
-# pass it to mkdep.
-SRCS=	assym.s vnode_if.h ${BEFORE_DEPEND} ${CFILES} \
-	${SYSTEM_CFILES} ${GEN_CFILES} ${SFILES} \
-	${MFILES:T:S/.m$/.h/}
-.depend: .PRECIOUS ${SRCS}
-	rm -f .newdep
-	${MAKE} -V CFILES -V SYSTEM_CFILES -V GEN_CFILES | \
-	    MKDEP_CPP="${CC} -E" CC="${CC}" xargs mkdep -a -f .newdep ${CFLAGS}
-	${MAKE} -V SFILES | \
-	    MKDEP_CPP="${CC} -E" xargs mkdep -a -f .newdep ${ASM_CFLAGS}
-	rm -f .depend
-	mv .newdep .depend
-
-_ILINKS= machine
-.if ${MACHINE} != ${MACHINE_ARCH}
-_ILINKS+= ${MACHINE_ARCH}
-.endif
-
-# Ensure that the link exists without depending on it when it exists.
-.for _link in ${_ILINKS}
-.if !exists(${.OBJDIR}/${_link})
-${SRCS}: ${_link}
-.endif
-.endfor
-
-${_ILINKS}:
-	@case ${.TARGET} in \
-	machine) \
-		path=${S}/${MACHINE}/include ;; \
-	${MACHINE_ARCH}) \
-		path=${S}/${MACHINE_ARCH}/include ;; \
-	esac ; \
-	${ECHO} ${.TARGET} "->" $$path ; \
-	ln -s $$path ${.TARGET}
-
-# .depend needs include links so we remove them only together.
-kernel-cleandepend:
-	rm -f .depend ${_ILINKS}
-
-links:
-	egrep '#if' ${CFILES} | sed -f $S/conf/defines | \
-	    sed -e 's/:.*//' -e 's/\.c/.o/' | sort -u > dontlink
-	${MAKE} -V CFILES | tr -s ' ' '\12' | sed 's/\.c/.o/' | \
-	    sort -u | comm -23 - dontlink | \
-	    sed 's,../.*/\(.*.o\),rm -f \1;ln -s ../GENERIC/\1 \1,' > makelinks
-	sh makelinks; rm -f dontlink
-
-kernel-tags:
-	@[ -f .depend ] || { echo "you must make depend first"; exit 1; }
-	sh $S/conf/systags.sh
-
-kernel-install:
-	@if [ ! -f ${KERNEL_KO} ] ; then \
-		echo "You must build a kernel first." ; \
-		exit 1 ; \
-	fi
-.if exists(${DESTDIR}${KODIR})
-	-thiskernel=`sysctl -n kern.bootfile` ; \
-	if [ ! "`dirname "$$thiskernel"`" -ef ${DESTDIR}${KODIR} ] ; then \
-		chflags -R noschg ${DESTDIR}${KODIR} ; \
-		rm -rf ${DESTDIR}${KODIR} ; \
-	else \
-		if [ -d ${DESTDIR}${KODIR}.old ] ; then \
-			chflags -R noschg ${DESTDIR}${KODIR}.old ; \
-			rm -rf ${DESTDIR}${KODIR}.old ; \
-		fi ; \
-		mv ${DESTDIR}${KODIR} ${DESTDIR}${KODIR}.old ; \
-		sysctl kern.bootfile=${DESTDIR}${KODIR}.old/"`basename "$$thiskernel"`" ; \
-	fi
-.endif
-	mkdir -p ${DESTDIR}${KODIR}
-	${INSTALL} -p -m 555 -o ${KMODOWN} -g ${KMODGRP} ${KERNEL_KO} ${DESTDIR}${KODIR}
-.if defined(DEBUG) && !defined(INSTALL_NODEBUG)
-	${INSTALL} -p -m 555 -o ${KMODOWN} -g ${KMODGRP} ${KERNEL_KO}.symbols ${DESTDIR}${KODIR}
-.endif
-.if defined(KERNEL_EXTRA_INSTALL)
-	${INSTALL} -p -m 555 -o ${KMODOWN} -g ${KMODGRP} ${KERNEL_EXTRA_INSTALL} ${DESTDIR}${KODIR}
-.endif
-
-
-
-kernel-reinstall:
-	@-chflags -R noschg ${DESTDIR}${KODIR}
-	${INSTALL} -p -m 555 -o ${KMODOWN} -g ${KMODGRP} ${KERNEL_KO} ${DESTDIR}${KODIR}
-.if defined(DEBUG) && !defined(INSTALL_NODEBUG)
-	${INSTALL} -p -m 555 -o ${KMODOWN} -g ${KMODGRP} ${KERNEL_KO}.symbols ${DESTDIR}${KODIR}
-.endif
-
-config.o env.o hints.o vers.o vnode_if.o:
-	${NORMAL_C}
-.if defined(CTFCONVERT)
-	${CTFCONVERT} ${CTFFLAGS} ${.TARGET}
-.endif
-
-config.ln env.ln hints.ln vers.ln vnode_if.ln:
-	${NORMAL_LINT}
-
-vers.c: $S/conf/newvers.sh $S/sys/param.h ${SYSTEM_DEP}
-	MAKE=${MAKE} sh $S/conf/newvers.sh ${KERN_IDENT}
-
-vnode_if.c: $S/tools/vnode_if.awk $S/kern/vnode_if.src
-	${AWK} -f $S/tools/vnode_if.awk $S/kern/vnode_if.src -c
-
-vnode_if.h vnode_if_newproto.h vnode_if_typedef.h: $S/tools/vnode_if.awk \
-    $S/kern/vnode_if.src
-vnode_if.h: vnode_if_newproto.h vnode_if_typedef.h
-	${AWK} -f $S/tools/vnode_if.awk $S/kern/vnode_if.src -h
-vnode_if_newproto.h:
-	${AWK} -f $S/tools/vnode_if.awk $S/kern/vnode_if.src -p
-vnode_if_typedef.h:
-	${AWK} -f $S/tools/vnode_if.awk $S/kern/vnode_if.src -q
-
-# XXX strictly, everything depends on Makefile because changes to ${PROF}
-# only appear there, but we don't handle that.
-
-.include "kern.mk"
--- kfreebsd-8-8.0~cvs20090715.orig/sys/conf/kmod.mk
+++ /dev/null
@@ -1,462 +0,0 @@
-#	From: @(#)bsd.prog.mk	5.26 (Berkeley) 6/25/91
-# $FreeBSD: src/sys/conf/kmod.mk,v 1.227 2009/06/23 13:17:25 rpaulo Exp $
-#
-# The include file <bsd.kmod.mk> handles building and installing loadable
-# kernel modules.
-#
-#
-# +++ variables +++
-#
-# CLEANFILES	Additional files to remove for the clean and cleandir targets.
-#
-# EXPORT_SYMS	A list of symbols that should be exported from the module,
-#		or the name of a file containing a list of symbols, or YES
-#		to export all symbols.  If not defined, no symbols are
-#		exported.
-#
-# KMOD		The name of the kernel module to build.
-#
-# KMODDIR	Base path for kernel modules (see kld(4)). [/boot/kernel]
-#
-# KMODOWN	Module file owner. [${BINOWN}]
-#
-# KMODGRP	Module file group. [${BINGRP}]
-#
-# KMODMODE	Module file mode. [${BINMODE}]
-#
-# KMODLOAD	Command to load a kernel module [/sbin/kldload]
-#
-# KMODUNLOAD	Command to unload a kernel module [/sbin/kldunload]
-#
-# MFILES	Optionally a list of interfaces used by the module.
-#		This file contains a default list of interfaces.
-#
-# PROG		The name of the kernel module to build.
-#		If not supplied, ${KMOD}.ko is used.
-#
-# SRCS		List of source files.
-#
-# FIRMWS	List of firmware images in format filename:shortname:version
-#
-# FIRMWARE_LICENSE
-#		Set to the name of the license the user has to agree on in
-#		order to use this firmware. See /usr/share/doc/legal
-#
-# DESTDIR	The tree where the module gets installed. [not set]
-#
-# +++ targets +++
-#
-# 	install:
-#               install the kernel module; if the Makefile
-#               does not itself define the target install, the targets
-#               beforeinstall and afterinstall may also be used to cause
-#               actions immediately before and after the install target
-#		is executed.
-#
-# 	load:
-#		Load a module.
-#
-# 	unload:
-#		Unload a module.
-#
-
-AWK?=		awk
-KMODLOAD?=	/sbin/kldload
-KMODUNLOAD?=	/sbin/kldunload
-OBJCOPY?=	objcopy
-
-.if defined(KMODDEPS)
-.error "Do not use KMODDEPS on 5.0+; use MODULE_VERSION/MODULE_DEPEND"
-.endif
-
-.include <bsd.init.mk>
-
-.SUFFIXES: .out .o .c .cc .cxx .C .y .l .s .S
-
-.if ${CC} == "icc"
-CFLAGS:=	${CFLAGS:C/(-x[^M^K^W]+)[MKW]+|-x[MKW]+/\1/}
-.else
-. if !empty(CFLAGS:M-O[23s]) && empty(CFLAGS:M-fno-strict-aliasing)
-CFLAGS+=	-fno-strict-aliasing
-. endif
-WERROR?=	-Werror
-.endif
-CFLAGS+=	${WERROR}
-CFLAGS+=	-D_KERNEL
-CFLAGS+=	-DKLD_MODULE
-
-# Don't use any standard or source-relative include directories.
-.if ${CC} == "icc"
-NOSTDINC=	-X
-.else
-CSTD=		c99
-NOSTDINC=	-nostdinc
-.endif
-CFLAGS:=	${CFLAGS:N-I*} ${NOSTDINC} ${INCLMAGIC} ${CFLAGS:M-I*}
-.if defined(KERNBUILDDIR)
-CFLAGS+=	-DHAVE_KERNEL_OPTION_HEADERS -include ${KERNBUILDDIR}/opt_global.h
-.endif
-
-# Add -I paths for system headers.  Individual module makefiles don't
-# need any -I paths for this.  Similar defaults for .PATH can't be
-# set because there are no standard paths for non-headers.
-CFLAGS+=	-I. -I@
-
-# Add -I path for altq headers as they are included via net/if_var.h
-# for example.
-CFLAGS+=	-I@/contrib/altq
-
-.if ${CC} != "icc"
-CFLAGS+=	-finline-limit=${INLINE_LIMIT}
-CFLAGS+= --param inline-unit-growth=100
-CFLAGS+= --param large-function-growth=1000
-.endif
-
-# Disallow common variables, and if we end up with commons from
-# somewhere unexpected, allocate storage for them in the module itself.
-.if ${CC} != "icc"
-CFLAGS+=	-fno-common
-.endif
-LDFLAGS+=	-d -warn-common
-
-CFLAGS+=	${DEBUG_FLAGS}
-.if ${MACHINE_ARCH} == amd64
-CFLAGS+=	-fno-omit-frame-pointer
-.endif
-
-.if ${MACHINE_ARCH} == "powerpc"
-CFLAGS+=	-mlongcall -fno-omit-frame-pointer
-.endif
-
-.if defined(FIRMWS)
-.if !exists(@)
-${KMOD:S/$/.c/}: @
-.else
-${KMOD:S/$/.c/}: @/tools/fw_stub.awk
-.endif
-	${AWK} -f @/tools/fw_stub.awk ${FIRMWS} -m${KMOD} -c${KMOD:S/$/.c/g} \
-	    ${FIRMWARE_LICENSE:C/.+/-l/}${FIRMWARE_LICENSE}
-
-SRCS+=	${KMOD:S/$/.c/}
-CLEANFILES+=	${KMOD:S/$/.c/}
-
-.for _firmw in ${FIRMWS}
-${_firmw:C/\:.*$/.fwo/}:	${_firmw:C/\:.*$//}
-	@${ECHO} ${_firmw:C/\:.*$//} ${.ALLSRC:M*${_firmw:C/\:.*$//}}
-	@if [ -e ${_firmw:C/\:.*$//} ]; then			\
-		${LD} -b binary --no-warn-mismatch ${LDFLAGS}	\
-		    -r -d -o ${.TARGET}	${_firmw:C/\:.*$//};	\
-	else							\
-		ln -s ${.ALLSRC:M*${_firmw:C/\:.*$//}} ${_firmw:C/\:.*$//}; \
-		${LD} -b binary --no-warn-mismatch ${LDFLAGS}	\
-		    -r -d -o ${.TARGET}	${_firmw:C/\:.*$//};	\
-		rm ${_firmw:C/\:.*$//};				\
-	fi
-
-OBJS+=	${_firmw:C/\:.*$/.fwo/}
-.endfor
-.endif
-
-OBJS+=	${SRCS:N*.h:R:S/$/.o/g}
-
-.if !defined(PROG)
-PROG=	${KMOD}.ko
-.endif
-
-.if !defined(DEBUG_FLAGS)
-FULLPROG=	${PROG}
-.else
-FULLPROG=	${PROG}.debug
-${PROG}: ${FULLPROG} ${PROG}.symbols
-	${OBJCOPY} --strip-debug --add-gnu-debuglink=${PROG}.symbols\
-	    ${FULLPROG} ${.TARGET}
-${PROG}.symbols: ${FULLPROG}
-	${OBJCOPY} --only-keep-debug ${FULLPROG} ${.TARGET}
-.endif
-
-.if ${MACHINE_ARCH} != amd64
-${FULLPROG}: ${KMOD}.kld
-	${LD} -Bshareable ${LDFLAGS} -o ${.TARGET} ${KMOD}.kld
-.if !defined(DEBUG_FLAGS)
-	${OBJCOPY} --strip-debug ${.TARGET}
-.endif
-.endif
-
-EXPORT_SYMS?=	NO
-.if ${EXPORT_SYMS} != YES
-CLEANFILES+=	export_syms
-.endif
-
-.if ${MACHINE_ARCH} != amd64
-${KMOD}.kld: ${OBJS}
-.else
-${FULLPROG}: ${OBJS}
-.endif
-	${LD} ${LDFLAGS} -r -d -o ${.TARGET} ${OBJS}
-.if defined(EXPORT_SYMS)
-.if ${EXPORT_SYMS} != YES
-.if ${EXPORT_SYMS} == NO
-	:> export_syms
-.elif !exists(${.CURDIR}/${EXPORT_SYMS})
-	echo ${EXPORT_SYMS} > export_syms
-.else
-	grep -v '^#' < ${EXPORT_SYMS} > export_syms
-.endif
-	awk -f ${SYSDIR}/conf/kmod_syms.awk ${.TARGET} \
-	    export_syms | xargs -I% ${OBJCOPY} % ${.TARGET}
-.endif
-.endif
-.if !defined(DEBUG_FLAGS) && ${MACHINE_ARCH} == amd64
-	${OBJCOPY} --strip-debug ${.TARGET}
-.endif
-
-_ILINKS=@ machine
-.if ${MACHINE} != ${MACHINE_ARCH}
-_ILINKS+=${MACHINE_ARCH}
-.endif
-
-all: objwarn ${PROG}
-
-beforedepend: ${_ILINKS}
-
-# Ensure that the links exist without depending on it when it exists which
-# causes all the modules to be rebuilt when the directory pointed to changes.
-.for _link in ${_ILINKS}
-.if !exists(${.OBJDIR}/${_link})
-${OBJS}: ${_link}
-.endif
-.endfor
-
-# Search for kernel source tree in standard places.
-.for _dir in ${.CURDIR}/../.. ${.CURDIR}/../../.. /sys /usr/src/sys
-.if !defined(SYSDIR) && exists(${_dir}/kern/)
-SYSDIR=	${_dir}
-.endif
-.endfor
-.if !defined(SYSDIR) || !exists(${SYSDIR}/kern/)
-.error "can't find kernel source tree"
-.endif
-
-${_ILINKS}:
-	@case ${.TARGET} in \
-	${MACHINE_ARCH}) \
-		path=${SYSDIR}/${MACHINE_ARCH}/include ;; \
-	machine) \
-		path=${SYSDIR}/${MACHINE}/include ;; \
-	@) \
-		path=${SYSDIR} ;; \
-	esac ; \
-	path=`(cd $$path && /bin/pwd)` ; \
-	${ECHO} ${.TARGET} "->" $$path ; \
-	ln -sf $$path ${.TARGET}
-
-CLEANFILES+= ${PROG} ${KMOD}.kld ${OBJS}
-
-.if defined(DEBUG_FLAGS)
-CLEANFILES+= ${FULLPROG} ${PROG}.symbols
-.endif
-
-.if !target(install)
-
-_INSTALLFLAGS:=	${INSTALLFLAGS}
-.for ie in ${INSTALLFLAGS_EDIT}
-_INSTALLFLAGS:=	${_INSTALLFLAGS${ie}}
-.endfor
-
-.if !target(realinstall)
-realinstall: _kmodinstall
-.ORDER: beforeinstall _kmodinstall
-_kmodinstall:
-	${INSTALL} -o ${KMODOWN} -g ${KMODGRP} -m ${KMODMODE} \
-	    ${_INSTALLFLAGS} ${PROG} ${DESTDIR}${KMODDIR}
-.if defined(DEBUG_FLAGS) && !defined(INSTALL_NODEBUG)
-	${INSTALL} -o ${KMODOWN} -g ${KMODGRP} -m ${KMODMODE} \
-	    ${_INSTALLFLAGS} ${PROG}.symbols ${DESTDIR}${KMODDIR}
-.endif
-
-.include <bsd.links.mk>
-
-.if !defined(NO_XREF)
-afterinstall: _kldxref
-.ORDER: realinstall _kldxref
-.ORDER: _installlinks _kldxref
-_kldxref:
-	@if type kldxref >/dev/null 2>&1; then \
-		${ECHO} kldxref ${DESTDIR}${KMODDIR}; \
-		kldxref ${DESTDIR}${KMODDIR}; \
-	fi
-.endif
-.endif # !target(realinstall)
-
-.endif # !target(install)
-
-.if !target(load)
-load: ${PROG}
-	${KMODLOAD} -v ${.OBJDIR}/${PROG}
-.endif
-
-.if !target(unload)
-unload:
-	${KMODUNLOAD} -v ${PROG}
-.endif
-
-.if defined(KERNBUILDDIR)
-.PATH: ${KERNBUILDDIR}
-CFLAGS+=	-I${KERNBUILDDIR}
-.for _src in ${SRCS:Mopt_*.h}
-CLEANFILES+=	${_src}
-.if !target(${_src})
-${_src}:
-	ln -sf ${KERNBUILDDIR}/${_src} ${.TARGET}
-.endif
-.endfor
-.else
-.for _src in ${SRCS:Mopt_*.h}
-CLEANFILES+=	${_src}
-.if !target(${_src})
-${_src}:
-	:> ${.TARGET}
-.endif
-.endfor
-.endif
-
-MFILES?= dev/acpica/acpi_if.m dev/acpi_support/acpi_wmi_if.m \
-	dev/agp/agp_if.m dev/ata/ata_if.m dev/eisa/eisa_if.m \
-	dev/iicbus/iicbb_if.m dev/iicbus/iicbus_if.m \
-	dev/mmc/mmcbr_if.m dev/mmc/mmcbus_if.m \
-	dev/mii/miibus_if.m dev/ofw/ofw_bus_if.m \
-	dev/pccard/card_if.m dev/pccard/power_if.m dev/pci/pci_if.m \
-	dev/pci/pcib_if.m dev/ppbus/ppbus_if.m dev/smbus/smbus_if.m \
-	dev/sound/pcm/ac97_if.m dev/sound/pcm/channel_if.m \
-	dev/sound/pcm/feeder_if.m dev/sound/pcm/mixer_if.m \
-	dev/sound/midi/mpu_if.m dev/sound/midi/mpufoi_if.m \
-	dev/sound/midi/synth_if.m dev/usb/usb_if.m isa/isa_if.m \
-	kern/bus_if.m kern/clock_if.m \
-	kern/cpufreq_if.m kern/device_if.m kern/serdev_if.m \
-	libkern/iconv_converter_if.m opencrypto/cryptodev_if.m \
-	pc98/pc98/canbus_if.m
-
-.for _srcsrc in ${MFILES}
-.for _ext in c h
-.for _src in ${SRCS:M${_srcsrc:T:R}.${_ext}}
-CLEANFILES+=	${_src}
-.if !target(${_src})
-.if !exists(@)
-${_src}: @
-.else
-${_src}: @/tools/makeobjops.awk @/${_srcsrc}
-.endif
-	${AWK} -f @/tools/makeobjops.awk @/${_srcsrc} -${_ext}
-.endif
-.endfor # _src
-.endfor # _ext
-.endfor # _srcsrc
-
-.if !empty(SRCS:Mvnode_if.c)
-CLEANFILES+=	vnode_if.c
-.if !exists(@)
-vnode_if.c: @
-.else
-vnode_if.c: @/tools/vnode_if.awk @/kern/vnode_if.src
-.endif
-	${AWK} -f @/tools/vnode_if.awk @/kern/vnode_if.src -c
-.endif
-
-.if !empty(SRCS:Mvnode_if.h)
-CLEANFILES+=	vnode_if.h vnode_if_newproto.h vnode_if_typedef.h
-.if !exists(@)
-vnode_if.h vnode_if_newproto.h vnode_if_typedef.h: @
-.else
-vnode_if.h vnode_if_newproto.h vnode_if_typedef.h: @/tools/vnode_if.awk \
-    @/kern/vnode_if.src
-.endif
-vnode_if.h: vnode_if_newproto.h vnode_if_typedef.h
-	${AWK} -f @/tools/vnode_if.awk @/kern/vnode_if.src -h
-vnode_if_newproto.h:
-	${AWK} -f @/tools/vnode_if.awk @/kern/vnode_if.src -p
-vnode_if_typedef.h:
-	${AWK} -f @/tools/vnode_if.awk @/kern/vnode_if.src -q
-.endif
-
-.for _i in mii pccard
-.if !empty(SRCS:M${_i}devs.h)
-CLEANFILES+=	${_i}devs.h
-.if !exists(@)
-${_i}devs.h: @
-.else
-${_i}devs.h: @/tools/${_i}devs2h.awk @/dev/${_i}/${_i}devs
-.endif
-	${AWK} -f @/tools/${_i}devs2h.awk @/dev/${_i}/${_i}devs
-.endif
-.endfor # _i
-
-.if !empty(SRCS:Musbdevs.h)
-CLEANFILES+=	usbdevs.h
-.if !exists(@)
-usbdevs.h: @
-.else
-usbdevs.h: @/tools/usbdevs2h.awk @/dev/usb/usbdevs
-.endif
-	${AWK} -f @/tools/usbdevs2h.awk @/dev/usb/usbdevs -h
-.endif
-
-.if !empty(SRCS:Musbdevs_data.h)
-CLEANFILES+=	usbdevs_data.h
-.if !exists(@)
-usbdevs_data.h: @
-.else
-usbdevs_data.h: @/tools/usbdevs2h.awk @/dev/usb/usbdevs
-.endif
-	${AWK} -f @/tools/usbdevs2h.awk @/dev/usb/usbdevs -d
-.endif
-
-.if !empty(SRCS:Macpi_quirks.h)
-CLEANFILES+=	acpi_quirks.h
-.if !exists(@)
-acpi_quirks.h: @
-.else
-acpi_quirks.h: @/tools/acpi_quirks2h.awk @/dev/acpica/acpi_quirks
-.endif
-	${AWK} -f @/tools/acpi_quirks2h.awk @/dev/acpica/acpi_quirks
-.endif
-
-.if !empty(SRCS:Massym.s)
-CLEANFILES+=	assym.s genassym.o
-assym.s: genassym.o
-.if defined(KERNBUILDDIR)
-genassym.o: opt_global.h
-.endif
-.if !exists(@)
-assym.s: @
-.else
-assym.s: @/kern/genassym.sh
-.endif
-	sh @/kern/genassym.sh genassym.o > ${.TARGET}
-.if exists(@)
-genassym.o: @/${MACHINE_ARCH}/${MACHINE_ARCH}/genassym.c
-.endif
-genassym.o: @ machine ${SRCS:Mopt_*.h}
-	${CC} -c ${CFLAGS:N-fno-common} \
-	    @/${MACHINE_ARCH}/${MACHINE_ARCH}/genassym.c
-.endif
-
-lint: ${SRCS}
-	${LINT} ${LINTKERNFLAGS} ${CFLAGS:M-[DILU]*} ${.ALLSRC:M*.c}
-
-.if defined(KERNBUILDDIR)
-${OBJS}: opt_global.h
-.endif
-
-.include <bsd.dep.mk>
-
-cleandepend: cleanilinks
-# .depend needs include links so we remove them only together.
-cleanilinks:
-	rm -f ${_ILINKS}
-
-.if !exists(${.OBJDIR}/${DEPENDFILE})
-${OBJS}: ${SRCS:M*.h}
-.endif
-
-.include <bsd.obj.mk>
-.include "kern.mk"
